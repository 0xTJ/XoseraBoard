
xoseram_test.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3688 	movel #13960,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,36a0 <SAVE_PROG_EXIT>
    2048:	36a0 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 3374 	lea 3374 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 2428 	lea 2428 <kmain>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 36a0 	movel 36a0 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 33a0 	lea 33a0 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3680 	lea 3680 <salt.0>,%a2
    208a:	47f9 0000 3680 	lea 3680 <salt.0>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3680 	lea 3680 <salt.0>,%a2
    20ac:	47f9 0000 3680 	lea 3680 <salt.0>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <memcheck>:
  lfsr_val &= 0xffffff;

  return lfsr_val;
}

void memcheck() {
    20c4:	4fef ffe4      	lea %sp@(-28),%sp
    20c8:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
  printf("Continuous testing from 0x%06x to 0x%06x (press a key to exit)\n",
    20cc:	2f3c 001f ffff 	movel #2097151,%sp@-
    20d2:	2f3c 0010 0000 	movel #1048576,%sp@-
    20d8:	4879 0000 34c9 	pea 34c9 <__mulsi3+0x2d>
    20de:	47f9 0000 32e0 	lea 32e0 <printf_>,%a3
    20e4:	4e93           	jsr %a3@
  int          update_interval = 0x7000;
  int          pass            = 1;
  int          badpasses       = 0;
  int          goodpasses      = 0;
  int          errors          = 0;
  unsigned int start_ts        = _TIMER_100HZ;
    20e6:	2f79 0000 040c 	movel 40c <_TIMER_100HZ>,%sp@(60)
    20ec:	003c 
    20ee:	4fef 000c      	lea %sp@(12),%sp
  int          errors          = 0;
    20f2:	7400           	moveq #0,%d2
  int          goodpasses      = 0;
    20f4:	42af 0044      	clrl %sp@(68)
  int          badpasses       = 0;
    20f8:	7a00           	moveq #0,%d5
  int          pass            = 1;
    20fa:	7801           	moveq #1,%d4
    20fc:	4bf9 0000 3366 	lea 3366 <mcCheckInput>,%a5
    2102:	49f9 0000 3410 	lea 3410 <__udivsi3>,%a4
static void init_LFSR() {
    2108:	2079 0000 3680 	moveal 3680 <_code_end>,%a0
    210e:	2448           	moveal %a0,%a2
    2110:	2f42 002c      	movel %d2,%sp@(44)
    start_state = _TIMER_100HZ;
    2114:	2239 0000 040c 	movel 40c <_TIMER_100HZ>,%d1
    start_state += salt++;
    211a:	2e0a           	movel %a2,%d7
    211c:	528a           	addql #1,%a2
    211e:	7c00           	moveq #0,%d6
    start_state = _TIMER_100HZ;
    2120:	2241           	moveal %d1,%a1
    2122:	91c8           	subal %a0,%a0
    start_state += salt++;
    2124:	2008           	movel %a0,%d0
    2126:	2209           	movel %a1,%d1
    2128:	d287           	addl %d7,%d1
    212a:	d186           	addxl %d6,%d0
    if (start_state > 0xffffffULL) {
    212c:	4282           	clrl %d2
    212e:	263c 00ff ffff 	movel #16777215,%d3
    2134:	9681           	subl %d1,%d3
    2136:	9580           	subxl %d0,%d2
    2138:	6406           	bccs 2140 <memcheck+0x7c>
      start_state++;
    213a:	4283           	clrl %d3
    213c:	5281           	addql #1,%d1
    213e:	d183           	addxl %d3,%d0
    lfsr_val = (uint32_t)start_state & 0xffffff;
    2140:	2601           	movel %d1,%d3
    2142:	0283 00ff ffff 	andil #16777215,%d3
  } while (lfsr_val == 0);
    2148:	67ca           	beqs 2114 <memcheck+0x50>
    214a:	242f 002c      	movel %sp@(44),%d2
    214e:	2f46 0034      	movel %d6,%sp@(52)
    2152:	2f47 0038      	movel %d7,%sp@(56)
    2156:	2f48 003c      	movel %a0,%sp@(60)
    215a:	2f49 0040      	movel %a1,%sp@(64)
    215e:	23c0 0000 368c 	movel %d0,368c <start_state>
    2164:	23c1 0000 3690 	movel %d1,3690 <start_state+0x4>
    216a:	23c3 0000 3688 	movel %d3,3688 <lfsr_val>
    2170:	23ca 0000 3680 	movel %a2,3680 <_code_end>
    2176:	4a82           	tstl %d2
    2178:	6700 020e      	beqw 2388 <memcheck+0x2c4>
    217c:	2c3c 0000 34be 	movel #13502,%d6
    2182:	7610           	moveq #16,%d3
    2184:	4843           	swap %d3
  for (;;) {
    bool pass_bad = false;

    init_LFSR();

    for (int i = 0; i < memtest_words; i += update_interval) {
    2186:	95ca           	subal %a2,%a2
    2188:	2e2f 0030      	movel %sp@(48),%d7
      if (checkinput()) {
    218c:	4e95           	jsr %a5@
    218e:	4a00           	tstb %d0
    2190:	6600 00b4      	bnew 2246 <memcheck+0x182>
        break;
      }
      unsigned int ts = _TIMER_100HZ - start_ts;
    2194:	2c79 0000 040c 	moveal 40c <_TIMER_100HZ>,%fp
    219a:	9dc7           	subal %d7,%fp
      unsigned int tm = ts / (60 * 100);
      ts              = (ts - (tm * (60 * 100))) / 100;
    219c:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    21a0:	2f0e           	movel %fp,%sp@-
    21a2:	4eb9 0000 346c 	jsr 346c <__umodsi3>
    21a8:	508f           	addql #8,%sp

      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    21aa:	2239 0000 3688 	movel 3688 <lfsr_val>,%d1
    21b0:	0281 0000 ffff 	andil #65535,%d1
    21b6:	2f01           	movel %d1,%sp@-
    21b8:	2f03           	movel %d3,%sp@-
    21ba:	2f04           	movel %d4,%sp@-
    21bc:	2f06           	movel %d6,%sp@-
      ts              = (ts - (tm * (60 * 100))) / 100;
    21be:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    21c2:	2f00           	movel %d0,%sp@-
    21c4:	4e94           	jsr %a4@
      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    21c6:	588f           	addql #4,%sp
    21c8:	2e80           	movel %d0,%sp@
      unsigned int tm = ts / (60 * 100);
    21ca:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    21ce:	2f0e           	movel %fp,%sp@-
    21d0:	4e94           	jsr %a4@
      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    21d2:	588f           	addql #4,%sp
    21d4:	2e80           	movel %d0,%sp@
    21d6:	4879 0000 3509 	pea 3509 <__mulsi3+0x6d>
    21dc:	4e93           	jsr %a3@
             ts,
             errors ? "[BAD]" : "[OK]",
             pass,
             (unsigned int)&word_ptr[i],
             (unsigned int)lfsr_val & 0xffff);
      int k = memtest_words > (i + update_interval) ? (i + update_interval) : memtest_words;
    21de:	4dea 7000      	lea %a2@(28672),%fp
    21e2:	224e           	moveal %fp,%a1
    21e4:	4fef 001c      	lea %sp@(28),%sp
    21e8:	bdfc 0008 0000 	cmpal #524288,%fp
    21ee:	6f06           	bles 21f6 <memcheck+0x132>
    21f0:	227c 0008 0000 	moveal #524288,%a1
      for (int j = i; j < k; j++) {
    21f6:	b5c9           	cmpal %a1,%a2
    21f8:	6c34           	bges 222e <memcheck+0x16a>
    21fa:	2039 0000 3688 	movel 3688 <lfsr_val>,%d0
    2200:	d3fc 0008 0000 	addal #524288,%a1
    2206:	d3c9           	addal %a1,%a1
    2208:	2043           	moveal %d3,%a0
  lfsr_val = lfsr_val << 1;       /* Shift register */
    220a:	2200           	movel %d0,%d1
    220c:	d280           	addl %d0,%d1
  if (msb)                        /* If the output bit is 1, */
    220e:	0800 0017      	btst #23,%d0
    2212:	6706           	beqs 221a <memcheck+0x156>
    lfsr_val ^= 0x80042B;         /*  apply toggle mask. */
    2214:	0a81 0080 042b 	eoril #8389675,%d1
  lfsr_val &= 0xffffff;
    221a:	2001           	movel %d1,%d0
    221c:	0280 00ff ffff 	andil #16777215,%d0
        uint16_t v  = next_LFSR();
    2222:	30c0           	movew %d0,%a0@+
      for (int j = i; j < k; j++) {
    2224:	b3c8           	cmpal %a0,%a1
    2226:	66e2           	bnes 220a <memcheck+0x146>
    2228:	23c0 0000 3688 	movel %d0,3688 <lfsr_val>
    for (int i = 0; i < memtest_words; i += update_interval) {
    222e:	0683 0000 e000 	addil #57344,%d3
    2234:	bdfc 0008 5000 	cmpal #544768,%fp
    223a:	670a           	beqs 2246 <memcheck+0x182>
    223c:	244e           	moveal %fp,%a2
      if (checkinput()) {
    223e:	4e95           	jsr %a5@
    2240:	4a00           	tstb %d0
    2242:	6700 ff50      	beqw 2194 <memcheck+0xd0>
        word_ptr[j] = v;
      }
    }

    if (checkinput()) {
    2246:	4e95           	jsr %a5@
    2248:	1e00           	moveb %d0,%d7
    224a:	6600 0150      	bnew 239c <memcheck+0x2d8>
  lfsr_val = (uint32_t)start_state & 0xffffff;
    224e:	2039 0000 3690 	movel 3690 <start_state+0x4>,%d0
    2254:	0280 00ff ffff 	andil #16777215,%d0
    225a:	23c0 0000 3688 	movel %d0,3688 <lfsr_val>
    2260:	2c7c 0010 0000 	moveal #1048576,%fp
    }
#endif

    reset_LFSR();

    for (int i = 0; i < memtest_words; i += update_interval) {
    2266:	95ca           	subal %a2,%a2
      if (checkinput()) {
    2268:	4e95           	jsr %a5@
    226a:	4a00           	tstb %d0
    226c:	6600 00f0      	bnew 235e <memcheck+0x29a>
        break;
      }
      unsigned int ts = _TIMER_100HZ - start_ts;
    2270:	2c39 0000 040c 	movel 40c <_TIMER_100HZ>,%d6
    2276:	9caf 0030      	subl %sp@(48),%d6
      unsigned int tm = ts / (60 * 100);
    227a:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    227e:	2f06           	movel %d6,%sp@-
    2280:	4e94           	jsr %a4@
    2282:	508f           	addql #8,%sp
    2284:	2600           	movel %d0,%d3
      ts              = (ts - (tm * (60 * 100))) / 100;
    2286:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    228a:	2f06           	movel %d6,%sp@-
    228c:	4eb9 0000 346c 	jsr 346c <__umodsi3>
    2292:	508f           	addql #8,%sp
    2294:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    2298:	2f00           	movel %d0,%sp@-
    229a:	4e94           	jsr %a4@
    229c:	508f           	addql #8,%sp
      printf("\r%u:%02u %s Pass #%d - Verifying words @ 0x%06x (LFSR 0x%04x)...",
    229e:	2c39 0000 3688 	movel 3688 <lfsr_val>,%d6
    22a4:	0286 0000 ffff 	andil #65535,%d6
    22aa:	4a82           	tstl %d2
    22ac:	6700 00d0      	beqw 237e <memcheck+0x2ba>
    22b0:	41f9 0000 34be 	lea 34be <__mulsi3+0x22>,%a0
    22b6:	2f06           	movel %d6,%sp@-
    22b8:	2f0e           	movel %fp,%sp@-
    22ba:	2f04           	movel %d4,%sp@-
    22bc:	2f08           	movel %a0,%sp@-
    22be:	2f00           	movel %d0,%sp@-
    22c0:	2f03           	movel %d3,%sp@-
    22c2:	4879 0000 354c 	pea 354c <__mulsi3+0xb0>
    22c8:	4e93           	jsr %a3@
             ts,
             errors ? "[BAD]" : "[OK]",
             pass,
             (unsigned int)&word_ptr[i],
             (unsigned int)lfsr_val & 0xffff);
      int k = memtest_words > (i + update_interval) ? (i + update_interval) : memtest_words;
    22ca:	2c0a           	movel %a2,%d6
    22cc:	0686 0000 7000 	addil #28672,%d6
    22d2:	2606           	movel %d6,%d3
    22d4:	4fef 001c      	lea %sp@(28),%sp
    22d8:	0c86 0008 0000 	cmpil #524288,%d6
    22de:	6f04           	bles 22e4 <memcheck+0x220>
    22e0:	7608           	moveq #8,%d3
    22e2:	4843           	swap %d3
      for (int j = i; j < k; j++) {
    22e4:	b5c3           	cmpal %d3,%a2
    22e6:	6c5e           	bges 2346 <memcheck+0x282>
    22e8:	0683 0008 0000 	addil #524288,%d3
    22ee:	d683           	addl %d3,%d3
    22f0:	244e           	moveal %fp,%a2
  bool msb = lfsr_val & 0x800000; /* Get MSB (i.e., the output bit). */
    22f2:	2039 0000 3688 	movel 3688 <lfsr_val>,%d0
  lfsr_val = lfsr_val << 1;       /* Shift register */
    22f8:	2200           	movel %d0,%d1
    22fa:	d280           	addl %d0,%d1
  if (msb)                        /* If the output bit is 1, */
    22fc:	0800 0017      	btst #23,%d0
    2300:	6706           	beqs 2308 <memcheck+0x244>
    lfsr_val ^= 0x80042B;         /*  apply toggle mask. */
    2302:	0a81 0080 042b 	eoril #8389675,%d1
  lfsr_val &= 0xffffff;
    2308:	2001           	movel %d1,%d0
    230a:	0280 00ff ffff 	andil #16777215,%d0
    2310:	23c0 0000 3688 	movel %d0,3688 <lfsr_val>
        uint16_t v = next_LFSR();
        if (word_ptr[j] != v) {
    2316:	3052           	moveaw %a2@,%a0
    2318:	b048           	cmpw %a0,%d0
    231a:	6724           	beqs 2340 <memcheck+0x27c>
          errors++;
    231c:	5282           	addql #1,%d2
          if (!pass_bad) {
    231e:	4a07           	tstb %d7
    2320:	6602           	bnes 2324 <memcheck+0x260>
            badpasses++;
    2322:	5285           	addql #1,%d5
          }
          pass_bad = true;
#ifndef SILENCE_ERRORS
          printf("\r > Err %d, pass %d, 0x%06x=0x%04x vs 0x%04x expected                 \n",
    2324:	3f01           	movew %d1,%sp@-
    2326:	4267           	clrw %sp@-
    2328:	3f08           	movew %a0,%sp@-
    232a:	4267           	clrw %sp@-
    232c:	2f0a           	movel %a2,%sp@-
    232e:	2f04           	movel %d4,%sp@-
    2330:	2f02           	movel %d2,%sp@-
    2332:	4879 0000 358d 	pea 358d <__mulsi3+0xf1>
    2338:	4e93           	jsr %a3@
    233a:	4fef 0018      	lea %sp@(24),%sp
          pass_bad = true;
    233e:	7e01           	moveq #1,%d7
      for (int j = i; j < k; j++) {
    2340:	548a           	addql #2,%a2
    2342:	b68a           	cmpl %a2,%d3
    2344:	66ac           	bnes 22f2 <memcheck+0x22e>
    for (int i = 0; i < memtest_words; i += update_interval) {
    2346:	ddfc 0000 e000 	addal #57344,%fp
    234c:	0c86 0008 5000 	cmpil #544768,%d6
    2352:	670a           	beqs 235e <memcheck+0x29a>
    2354:	2446           	moveal %d6,%a2
      if (checkinput()) {
    2356:	4e95           	jsr %a5@
    2358:	4a00           	tstb %d0
    235a:	6700 ff14      	beqw 2270 <memcheck+0x1ac>
                 v);
#endif
        }
      }
    }
    if (checkinput()) {
    235e:	4e95           	jsr %a5@
    2360:	4a00           	tstb %d0
    2362:	6638           	bnes 239c <memcheck+0x2d8>
      break;
    }
    if (!pass_bad) {
    2364:	4a07           	tstb %d7
    2366:	6604           	bnes 236c <memcheck+0x2a8>
      goodpasses++;
    2368:	52af 0044      	addql #1,%sp@(68)
    }
    pass++;
    236c:	5284           	addql #1,%d4
static void init_LFSR() {
    236e:	2079 0000 3680 	moveal 3680 <_code_end>,%a0
    2374:	2448           	moveal %a0,%a2
    2376:	2f42 002c      	movel %d2,%sp@(44)
    237a:	6000 fd98      	braw 2114 <memcheck+0x50>
      printf("\r%u:%02u %s Pass #%d - Verifying words @ 0x%06x (LFSR 0x%04x)...",
    237e:	41f9 0000 34c4 	lea 34c4 <__mulsi3+0x28>,%a0
    2384:	6000 ff30      	braw 22b6 <memcheck+0x1f2>
    2388:	2c3c 0000 34c4 	movel #13508,%d6
  } while (lfsr_val == 0);
    238e:	7610           	moveq #16,%d3
    2390:	4843           	swap %d3
    for (int i = 0; i < memtest_words; i += update_interval) {
    2392:	95ca           	subal %a2,%a2
    2394:	2e2f 0030      	movel %sp@(48),%d7
    2398:	6000 fdf2      	braw 218c <memcheck+0xc8>
  }
  inputchar();
    239c:	4eb9 0000 335c 	jsr 335c <mcInputchar>

  unsigned int ts = _TIMER_100HZ - start_ts;
    23a2:	2639 0000 040c 	movel 40c <_TIMER_100HZ>,%d3
    23a8:	96af 0030      	subl %sp@(48),%d3
  unsigned int tm = ts / (60 * 100);
  ts              = (ts - (tm * (60 * 100))) / 100;
    23ac:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    23b0:	2f03           	movel %d3,%sp@-
    23b2:	4eb9 0000 346c 	jsr 346c <__umodsi3>
    23b8:	508f           	addql #8,%sp
    23ba:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    23be:	2f00           	movel %d0,%sp@-
    23c0:	4e94           	jsr %a4@
  printf("\n\nTesting for %u:%02u, memcheck exiting...\n", tm, ts);
    23c2:	588f           	addql #4,%sp
    23c4:	2e80           	movel %d0,%sp@
  unsigned int tm = ts / (60 * 100);
    23c6:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    23ca:	2f03           	movel %d3,%sp@-
    23cc:	4e94           	jsr %a4@
  printf("\n\nTesting for %u:%02u, memcheck exiting...\n", tm, ts);
    23ce:	588f           	addql #4,%sp
    23d0:	2e80           	movel %d0,%sp@
    23d2:	4879 0000 35d5 	pea 35d5 <__mulsi3+0x139>
    23d8:	4e93           	jsr %a3@
  if (errors) {
    23da:	4fef 000c      	lea %sp@(12),%sp
    23de:	4a82           	tstl %d2
    23e0:	6628           	bnes 240a <memcheck+0x346>
    printf(
        "FAILED! %d failed passes, %d good (%d word errors total).", badpasses, goodpasses, errors);
  } else if (goodpasses > 0) {
    23e2:	4aaf 0044      	tstl %sp@(68)
    23e6:	6e0a           	bgts 23f2 <memcheck+0x32e>
    printf("PASSED! %d error-free test passes.", goodpasses);
  }
}
    23e8:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    23ec:	4fef 001c      	lea %sp@(28),%sp
    23f0:	4e75           	rts
    printf("PASSED! %d error-free test passes.", goodpasses);
    23f2:	2f2f 0044      	movel %sp@(68),%sp@-
    23f6:	4879 0000 363b 	pea 363b <__mulsi3+0x19f>
    23fc:	4e93           	jsr %a3@
    23fe:	508f           	addql #8,%sp
}
    2400:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2404:	4fef 001c      	lea %sp@(28),%sp
    2408:	4e75           	rts
    printf(
    240a:	2f02           	movel %d2,%sp@-
    240c:	2f2f 0048      	movel %sp@(72),%sp@-
    2410:	2f05           	movel %d5,%sp@-
    2412:	4879 0000 3601 	pea 3601 <__mulsi3+0x165>
    2418:	4e93           	jsr %a3@
    241a:	4fef 0010      	lea %sp@(16),%sp
}
    241e:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2422:	4fef 001c      	lea %sp@(28),%sp
    2426:	4e75           	rts

00002428 <kmain>:

void kmain() {
    2428:	2f0b           	movel %a3,%sp@-
    242a:	2f0a           	movel %a2,%sp@-
    printf("\x1b[1;37mXoseRAM \x1b[0mbringup tests\n");
    242c:	4879 0000 365e 	pea 365e <__mulsi3+0x1c2>
    2432:	4eb9 0000 32e0 	jsr 32e0 <printf_>
#ifdef TEST_BANK
    bank_test();
#endif

#ifdef TEST_LFSR
    while (checkinput()) {  // clear any queued input
    2438:	588f           	addql #4,%sp
    243a:	45f9 0000 3366 	lea 3366 <mcCheckInput>,%a2
        inputchar();
    2440:	47f9 0000 335c 	lea 335c <mcInputchar>,%a3
    while (checkinput()) {  // clear any queued input
    2446:	4e92           	jsr %a2@
    2448:	4a00           	tstb %d0
    244a:	6708           	beqs 2454 <kmain+0x2c>
        inputchar();
    244c:	4e93           	jsr %a3@
    while (checkinput()) {  // clear any queued input
    244e:	4e92           	jsr %a2@
    2450:	4a00           	tstb %d0
    2452:	66f8           	bnes 244c <kmain+0x24>
    }
    memcheck();
#endif
}
    2454:	245f           	moveal %sp@+,%a2
    2456:	265f           	moveal %sp@+,%a3
    memcheck();
    2458:	4ef9 0000 20c4 	jmp 20c4 <memcheck>

0000245e <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    245e:	4e75           	rts

00002460 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2460:	4fef ffcc      	lea %sp@(-52),%sp
    2464:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2468:	246f 0064      	moveal %sp@(100),%a2
    246c:	2a2f 0068      	movel %sp@(104),%d5
    2470:	2c2f 0070      	movel %sp@(112),%d6
    2474:	242f 0074      	movel %sp@(116),%d2
    2478:	262f 007c      	movel %sp@(124),%d3
    247c:	2e2f 0084      	movel %sp@(132),%d7
    2480:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    2486:	222f 0088      	movel %sp@(136),%d1
    248a:	0281 0000 0400 	andil #1024,%d1
    2490:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    2494:	4a82           	tstl %d2
    2496:	6700 0174      	beqw 260c <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    249a:	7210           	moveq #16,%d1
    249c:	c2af 0088      	andl %sp@(136),%d1
    24a0:	2f41 0036      	movel %d1,%sp@(54)
    24a4:	082f 0005 008b 	btst #5,%sp@(139)
    24aa:	6600 017e      	bnew 262a <_ntoa_long+0x1ca>
    24ae:	7061           	moveq #97,%d0
    24b0:	41ef 0040      	lea %sp@(64),%a0
    24b4:	2f48 002e      	movel %a0,%sp@(46)
    24b8:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24bc:	2808           	movel %a0,%d4
    24be:	49f9 0000 346c 	lea 346c <__umodsi3>,%a4
    24c4:	47f9 0000 3410 	lea 3410 <__udivsi3>,%a3
    24ca:	1200           	moveb %d0,%d1
    24cc:	0601 fff6      	addib #-10,%d1
    24d0:	2f4a 003a      	movel %a2,%sp@(58)
    24d4:	2a45           	moveal %d5,%a5
    24d6:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    24d8:	2f03           	movel %d3,%sp@-
    24da:	2f02           	movel %d2,%sp@-
    24dc:	4e94           	jsr %a4@
    24de:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    24e0:	7209           	moveq #9,%d1
    24e2:	b280           	cmpl %d0,%d1
    24e4:	652a           	bcss 2510 <_ntoa_long+0xb0>
    24e6:	0600 0030      	addib #48,%d0
    24ea:	2444           	moveal %d4,%a2
    24ec:	14c0           	moveb %d0,%a2@+
      value /= base;
    24ee:	2f03           	movel %d3,%sp@-
    24f0:	2f02           	movel %d2,%sp@-
    24f2:	4e93           	jsr %a3@
    24f4:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    24f6:	b682           	cmpl %d2,%d3
    24f8:	6228           	bhis 2522 <_ntoa_long+0xc2>
    24fa:	bdca           	cmpal %a2,%fp
    24fc:	6724           	beqs 2522 <_ntoa_long+0xc2>
    24fe:	280a           	movel %a2,%d4
      value /= base;
    2500:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    2502:	2f03           	movel %d3,%sp@-
    2504:	2f02           	movel %d2,%sp@-
    2506:	4e94           	jsr %a4@
    2508:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    250a:	7209           	moveq #9,%d1
    250c:	b280           	cmpl %d0,%d1
    250e:	64d6           	bccs 24e6 <_ntoa_long+0x86>
    2510:	d005           	addb %d5,%d0
    2512:	2444           	moveal %d4,%a2
    2514:	14c0           	moveb %d0,%a2@+
      value /= base;
    2516:	2f03           	movel %d3,%sp@-
    2518:	2f02           	movel %d2,%sp@-
    251a:	4e93           	jsr %a3@
    251c:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    251e:	b682           	cmpl %d2,%d3
    2520:	63d8           	blss 24fa <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2522:	246f 003a      	moveal %sp@(58),%a2
    2526:	2a0d           	movel %a5,%d5
    2528:	307c 0001      	moveaw #1,%a0
    252c:	91ef 002e      	subal %sp@(46),%a0
    2530:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    2532:	082f 0001 008b 	btst #1,%sp@(139)
    2538:	6700 013e      	beqw 2678 <_ntoa_long+0x218>
    253c:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    2540:	4aaf 0036      	tstl %sp@(54)
    2544:	6700 023c      	beqw 2782 <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2548:	4aaf 0032      	tstl %sp@(50)
    254c:	6600 01aa      	bnew 26f8 <_ntoa_long+0x298>
    2550:	4a84           	tstl %d4
    2552:	6600 0324      	bnew 2878 <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2556:	7010           	moveq #16,%d0
    2558:	b083           	cmpl %d3,%d0
    255a:	6700 0412      	beqw 296e <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    255e:	5583           	subql #2,%d3
    2560:	6700 04b0      	beqw 2a12 <_ntoa_long+0x5b2>
      buf[len++] = '0';
    2564:	1f7c 0030 0040 	moveb #48,%sp@(64)
    256a:	202f 0088      	movel %sp@(136),%d0
    256e:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2570:	7203           	moveq #3,%d1
    2572:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2574:	2802           	movel %d2,%d4
    if (negative) {
    2576:	4a2f 003f      	tstb %sp@(63)
    257a:	6700 02dc      	beqw 2858 <_ntoa_long+0x3f8>
      buf[len++] = '-';
    257e:	5284           	addql #1,%d4
    2580:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2586:	4a81           	tstl %d1
    2588:	6600 0194      	bnew 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    258c:	b887           	cmpl %d7,%d4
    258e:	6400 018e      	bccw 271e <_ntoa_long+0x2be>
    2592:	242f 006c      	movel %sp@(108),%d2
    2596:	2604           	movel %d4,%d3
    2598:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    259a:	2002           	movel %d2,%d0
    259c:	5282           	addql #1,%d2
    259e:	2f06           	movel %d6,%sp@-
    25a0:	2f00           	movel %d0,%sp@-
    25a2:	2f05           	movel %d5,%sp@-
    25a4:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    25a8:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    25aa:	2003           	movel %d3,%d0
    25ac:	d082           	addl %d2,%d0
    25ae:	4fef 0010      	lea %sp@(16),%sp
    25b2:	be80           	cmpl %d0,%d7
    25b4:	62e4           	bhis 259a <_ntoa_long+0x13a>
    25b6:	2004           	movel %d4,%d0
    25b8:	5280           	addql #1,%d0
    25ba:	be80           	cmpl %d0,%d7
    25bc:	6500 033e      	bcsw 28fc <_ntoa_long+0x49c>
    25c0:	2047           	moveal %d7,%a0
    25c2:	5388           	subql #1,%a0
    25c4:	91c4           	subal %d4,%a0
    25c6:	226f 006c      	moveal %sp@(108),%a1
    25ca:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    25ce:	2609           	movel %a1,%d3
  while (len) {
    25d0:	4a84           	tstl %d4
    25d2:	6600 014e      	bnew 2722 <_ntoa_long+0x2c2>
    25d6:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    25d8:	bcfc 0000      	cmpaw #0,%fp
    25dc:	6722           	beqs 2600 <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    25de:	2602           	movel %d2,%d3
    25e0:	96af 006c      	subl %sp@(108),%d3
    25e4:	be83           	cmpl %d3,%d7
    25e6:	6318           	blss 2600 <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    25e8:	2f06           	movel %d6,%sp@-
    25ea:	2f02           	movel %d2,%sp@-
    25ec:	5282           	addql #1,%d2
    25ee:	2f05           	movel %d5,%sp@-
    25f0:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    25f4:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    25f6:	5283           	addql #1,%d3
    25f8:	4fef 0010      	lea %sp@(16),%sp
    25fc:	be83           	cmpl %d3,%d7
    25fe:	62e8           	bhis 25e8 <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    2600:	2002           	movel %d2,%d0
    2602:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2606:	4fef 0034      	lea %sp@(52),%sp
    260a:	4e75           	rts
    flags &= ~FLAGS_HASH;
    260c:	70ef           	moveq #-17,%d0
    260e:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    2612:	4aaf 0032      	tstl %sp@(50)
    2616:	6640           	bnes 2658 <_ntoa_long+0x1f8>
    2618:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    261c:	2f40 0088      	movel %d0,%sp@(136)
    2620:	082f 0005 008b 	btst #5,%sp@(139)
    2626:	6700 fe86      	beqw 24ae <_ntoa_long+0x4e>
    262a:	7041           	moveq #65,%d0
    262c:	41ef 0040      	lea %sp@(64),%a0
    2630:	2f48 002e      	movel %a0,%sp@(46)
    2634:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2638:	2808           	movel %a0,%d4
    263a:	49f9 0000 346c 	lea 346c <__umodsi3>,%a4
    2640:	47f9 0000 3410 	lea 3410 <__udivsi3>,%a3
    2646:	1200           	moveb %d0,%d1
    2648:	0601 fff6      	addib #-10,%d1
    264c:	2f4a 003a      	movel %a2,%sp@(58)
    2650:	2a45           	moveal %d5,%a5
    2652:	1a01           	moveb %d1,%d5
    2654:	6000 fe82      	braw 24d8 <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    2658:	7802           	moveq #2,%d4
    265a:	c8af 0088      	andl %sp@(136),%d4
    265e:	082f 0001 008b 	btst #1,%sp@(139)
    2664:	6600 01e0      	bnew 2846 <_ntoa_long+0x3e6>
    2668:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    266c:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    2670:	2f7c 0000 0400 	movel #1024,%sp@(50)
    2676:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2678:	4a87           	tstl %d7
    267a:	6700 012e      	beqw 27aa <_ntoa_long+0x34a>
    267e:	7001           	moveq #1,%d0
    2680:	c0af 0088      	andl %sp@(136),%d0
    2684:	2c40           	moveal %d0,%fp
    2686:	082f 0000 008b 	btst #0,%sp@(139)
    268c:	6700 0194      	beqw 2822 <_ntoa_long+0x3c2>
    2690:	4a2f 003f      	tstb %sp@(63)
    2694:	6600 0250      	bnew 28e6 <_ntoa_long+0x486>
    2698:	700c           	moveq #12,%d0
    269a:	c0af 0088      	andl %sp@(136),%d0
    269e:	6600 0246      	bnew 28e6 <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26a2:	b8af 0080      	cmpl %sp@(128),%d4
    26a6:	6400 013a      	bccw 27e2 <_ntoa_long+0x382>
    26aa:	7020           	moveq #32,%d0
    26ac:	b084           	cmpl %d4,%d0
    26ae:	6700 030a      	beqw 29ba <_ntoa_long+0x55a>
    26b2:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    26b6:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    26ba:	5284           	addql #1,%d4
    26bc:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26c0:	b880           	cmpl %d0,%d4
    26c2:	6400 0116      	bccw 27da <_ntoa_long+0x37a>
    26c6:	7220           	moveq #32,%d1
    26c8:	b284           	cmpl %d4,%d1
    26ca:	66ee           	bnes 26ba <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26cc:	bcfc 0000      	cmpaw #0,%fp
    26d0:	6700 0140      	beqw 2812 <_ntoa_long+0x3b2>
    26d4:	7020           	moveq #32,%d0
    26d6:	b087           	cmpl %d7,%d0
    26d8:	6400 0138      	bccw 2812 <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    26dc:	4aaf 0036      	tstl %sp@(54)
    26e0:	6700 020a      	beqw 28ec <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    26e4:	4aaf 0032      	tstl %sp@(50)
    26e8:	6600 0390      	bnew 2a7a <_ntoa_long+0x61a>
    26ec:	7020           	moveq #32,%d0
    26ee:	9dce           	subal %fp,%fp
    26f0:	b0af 0080      	cmpl %sp@(128),%d0
    26f4:	6700 02e8      	beqw 29de <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    26f8:	7003           	moveq #3,%d0
    26fa:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26fe:	7210           	moveq #16,%d1
    2700:	b283           	cmpl %d3,%d1
    2702:	6700 0220      	beqw 2924 <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2706:	5583           	subql #2,%d3
    2708:	6700 01bc      	beqw 28c6 <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    270c:	7220           	moveq #32,%d1
    270e:	b284           	cmpl %d4,%d1
    2710:	6666           	bnes 2778 <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2712:	4a80           	tstl %d0
    2714:	6608           	bnes 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2716:	7220           	moveq #32,%d1
    2718:	b287           	cmpl %d7,%d1
    271a:	6500 fe76      	bcsw 2592 <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    271e:	262f 006c      	movel %sp@(108),%d3
    2722:	4bef 0040      	lea %sp@(64),%a5
    2726:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    272a:	d684           	addl %d4,%d3
    272c:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2730:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2732:	2f06           	movel %d6,%sp@-
    2734:	200c           	movel %a4,%d0
    2736:	908b           	subl %a3,%d0
    2738:	2f00           	movel %d0,%sp@-
    273a:	2f05           	movel %d5,%sp@-
    273c:	1023           	moveb %a3@-,%d0
    273e:	4880           	extw %d0
    2740:	3040           	moveaw %d0,%a0
    2742:	2f08           	movel %a0,%sp@-
    2744:	4e92           	jsr %a2@
  while (len) {
    2746:	4fef 0010      	lea %sp@(16),%sp
    274a:	b7cd           	cmpal %a5,%a3
    274c:	6700 fe8a      	beqw 25d8 <_ntoa_long+0x178>
    2750:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2752:	2f06           	movel %d6,%sp@-
    2754:	200c           	movel %a4,%d0
    2756:	908b           	subl %a3,%d0
    2758:	2f00           	movel %d0,%sp@-
    275a:	2f05           	movel %d5,%sp@-
    275c:	1023           	moveb %a3@-,%d0
    275e:	4880           	extw %d0
    2760:	3040           	moveaw %d0,%a0
    2762:	2f08           	movel %a0,%sp@-
    2764:	4e92           	jsr %a2@
  while (len) {
    2766:	4fef 0010      	lea %sp@(16),%sp
    276a:	b7cd           	cmpal %a5,%a3
    276c:	66c2           	bnes 2730 <_ntoa_long+0x2d0>
    276e:	6000 fe68      	braw 25d8 <_ntoa_long+0x178>
      buf[len++] = 'X';
    2772:	5384           	subql #1,%d4
    2774:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    2778:	2004           	movel %d4,%d0
    277a:	5284           	addql #1,%d4
    277c:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2782:	7020           	moveq #32,%d0
    2784:	b084           	cmpl %d4,%d0
    2786:	6600 0134      	bnew 28bc <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    278a:	7003           	moveq #3,%d0
    278c:	c0af 0088      	andl %sp@(136),%d0
    2790:	6700 00a8      	beqw 283a <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    2794:	262f 006c      	movel %sp@(108),%d3
    2798:	7820           	moveq #32,%d4
    279a:	4bef 0040      	lea %sp@(64),%a5
    279e:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    27a2:	d684           	addl %d4,%d3
    27a4:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    27a8:	6086           	bras 2730 <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27aa:	b8af 0080      	cmpl %sp@(128),%d4
    27ae:	6400 0280      	bccw 2a30 <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    27b2:	7201           	moveq #1,%d1
    27b4:	c2af 0088      	andl %sp@(136),%d1
    27b8:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27ba:	7020           	moveq #32,%d0
    27bc:	b084           	cmpl %d4,%d0
    27be:	6600 fef2      	bnew 26b2 <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27c2:	4a81           	tstl %d1
    27c4:	6700 02ba      	beqw 2a80 <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    27c8:	4aaf 0036      	tstl %sp@(54)
    27cc:	6600 02ba      	bnew 2a88 <_ntoa_long+0x628>
    27d0:	9dce           	subal %fp,%fp
    27d2:	262f 006c      	movel %sp@(108),%d3
    27d6:	7820           	moveq #32,%d4
    27d8:	60c0           	bras 279a <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27da:	bcfc 0000      	cmpaw #0,%fp
    27de:	6700 fd60      	beqw 2540 <_ntoa_long+0xe0>
    27e2:	be84           	cmpl %d4,%d7
    27e4:	6300 024a      	blsw 2a30 <_ntoa_long+0x5d0>
    27e8:	7220           	moveq #32,%d1
    27ea:	b284           	cmpl %d4,%d1
    27ec:	6700 0270      	beqw 2a5e <_ntoa_long+0x5fe>
    27f0:	43ef 0040      	lea %sp@(64),%a1
    27f4:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    27f8:	2009           	movel %a1,%d0
    27fa:	d087           	addl %d7,%d0
    27fc:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    2800:	10bc 0030      	moveb #48,%a0@
    2804:	2208           	movel %a0,%d1
    2806:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2808:	b1c0           	cmpal %d0,%a0
    280a:	6700 0100      	beqw 290c <_ntoa_long+0x4ac>
    280e:	bdc8           	cmpal %a0,%fp
    2810:	66ee           	bnes 2800 <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    2812:	4aaf 0036      	tstl %sp@(54)
    2816:	6700 00d4      	beqw 28ec <_ntoa_long+0x48c>
    281a:	9dce           	subal %fp,%fp
    281c:	7820           	moveq #32,%d4
    281e:	6000 fd28      	braw 2548 <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2822:	b8af 0080      	cmpl %sp@(128),%d4
    2826:	6400 fd18      	bccw 2540 <_ntoa_long+0xe0>
    282a:	7220           	moveq #32,%d1
    282c:	b284           	cmpl %d4,%d1
    282e:	6600 fe82      	bnew 26b2 <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    2832:	4aaf 0036      	tstl %sp@(54)
    2836:	6600 0250      	bnew 2a88 <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    283a:	7820           	moveq #32,%d4
    283c:	b887           	cmpl %d7,%d4
    283e:	6500 fd52      	bcsw 2592 <_ntoa_long+0x132>
    2842:	6000 feda      	braw 271e <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    2846:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    284a:	7203           	moveq #3,%d1
    284c:	c280           	andl %d0,%d1
      buf[len++] = '-';
    284e:	2802           	movel %d2,%d4
    if (negative) {
    2850:	4a2f 003f      	tstb %sp@(63)
    2854:	6600 fd28      	bnew 257e <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    2858:	0800 0002      	btst #2,%d0
    285c:	6700 00e8      	beqw 2946 <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2860:	5284           	addql #1,%d4
    2862:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2868:	4a81           	tstl %d1
    286a:	6600 feb2      	bnew 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    286e:	b887           	cmpl %d7,%d4
    2870:	6500 fd20      	bcsw 2592 <_ntoa_long+0x132>
    2874:	6000 fea8      	braw 271e <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2878:	b8af 0080      	cmpl %sp@(128),%d4
    287c:	6706           	beqs 2884 <_ntoa_long+0x424>
    287e:	be84           	cmpl %d4,%d7
    2880:	6600 fe76      	bnew 26f8 <_ntoa_long+0x298>
      len--;
    2884:	2004           	movel %d4,%d0
    2886:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2888:	7201           	moveq #1,%d1
    288a:	b284           	cmpl %d4,%d1
    288c:	6700 fcc8      	beqw 2556 <_ntoa_long+0xf6>
    2890:	7210           	moveq #16,%d1
    2892:	b283           	cmpl %d3,%d1
    2894:	6700 01a8      	beqw 2a3e <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2898:	7202           	moveq #2,%d1
      len--;
    289a:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    289c:	b283           	cmpl %d3,%d1
    289e:	6600 feda      	bnew 277a <_ntoa_long+0x31a>
    28a2:	7003           	moveq #3,%d0
    28a4:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    28a8:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    28ae:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    28b0:	7220           	moveq #32,%d1
    28b2:	b284           	cmpl %d4,%d1
    28b4:	6700 fe5c      	beqw 2712 <_ntoa_long+0x2b2>
    28b8:	6000 febe      	braw 2778 <_ntoa_long+0x318>
    28bc:	202f 0088      	movel %sp@(136),%d0
    28c0:	2404           	movel %d4,%d2
    28c2:	6000 fcac      	braw 2570 <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28c6:	7220           	moveq #32,%d1
    28c8:	b284           	cmpl %d4,%d1
    28ca:	66dc           	bnes 28a8 <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28cc:	4a80           	tstl %d0
    28ce:	6600 fe4e      	bnew 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    28d2:	7020           	moveq #32,%d0
    28d4:	b087           	cmpl %d7,%d0
    28d6:	6400 fe46      	bccw 271e <_ntoa_long+0x2be>
    28da:	242f 006c      	movel %sp@(108),%d2
    28de:	2604           	movel %d4,%d3
    28e0:	9682           	subl %d2,%d3
    28e2:	6000 fcb6      	braw 259a <_ntoa_long+0x13a>
      width--;
    28e6:	5387           	subql #1,%d7
    28e8:	6000 fdb8      	braw 26a2 <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    28ec:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    28ee:	7003           	moveq #3,%d0
    28f0:	c0af 0088      	andl %sp@(136),%d0
    28f4:	6600 fe9e      	bnew 2794 <_ntoa_long+0x334>
    28f8:	6000 ff40      	braw 283a <_ntoa_long+0x3da>
    28fc:	91c8           	subal %a0,%a0
    28fe:	226f 006c      	moveal %sp@(108),%a1
    2902:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2906:	2609           	movel %a1,%d3
    2908:	6000 fcc6      	braw 25d0 <_ntoa_long+0x170>
      buf[len++] = '0';
    290c:	307c 0001      	moveaw #1,%a0
    2910:	91c9           	subal %a1,%a0
    2912:	2808           	movel %a0,%d4
    2914:	d881           	addl %d1,%d4
    2916:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2918:	4aaf 0036      	tstl %sp@(54)
    291c:	6600 fc2a      	bnew 2548 <_ntoa_long+0xe8>
    2920:	6000 fe60      	braw 2782 <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2924:	7220           	moveq #32,%d1
    2926:	082f 0005 008b 	btst #5,%sp@(139)
    292c:	6600 00ca      	bnew 29f8 <_ntoa_long+0x598>
    2930:	b284           	cmpl %d4,%d1
    2932:	6600 00b0      	bnew 29e4 <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2936:	4a80           	tstl %d0
    2938:	6600 fde4      	bnew 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    293c:	b287           	cmpl %d7,%d1
    293e:	6500 fc52      	bcsw 2592 <_ntoa_long+0x132>
    2942:	6000 fdda      	braw 271e <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    2946:	0800 0003      	btst #3,%d0
    294a:	6640           	bnes 298c <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    294c:	4a81           	tstl %d1
    294e:	6600 00d8      	bnew 2a28 <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    2952:	b487           	cmpl %d7,%d2
    2954:	6500 fc3c      	bcsw 2592 <_ntoa_long+0x132>
  while (len) {
    2958:	4a82           	tstl %d2
    295a:	6600 fdc2      	bnew 271e <_ntoa_long+0x2be>
    295e:	242f 006c      	movel %sp@(108),%d2
}
    2962:	2002           	movel %d2,%d0
    2964:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2968:	4fef 0034      	lea %sp@(52),%sp
    296c:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    296e:	082f 0005 008b 	btst #5,%sp@(139)
    2974:	662e           	bnes 29a4 <_ntoa_long+0x544>
      buf[len++] = 'x';
    2976:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    297c:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2982:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2986:	7402           	moveq #2,%d2
    2988:	6000 fbe6      	braw 2570 <_ntoa_long+0x110>
      buf[len++] = ' ';
    298c:	5284           	addql #1,%d4
    298e:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2994:	4a81           	tstl %d1
    2996:	6600 fd86      	bnew 271e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    299a:	b887           	cmpl %d7,%d4
    299c:	6500 fbf4      	bcsw 2592 <_ntoa_long+0x132>
    29a0:	6000 fd7c      	braw 271e <_ntoa_long+0x2be>
      buf[len++] = 'X';
    29a4:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    29aa:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    29b0:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    29b4:	7402           	moveq #2,%d2
    29b6:	6000 fbb8      	braw 2570 <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29ba:	7220           	moveq #32,%d1
    29bc:	b287           	cmpl %d7,%d1
    29be:	6400 fe08      	bccw 27c8 <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    29c2:	4aaf 0036      	tstl %sp@(54)
    29c6:	6700 ff24      	beqw 28ec <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    29ca:	4aaf 0032      	tstl %sp@(50)
    29ce:	6600 00aa      	bnew 2a7a <_ntoa_long+0x61a>
    29d2:	7220           	moveq #32,%d1
    29d4:	9dce           	subal %fp,%fp
    29d6:	b2af 0080      	cmpl %sp@(128),%d1
    29da:	6600 fd1c      	bnew 26f8 <_ntoa_long+0x298>
      len--;
    29de:	701f           	moveq #31,%d0
    29e0:	6000 feae      	braw 2890 <_ntoa_long+0x430>
      buf[len++] = 'x';
    29e4:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    29ea:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    29ec:	7220           	moveq #32,%d1
    29ee:	b284           	cmpl %d4,%d1
    29f0:	6700 fd20      	beqw 2712 <_ntoa_long+0x2b2>
    29f4:	6000 fd82      	braw 2778 <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    29f8:	b284           	cmpl %d4,%d1
    29fa:	6700 fed0      	beqw 28cc <_ntoa_long+0x46c>
      buf[len++] = 'X';
    29fe:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    2a04:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2a06:	7220           	moveq #32,%d1
    2a08:	b284           	cmpl %d4,%d1
    2a0a:	6700 fd06      	beqw 2712 <_ntoa_long+0x2b2>
    2a0e:	6000 fd68      	braw 2778 <_ntoa_long+0x318>
      buf[len++] = 'b';
    2a12:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    2a18:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2a1e:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2a22:	7402           	moveq #2,%d2
    2a24:	6000 fb4a      	braw 2570 <_ntoa_long+0x110>
    2a28:	262f 006c      	movel %sp@(108),%d3
    2a2c:	6000 fba2      	braw 25d0 <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a30:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2a32:	4aaf 0036      	tstl %sp@(54)
    2a36:	6600 fb10      	bnew 2548 <_ntoa_long+0xe8>
    2a3a:	6000 fd46      	braw 2782 <_ntoa_long+0x322>
      buf[len++] = 'x';
    2a3e:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a42:	082f 0005 008b 	btst #5,%sp@(139)
    2a48:	6600 fd28      	bnew 2772 <_ntoa_long+0x312>
      buf[len++] = 'x';
    2a4c:	2004           	movel %d4,%d0
    2a4e:	5380           	subql #1,%d0
    2a50:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    2a54:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    2a5a:	6000 fd26      	braw 2782 <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    2a5e:	4aaf 0036      	tstl %sp@(54)
    2a62:	6700 fe88      	beqw 28ec <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a66:	4aaf 0032      	tstl %sp@(50)
    2a6a:	660e           	bnes 2a7a <_ntoa_long+0x61a>
    2a6c:	7020           	moveq #32,%d0
    2a6e:	b0af 0080      	cmpl %sp@(128),%d0
    2a72:	6738           	beqs 2aac <_ntoa_long+0x64c>
    2a74:	7220           	moveq #32,%d1
    2a76:	b287           	cmpl %d7,%d1
    2a78:	6732           	beqs 2aac <_ntoa_long+0x64c>
    2a7a:	9dce           	subal %fp,%fp
    2a7c:	6000 fc7a      	braw 26f8 <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2a80:	4aaf 0036      	tstl %sp@(54)
    2a84:	6700 fc98      	beqw 271e <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2a88:	4aaf 0032      	tstl %sp@(50)
    2a8c:	6708           	beqs 2a96 <_ntoa_long+0x636>
    2a8e:	9dce           	subal %fp,%fp
    2a90:	7820           	moveq #32,%d4
    2a92:	6000 fc64      	braw 26f8 <_ntoa_long+0x298>
    2a96:	7020           	moveq #32,%d0
    2a98:	7820           	moveq #32,%d4
    2a9a:	b0af 0080      	cmpl %sp@(128),%d0
    2a9e:	6714           	beqs 2ab4 <_ntoa_long+0x654>
    2aa0:	9dce           	subal %fp,%fp
    2aa2:	be84           	cmpl %d4,%d7
    2aa4:	6600 fc52      	bnew 26f8 <_ntoa_long+0x298>
    2aa8:	6000 fdda      	braw 2884 <_ntoa_long+0x424>
    2aac:	9dce           	subal %fp,%fp
      len--;
    2aae:	701f           	moveq #31,%d0
    2ab0:	6000 fdde      	braw 2890 <_ntoa_long+0x430>
    2ab4:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2ab6:	9dce           	subal %fp,%fp
    2ab8:	6000 fdd6      	braw 2890 <_ntoa_long+0x430>

00002abc <_out_char>:
{
    2abc:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2ac0:	4a00           	tstb %d0
    2ac2:	6602           	bnes 2ac6 <_out_char+0xa>
}
    2ac4:	4e75           	rts
    _putchar(character);
    2ac6:	4880           	extw %d0
    2ac8:	3040           	moveaw %d0,%a0
    2aca:	2f48 0004      	movel %a0,%sp@(4)
    2ace:	4ef9 0000 3308 	jmp 3308 <_putchar>

00002ad4 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2ad4:	4fef fff4      	lea %sp@(-12),%sp
    2ad8:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2adc:	2a6f 003c      	moveal %sp@(60),%a5
    2ae0:	2c2f 0040      	movel %sp@(64),%d6
    2ae4:	242f 0044      	movel %sp@(68),%d2
    2ae8:	286f 0048      	moveal %sp@(72),%a4
    2aec:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2af0:	4a86           	tstl %d6
    2af2:	6700 023e      	beqw 2d32 <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2af6:	1014           	moveb %a4@,%d0
    2af8:	95ca           	subal %a2,%a2
    2afa:	4a00           	tstb %d0
    2afc:	6700 0244      	beqw 2d42 <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2b00:	2c7c 0000 2b70 	moveal #11120,%fp
      format++;
    2b06:	528c           	addql #1,%a4
    if (*format != '%') {
    2b08:	0c00 0025      	cmpib #37,%d0
    2b0c:	6740           	beqs 2b4e <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2b0e:	280a           	movel %a2,%d4
    2b10:	5284           	addql #1,%d4
    2b12:	2f02           	movel %d2,%sp@-
    2b14:	2f0a           	movel %a2,%sp@-
    2b16:	2f06           	movel %d6,%sp@-
    2b18:	4880           	extw %d0
    2b1a:	3040           	moveaw %d0,%a0
    2b1c:	2f08           	movel %a0,%sp@-
    2b1e:	4e95           	jsr %a5@
      continue;
    2b20:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2b24:	2444           	moveal %d4,%a2
  while (*format)
    2b26:	1014           	moveb %a4@,%d0
    2b28:	66dc           	bnes 2b06 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2b2a:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2b2c:	b5c2           	cmpal %d2,%a2
    2b2e:	6504           	bcss 2b34 <_vsnprintf+0x60>
    2b30:	2442           	moveal %d2,%a2
    2b32:	538a           	subql #1,%a2
    2b34:	2f02           	movel %d2,%sp@-
    2b36:	2f0a           	movel %a2,%sp@-
    2b38:	2f06           	movel %d6,%sp@-
    2b3a:	42a7           	clrl %sp@-
    2b3c:	4e95           	jsr %a5@
  return (int)idx;
    2b3e:	4fef 0010      	lea %sp@(16),%sp
}
    2b42:	2003           	movel %d3,%d0
    2b44:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2b48:	4fef 000c      	lea %sp@(12),%sp
    2b4c:	4e75           	rts
    flags = 0U;
    2b4e:	7200           	moveq #0,%d1
      switch (*format) {
    2b50:	204c           	moveal %a4,%a0
    2b52:	1018           	moveb %a0@+,%d0
    2b54:	1800           	moveb %d0,%d4
    2b56:	0604 ffe0      	addib #-32,%d4
    2b5a:	0c04 0010      	cmpib #16,%d4
    2b5e:	6232           	bhis 2b92 <_vsnprintf+0xbe>
    2b60:	0284 0000 00ff 	andil #255,%d4
    2b66:	d884           	addl %d4,%d4
    2b68:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2b6c:	4efb 9002      	jmp %pc@(2b70 <_vsnprintf+0x9c>,%a1:w)
    2b70:	00e2           	.short 0x00e2
    2b72:	0022 0022      	orib #34,%a2@-
    2b76:	00d8           	.short 0x00d8
    2b78:	0022 0022      	orib #34,%a2@-
    2b7c:	0022 0022      	orib #34,%a2@-
    2b80:	0022 0022      	orib #34,%a2@-
    2b84:	0022 00ce      	orib #-50,%a2@-
    2b88:	0022 00c4      	orib #-60,%a2@-
    2b8c:	0022 0022      	orib #34,%a2@-
    2b90:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2b92:	1800           	moveb %d0,%d4
    2b94:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2b98:	0c04 0009      	cmpib #9,%d4
    2b9c:	6300 00be      	blsw 2c5c <_vsnprintf+0x188>
    else if (*format == '*') {
    2ba0:	0c00 002a      	cmpib #42,%d0
    2ba4:	6700 0172      	beqw 2d18 <_vsnprintf+0x244>
    width = 0U;
    2ba8:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2baa:	0c00 002e      	cmpib #46,%d0
    2bae:	6700 00fc      	beqw 2cac <_vsnprintf+0x1d8>
    precision = 0U;
    2bb2:	7e00           	moveq #0,%d7
        format++;
    2bb4:	2808           	movel %a0,%d4
    switch (*format) {
    2bb6:	0c00 006c      	cmpib #108,%d0
    2bba:	6700 011e      	beqw 2cda <_vsnprintf+0x206>
    2bbe:	0c00 006c      	cmpib #108,%d0
    2bc2:	6e00 0136      	bgtw 2cfa <_vsnprintf+0x226>
    2bc6:	0c00 0068      	cmpib #104,%d0
    2bca:	6700 02c8      	beqw 2e94 <_vsnprintf+0x3c0>
    2bce:	0c00 006a      	cmpib #106,%d0
    2bd2:	6600 017a      	bnew 2d4e <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2bd6:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2bda:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2bde:	2844           	moveal %d4,%a4
    2be0:	528c           	addql #1,%a4
    switch (*format) {
    2be2:	0c00 0078      	cmpib #120,%d0
    2be6:	6e00 0198      	bgtw 2d80 <_vsnprintf+0x2ac>
    2bea:	0c00 0063      	cmpib #99,%d0
    2bee:	6e00 0168      	bgtw 2d58 <_vsnprintf+0x284>
    2bf2:	0c00 0062      	cmpib #98,%d0
    2bf6:	6700 05de      	beqw 31d6 <_vsnprintf+0x702>
    2bfa:	0c00 0063      	cmpib #99,%d0
    2bfe:	6700 0362      	beqw 2f62 <_vsnprintf+0x48e>
    2c02:	0c00 0025      	cmpib #37,%d0
    2c06:	6600 050a      	bnew 3112 <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2c0a:	280a           	movel %a2,%d4
    2c0c:	5284           	addql #1,%d4
    2c0e:	2f02           	movel %d2,%sp@-
    2c10:	2f0a           	movel %a2,%sp@-
    2c12:	2f06           	movel %d6,%sp@-
    2c14:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2c18:	4e95           	jsr %a5@
        break;
    2c1a:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2c1e:	2444           	moveal %d4,%a2
  while (*format)
    2c20:	1014           	moveb %a4@,%d0
    2c22:	6600 fee2      	bnew 2b06 <_vsnprintf+0x32>
    2c26:	6000 ff02      	braw 2b2a <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2c2a:	7001           	moveq #1,%d0
    2c2c:	8280           	orl %d0,%d1
  while (*format)
    2c2e:	2848           	moveal %a0,%a4
    2c30:	6000 ff1e      	braw 2b50 <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2c34:	7a02           	moveq #2,%d5
    2c36:	8285           	orl %d5,%d1
  while (*format)
    2c38:	2848           	moveal %a0,%a4
    2c3a:	6000 ff14      	braw 2b50 <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2c3e:	7004           	moveq #4,%d0
    2c40:	8280           	orl %d0,%d1
  while (*format)
    2c42:	2848           	moveal %a0,%a4
    2c44:	6000 ff0a      	braw 2b50 <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2c48:	7010           	moveq #16,%d0
    2c4a:	8280           	orl %d0,%d1
  while (*format)
    2c4c:	2848           	moveal %a0,%a4
    2c4e:	6000 ff00      	braw 2b50 <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2c52:	7a08           	moveq #8,%d5
    2c54:	8285           	orl %d5,%d1
  while (*format)
    2c56:	2848           	moveal %a0,%a4
    2c58:	6000 fef6      	braw 2b50 <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2c5c:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c5e:	2848           	moveal %a0,%a4
    2c60:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2c64:	d3c9           	addal %a1,%a1
    2c66:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2c6a:	d7cb           	addal %a3,%a3
    2c6c:	4880           	extw %d0
    2c6e:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2c72:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c74:	1800           	moveb %d0,%d4
    2c76:	0604 ffd0      	addib #-48,%d4
    2c7a:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2c7c:	0c04 0009      	cmpib #9,%d4
    2c80:	6200 ff28      	bhiw 2baa <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2c84:	2848           	moveal %a0,%a4
    2c86:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2c8a:	d3c9           	addal %a1,%a1
    2c8c:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2c90:	d7cb           	addal %a3,%a3
    2c92:	4880           	extw %d0
    2c94:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2c98:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2c9a:	1800           	moveb %d0,%d4
    2c9c:	0604 ffd0      	addib #-48,%d4
    2ca0:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2ca2:	0c04 0009      	cmpib #9,%d4
    2ca6:	63b6           	blss 2c5e <_vsnprintf+0x18a>
    2ca8:	6000 ff00      	braw 2baa <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2cac:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2cb0:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2cb4:	1a00           	moveb %d0,%d5
    2cb6:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2cba:	0c05 0009      	cmpib #9,%d5
    2cbe:	6300 02f6      	blsw 2fb6 <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2cc2:	0c00 002a      	cmpib #42,%d0
    2cc6:	6700 0334      	beqw 2ffc <_vsnprintf+0x528>
      format++;
    2cca:	2848           	moveal %a0,%a4
    precision = 0U;
    2ccc:	7e00           	moveq #0,%d7
    2cce:	5288           	addql #1,%a0
        format++;
    2cd0:	2808           	movel %a0,%d4
    switch (*format) {
    2cd2:	0c00 006c      	cmpib #108,%d0
    2cd6:	6600 fee6      	bnew 2bbe <_vsnprintf+0xea>
        if (*format == 'l') {
    2cda:	102c 0001      	moveb %a4@(1),%d0
    2cde:	0c00 006c      	cmpib #108,%d0
    2ce2:	6700 040a      	beqw 30ee <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2ce6:	0041 0100      	oriw #256,%d1
        format++;
    2cea:	2844           	moveal %d4,%a4
    2cec:	528c           	addql #1,%a4
    switch (*format) {
    2cee:	0c00 0078      	cmpib #120,%d0
    2cf2:	6f00 fef6      	blew 2bea <_vsnprintf+0x116>
    2cf6:	6000 0088      	braw 2d80 <_vsnprintf+0x2ac>
    switch (*format) {
    2cfa:	0c00 007a      	cmpib #122,%d0
    2cfe:	6600 00a2      	bnew 2da2 <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2d02:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2d06:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2d0a:	2844           	moveal %d4,%a4
    2d0c:	528c           	addql #1,%a4
    switch (*format) {
    2d0e:	0c00 0078      	cmpib #120,%d0
    2d12:	6f00 fed6      	blew 2bea <_vsnprintf+0x116>
    2d16:	6068           	bras 2d80 <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2d18:	2243           	moveal %d3,%a1
    2d1a:	2659           	moveal %a1@+,%a3
    2d1c:	2609           	movel %a1,%d3
      if (w < 0) {
    2d1e:	b6fc 0000      	cmpaw #0,%a3
    2d22:	6d00 0124      	bltw 2e48 <_vsnprintf+0x374>
    if (*format == '.') {
    2d26:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2d2a:	2848           	moveal %a0,%a4
    2d2c:	5288           	addql #1,%a0
    2d2e:	6000 fe7a      	braw 2baa <_vsnprintf+0xd6>
    out = _out_null;
    2d32:	4bf9 0000 245e 	lea 245e <_out_null>,%a5
  while (*format)
    2d38:	1014           	moveb %a4@,%d0
    2d3a:	95ca           	subal %a2,%a2
    2d3c:	4a00           	tstb %d0
    2d3e:	6600 fdc0      	bnew 2b00 <_vsnprintf+0x2c>
    2d42:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2d44:	b5c2           	cmpal %d2,%a2
    2d46:	6500 fdec      	bcsw 2b34 <_vsnprintf+0x60>
    2d4a:	6000 fde4      	braw 2b30 <_vsnprintf+0x5c>
        format++;
    2d4e:	2848           	moveal %a0,%a4
    switch (*format) {
    2d50:	0c00 0063      	cmpib #99,%d0
    2d54:	6f00 fe9c      	blew 2bf2 <_vsnprintf+0x11e>
    2d58:	1a00           	moveb %d0,%d5
    2d5a:	0605 ff9c      	addib #-100,%d5
    2d5e:	0285 0000 00ff 	andil #255,%d5
    2d64:	7801           	moveq #1,%d4
    2d66:	ebac           	lsll %d5,%d4
    2d68:	0284 0012 0821 	andil #1181729,%d4
    2d6e:	6652           	bnes 2dc2 <_vsnprintf+0x2ee>
    2d70:	0c00 0073      	cmpib #115,%d0
    2d74:	6700 0140      	beqw 2eb6 <_vsnprintf+0x3e2>
    2d78:	0c00 0070      	cmpib #112,%d0
    2d7c:	6700 00e0      	beqw 2e5e <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2d80:	280a           	movel %a2,%d4
    2d82:	5284           	addql #1,%d4
    2d84:	2f02           	movel %d2,%sp@-
    2d86:	2f0a           	movel %a2,%sp@-
    2d88:	2f06           	movel %d6,%sp@-
    2d8a:	4880           	extw %d0
    2d8c:	3240           	moveaw %d0,%a1
    2d8e:	2f09           	movel %a1,%sp@-
    2d90:	4e95           	jsr %a5@
        break;
    2d92:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2d96:	2444           	moveal %d4,%a2
  while (*format)
    2d98:	1014           	moveb %a4@,%d0
    2d9a:	6600 fd6a      	bnew 2b06 <_vsnprintf+0x32>
    2d9e:	6000 fd8a      	braw 2b2a <_vsnprintf+0x56>
        format++;
    2da2:	2848           	moveal %a0,%a4
    switch (*format) {
    2da4:	0c00 0078      	cmpib #120,%d0
    2da8:	6ed6           	bgts 2d80 <_vsnprintf+0x2ac>
    2daa:	1a00           	moveb %d0,%d5
    2dac:	0605 ff9c      	addib #-100,%d5
    2db0:	0285 0000 00ff 	andil #255,%d5
    2db6:	7801           	moveq #1,%d4
    2db8:	ebac           	lsll %d5,%d4
    2dba:	0284 0012 0821 	andil #1181729,%d4
    2dc0:	67ae           	beqs 2d70 <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2dc2:	0c00 006f      	cmpib #111,%d0
    2dc6:	6700 025c      	beqw 3024 <_vsnprintf+0x550>
    2dca:	6e00 03f2      	bgtw 31be <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2dce:	78ef           	moveq #-17,%d4
    2dd0:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2dd2:	0c00 0069      	cmpib #105,%d0
    2dd6:	6600 045e      	bnew 3236 <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    2dda:	0801 000a      	btst #10,%d1
    2dde:	6704           	beqs 2de4 <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    2de0:	78ee           	moveq #-18,%d4
    2de2:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    2de4:	0804 0009      	btst #9,%d4
    2de8:	6600 fd3c      	bnew 2b26 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2dec:	2a03           	movel %d3,%d5
    2dee:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2df0:	0804 0008      	btst #8,%d4
    2df4:	6600 0470      	bnew 3266 <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2df8:	0804 0006      	btst #6,%d4
    2dfc:	6600 03e0      	bnew 31de <_vsnprintf+0x70a>
    2e00:	4a04           	tstb %d4
    2e02:	6a00 04ac      	bplw 32b0 <_vsnprintf+0x7dc>
    2e06:	2043           	moveal %d3,%a0
    2e08:	2010           	movel %a0@,%d0
    2e0a:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2e0c:	2f04           	movel %d4,%sp@-
    2e0e:	2f0b           	movel %a3,%sp@-
    2e10:	2f07           	movel %d7,%sp@-
    2e12:	4878 000a      	pea a <DUART_IMR>
    2e16:	2200           	movel %d0,%d1
    2e18:	d281           	addl %d1,%d1
    2e1a:	9381           	subxl %d1,%d1
    2e1c:	4481           	negl %d1
    2e1e:	2f01           	movel %d1,%sp@-
    2e20:	4a80           	tstl %d0
    2e22:	6d00 03dc      	bltw 3200 <_vsnprintf+0x72c>
    2e26:	2f00           	movel %d0,%sp@-
    2e28:	2f02           	movel %d2,%sp@-
    2e2a:	2f0a           	movel %a2,%sp@-
    2e2c:	2f06           	movel %d6,%sp@-
    2e2e:	2f0d           	movel %a5,%sp@-
    2e30:	4eb9 0000 2460 	jsr 2460 <_ntoa_long>
    2e36:	2440           	moveal %d0,%a2
    2e38:	4fef 0028      	lea %sp@(40),%sp
    2e3c:	2605           	movel %d5,%d3
  while (*format)
    2e3e:	1014           	moveb %a4@,%d0
    2e40:	6600 fcc4      	bnew 2b06 <_vsnprintf+0x32>
    2e44:	6000 fce4      	braw 2b2a <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    2e48:	7002           	moveq #2,%d0
    2e4a:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    2e4c:	2a0b           	movel %a3,%d5
    2e4e:	4485           	negl %d5
    2e50:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2e52:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2e56:	2848           	moveal %a0,%a4
    2e58:	5288           	addql #1,%a0
    2e5a:	6000 fd4e      	braw 2baa <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2e5e:	7021           	moveq #33,%d0
    2e60:	8081           	orl %d1,%d0
    2e62:	2f00           	movel %d0,%sp@-
    2e64:	4878 0008      	pea 8 <DUART_ACR>
    2e68:	2f07           	movel %d7,%sp@-
    2e6a:	4878 0010      	pea 10 <DUART_MR1B>
    2e6e:	42a7           	clrl %sp@-
    2e70:	2043           	moveal %d3,%a0
    2e72:	2f18           	movel %a0@+,%sp@-
    2e74:	2608           	movel %a0,%d3
    2e76:	2f02           	movel %d2,%sp@-
    2e78:	2f0a           	movel %a2,%sp@-
    2e7a:	2f06           	movel %d6,%sp@-
    2e7c:	2f0d           	movel %a5,%sp@-
    2e7e:	4eb9 0000 2460 	jsr 2460 <_ntoa_long>
    2e84:	2440           	moveal %d0,%a2
        break;
    2e86:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2e8a:	1014           	moveb %a4@,%d0
    2e8c:	6600 fc78      	bnew 2b06 <_vsnprintf+0x32>
    2e90:	6000 fc98      	braw 2b2a <_vsnprintf+0x56>
        if (*format == 'h') {
    2e94:	102c 0001      	moveb %a4@(1),%d0
    2e98:	0c00 0068      	cmpib #104,%d0
    2e9c:	6700 0232      	beqw 30d0 <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    2ea0:	7a7f           	moveq #127,%d5
    2ea2:	4605           	notb %d5
    2ea4:	8285           	orl %d5,%d1
        format++;
    2ea6:	2844           	moveal %d4,%a4
    2ea8:	528c           	addql #1,%a4
    switch (*format) {
    2eaa:	0c00 0078      	cmpib #120,%d0
    2eae:	6f00 fd3a      	blew 2bea <_vsnprintf+0x116>
    2eb2:	6000 fecc      	braw 2d80 <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    2eb6:	2f43 0030      	movel %d3,%sp@(48)
    2eba:	2243           	moveal %d3,%a1
    2ebc:	58af 0030      	addql #4,%sp@(48)
    2ec0:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2ec2:	2043           	moveal %d3,%a0
    2ec4:	1f50 002f      	moveb %a0@,%sp@(47)
    2ec8:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2ecc:	4a87           	tstl %d7
    2ece:	6700 0118      	beqw 2fe8 <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    2ed2:	4a00           	tstb %d0
    2ed4:	671a           	beqs 2ef0 <_vsnprintf+0x41c>
    2ed6:	2807           	movel %d7,%d4
    2ed8:	5384           	subql #1,%d4
    2eda:	2043           	moveal %d3,%a0
    2edc:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2ee0:	5288           	addql #1,%a0
    2ee2:	4a10           	tstb %a0@
    2ee4:	6700 01e2      	beqw 30c8 <_vsnprintf+0x5f4>
    2ee8:	b1c9           	cmpal %a1,%a0
    2eea:	66f4           	bnes 2ee0 <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    2eec:	2809           	movel %a1,%d4
    2eee:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    2ef0:	2a01           	movel %d1,%d5
    2ef2:	0285 0000 0400 	andil #1024,%d5
    2ef8:	2245           	moveal %d5,%a1
    2efa:	0801 000a      	btst #10,%d1
    2efe:	6706           	beqs 2f06 <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    2f00:	be84           	cmpl %d4,%d7
    2f02:	6402           	bccs 2f06 <_vsnprintf+0x432>
    2f04:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    2f06:	7a02           	moveq #2,%d5
    2f08:	ca81           	andl %d1,%d5
    2f0a:	2f45 0034      	movel %d5,%sp@(52)
    2f0e:	0801 0001      	btst #1,%d1
    2f12:	6700 0258      	beqw 316c <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2f16:	4a2f 002f      	tstb %sp@(47)
    2f1a:	6700 017a      	beqw 3096 <_vsnprintf+0x5c2>
    2f1e:	220a           	movel %a2,%d1
    2f20:	2a09           	movel %a1,%d5
    2f22:	204b           	moveal %a3,%a0
    2f24:	2643           	moveal %d3,%a3
    2f26:	224c           	moveal %a4,%a1
    2f28:	284a           	moveal %a2,%a4
    2f2a:	2447           	moveal %d7,%a2
    2f2c:	2e09           	movel %a1,%d7
    2f2e:	2608           	movel %a0,%d3
    2f30:	4a85           	tstl %d5
    2f32:	670e           	beqs 2f42 <_vsnprintf+0x46e>
    2f34:	41ea ffff      	lea %a2@(-1),%a0
    2f38:	b4fc 0000      	cmpaw #0,%a2
    2f3c:	6700 014c      	beqw 308a <_vsnprintf+0x5b6>
    2f40:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2f42:	528c           	addql #1,%a4
    2f44:	528b           	addql #1,%a3
    2f46:	2f02           	movel %d2,%sp@-
    2f48:	2f01           	movel %d1,%sp@-
    2f4a:	2f06           	movel %d6,%sp@-
    2f4c:	4880           	extw %d0
    2f4e:	3240           	moveaw %d0,%a1
    2f50:	2f09           	movel %a1,%sp@-
    2f52:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2f54:	1013           	moveb %a3@,%d0
    2f56:	4fef 0010      	lea %sp@(16),%sp
    2f5a:	6700 012e      	beqw 308a <_vsnprintf+0x5b6>
    2f5e:	220c           	movel %a4,%d1
    2f60:	60ce           	bras 2f30 <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    2f62:	280a           	movel %a2,%d4
    2f64:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    2f66:	2a03           	movel %d3,%d5
    2f68:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2f6a:	0801 0001      	btst #1,%d1
    2f6e:	6700 01b6      	beqw 3126 <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2f72:	2f02           	movel %d2,%sp@-
    2f74:	2f0a           	movel %a2,%sp@-
    2f76:	2f06           	movel %d6,%sp@-
    2f78:	2043           	moveal %d3,%a0
    2f7a:	2010           	movel %a0@,%d0
    2f7c:	4880           	extw %d0
    2f7e:	3240           	moveaw %d0,%a1
    2f80:	2f09           	movel %a1,%sp@-
    2f82:	4e95           	jsr %a5@
          while (l++ < width) {
    2f84:	4fef 0010      	lea %sp@(16),%sp
    2f88:	d5cb           	addal %a3,%a2
    2f8a:	7001           	moveq #1,%d0
    2f8c:	b08b           	cmpl %a3,%d0
    2f8e:	6400 02ce      	bccw 325e <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    2f92:	2004           	movel %d4,%d0
    2f94:	5284           	addql #1,%d4
    2f96:	2f02           	movel %d2,%sp@-
    2f98:	2f00           	movel %d0,%sp@-
    2f9a:	2f06           	movel %d6,%sp@-
    2f9c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2fa0:	4e95           	jsr %a5@
          while (l++ < width) {
    2fa2:	4fef 0010      	lea %sp@(16),%sp
    2fa6:	b5c4           	cmpal %d4,%a2
    2fa8:	66e8           	bnes 2f92 <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2faa:	2605           	movel %d5,%d3
  while (*format)
    2fac:	1014           	moveb %a4@,%d0
    2fae:	6600 fb56      	bnew 2b06 <_vsnprintf+0x32>
    2fb2:	6000 fb76      	braw 2b2a <_vsnprintf+0x56>
  unsigned int i = 0U;
    2fb6:	7e00           	moveq #0,%d7
    2fb8:	2848           	moveal %a0,%a4
    2fba:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2fbc:	528c           	addql #1,%a4
    2fbe:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    2fc2:	d3c9           	addal %a1,%a1
    2fc4:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    2fc8:	d1c8           	addal %a0,%a0
    2fca:	4880           	extw %d0
    2fcc:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2fd0:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    2fd2:	1800           	moveb %d0,%d4
    2fd4:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2fd8:	0c04 0009      	cmpib #9,%d4
    2fdc:	63de           	blss 2fbc <_vsnprintf+0x4e8>
    2fde:	2e08           	movel %a0,%d7
    2fe0:	41ec 0001      	lea %a4@(1),%a0
    2fe4:	6000 fbce      	braw 2bb4 <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    2fe8:	4a2f 002f      	tstb %sp@(47)
    2fec:	6700 ff02      	beqw 2ef0 <_vsnprintf+0x41c>
    2ff0:	78fe           	moveq #-2,%d4
    2ff2:	2043           	moveal %d3,%a0
    2ff4:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2ff8:	6000 fee6      	braw 2ee0 <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2ffc:	2043           	moveal %d3,%a0
    2ffe:	2e18           	movel %a0@+,%d7
    3000:	2608           	movel %a0,%d3
    3002:	4a87           	tstl %d7
    3004:	6d0e           	blts 3014 <_vsnprintf+0x540>
    switch (*format) {
    3006:	102c 0002      	moveb %a4@(2),%d0
        format++;
    300a:	548c           	addql #2,%a4
    300c:	41ec 0001      	lea %a4@(1),%a0
    3010:	6000 fba2      	braw 2bb4 <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3014:	7e00           	moveq #0,%d7
    switch (*format) {
    3016:	102c 0002      	moveb %a4@(2),%d0
        format++;
    301a:	548c           	addql #2,%a4
    301c:	41ec 0001      	lea %a4@(1),%a0
    3020:	6000 fb92      	braw 2bb4 <_vsnprintf+0xe0>
    switch (*format) {
    3024:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    3028:	0801 000a      	btst #10,%d1
    302c:	6600 00dc      	bnew 310a <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3030:	70f3           	moveq #-13,%d0
    3032:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    3034:	0801 0009      	btst #9,%d1
    3038:	6600 faec      	bnew 2b26 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    303c:	2803           	movel %d3,%d4
    303e:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    3040:	0801 0008      	btst #8,%d1
    3044:	6600 0242      	bnew 3288 <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    3048:	0801 0006      	btst #6,%d1
    304c:	6600 01d0      	bnew 321e <_vsnprintf+0x74a>
    3050:	2243           	moveal %d3,%a1
    3052:	2011           	movel %a1@,%d0
    3054:	4a01           	tstb %d1
    3056:	6a06           	bpls 305e <_vsnprintf+0x58a>
    3058:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    305e:	2f01           	movel %d1,%sp@-
    3060:	2f0b           	movel %a3,%sp@-
    3062:	2f07           	movel %d7,%sp@-
    3064:	2f08           	movel %a0,%sp@-
    3066:	42a7           	clrl %sp@-
    3068:	2f00           	movel %d0,%sp@-
    306a:	2f02           	movel %d2,%sp@-
    306c:	2f0a           	movel %a2,%sp@-
    306e:	2f06           	movel %d6,%sp@-
    3070:	2f0d           	movel %a5,%sp@-
    3072:	4eb9 0000 2460 	jsr 2460 <_ntoa_long>
    3078:	2440           	moveal %d0,%a2
    307a:	4fef 0028      	lea %sp@(40),%sp
    307e:	2604           	movel %d4,%d3
  while (*format)
    3080:	1014           	moveb %a4@,%d0
    3082:	6600 fa82      	bnew 2b06 <_vsnprintf+0x32>
    3086:	6000 faa2      	braw 2b2a <_vsnprintf+0x56>
    308a:	2643           	moveal %d3,%a3
    308c:	244c           	moveal %a4,%a2
    308e:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    3090:	4aaf 0034      	tstl %sp@(52)
    3094:	6724           	beqs 30ba <_vsnprintf+0x5e6>
    3096:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    3098:	b88b           	cmpl %a3,%d4
    309a:	641e           	bccs 30ba <_vsnprintf+0x5e6>
    309c:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    30a0:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    30a2:	2005           	movel %d5,%d0
    30a4:	5285           	addql #1,%d5
    30a6:	2f02           	movel %d2,%sp@-
    30a8:	2f00           	movel %d0,%sp@-
    30aa:	2f06           	movel %d6,%sp@-
    30ac:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    30b0:	4e95           	jsr %a5@
          while (l++ < width) {
    30b2:	4fef 0010      	lea %sp@(16),%sp
    30b6:	ba8a           	cmpl %a2,%d5
    30b8:	66e8           	bnes 30a2 <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    30ba:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    30be:	1014           	moveb %a4@,%d0
    30c0:	6600 fa44      	bnew 2b06 <_vsnprintf+0x32>
    30c4:	6000 fa64      	braw 2b2a <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    30c8:	2808           	movel %a0,%d4
    30ca:	9883           	subl %d3,%d4
    30cc:	6000 fe22      	braw 2ef0 <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    30d0:	703f           	moveq #63,%d0
    30d2:	4600           	notb %d0
    30d4:	8280           	orl %d0,%d1
          format++;
    30d6:	280c           	movel %a4,%d4
    30d8:	5484           	addql #2,%d4
    switch (*format) {
    30da:	102c 0002      	moveb %a4@(2),%d0
        format++;
    30de:	2844           	moveal %d4,%a4
    30e0:	528c           	addql #1,%a4
    switch (*format) {
    30e2:	0c00 0078      	cmpib #120,%d0
    30e6:	6f00 fb02      	blew 2bea <_vsnprintf+0x116>
    30ea:	6000 fc94      	braw 2d80 <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    30ee:	0041 0300      	oriw #768,%d1
          format++;
    30f2:	280c           	movel %a4,%d4
    30f4:	5484           	addql #2,%d4
    switch (*format) {
    30f6:	102c 0002      	moveb %a4@(2),%d0
        format++;
    30fa:	2844           	moveal %d4,%a4
    30fc:	528c           	addql #1,%a4
    switch (*format) {
    30fe:	0c00 0078      	cmpib #120,%d0
    3102:	6f00 fae6      	blew 2bea <_vsnprintf+0x116>
    3106:	6000 fc78      	braw 2d80 <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    310a:	70f2           	moveq #-14,%d0
    310c:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    310e:	6000 ff24      	braw 3034 <_vsnprintf+0x560>
    switch (*format) {
    3112:	0c00 0058      	cmpib #88,%d0
    3116:	6600 fc68      	bnew 2d80 <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    311a:	7a20           	moveq #32,%d5
    311c:	8285           	orl %d5,%d1
    311e:	307c 0010      	moveaw #16,%a0
    3122:	6000 ff04      	braw 3028 <_vsnprintf+0x554>
          while (l++ < width) {
    3126:	7001           	moveq #1,%d0
    3128:	b08b           	cmpl %a3,%d0
    312a:	6400 011c      	bccw 3248 <_vsnprintf+0x774>
    312e:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    3132:	2e08           	movel %a0,%d7
    3134:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    3136:	2004           	movel %d4,%d0
    3138:	5284           	addql #1,%d4
    313a:	2f02           	movel %d2,%sp@-
    313c:	2f00           	movel %d0,%sp@-
    313e:	2f06           	movel %d6,%sp@-
    3140:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3144:	4e95           	jsr %a5@
          while (l++ < width) {
    3146:	4fef 0010      	lea %sp@(16),%sp
    314a:	b887           	cmpl %d7,%d4
    314c:	66e8           	bnes 3136 <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    314e:	d5cb           	addal %a3,%a2
    3150:	2f02           	movel %d2,%sp@-
    3152:	2f07           	movel %d7,%sp@-
    3154:	2f06           	movel %d6,%sp@-
    3156:	2243           	moveal %d3,%a1
    3158:	2011           	movel %a1@,%d0
    315a:	4880           	extw %d0
    315c:	3040           	moveaw %d0,%a0
    315e:	2f08           	movel %a0,%sp@-
    3160:	4e95           	jsr %a5@
    3162:	4fef 0010      	lea %sp@(16),%sp
    3166:	2605           	movel %d5,%d3
    3168:	6000 fe42      	braw 2fac <_vsnprintf+0x4d8>
          while (l++ < width) {
    316c:	b88b           	cmpl %a3,%d4
    316e:	6400 0162      	bccw 32d2 <_vsnprintf+0x7fe>
    3172:	200b           	movel %a3,%d0
    3174:	d08a           	addl %a2,%d0
    3176:	9084           	subl %d4,%d0
    3178:	2800           	movel %d0,%d4
    317a:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    317c:	200a           	movel %a2,%d0
    317e:	528a           	addql #1,%a2
    3180:	2f02           	movel %d2,%sp@-
    3182:	2f00           	movel %d0,%sp@-
    3184:	2f06           	movel %d6,%sp@-
    3186:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    318a:	4e95           	jsr %a5@
          while (l++ < width) {
    318c:	4fef 0010      	lea %sp@(16),%sp
    3190:	b5c4           	cmpal %d4,%a2
    3192:	66e8           	bnes 317c <_vsnprintf+0x6a8>
    3194:	2245           	moveal %d5,%a1
    3196:	280b           	movel %a3,%d4
    3198:	5284           	addql #1,%d4
    319a:	2043           	moveal %d3,%a0
    319c:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    31a0:	102f 002f      	moveb %sp@(47),%d0
    31a4:	6700 ff14      	beqw 30ba <_vsnprintf+0x5e6>
    31a8:	220a           	movel %a2,%d1
    31aa:	2a09           	movel %a1,%d5
    31ac:	204b           	moveal %a3,%a0
    31ae:	2643           	moveal %d3,%a3
    31b0:	224c           	moveal %a4,%a1
    31b2:	284a           	moveal %a2,%a4
    31b4:	2447           	moveal %d7,%a2
    31b6:	2e09           	movel %a1,%d7
    31b8:	2608           	movel %a0,%d3
    31ba:	6000 fd74      	braw 2f30 <_vsnprintf+0x45c>
    switch (*format) {
    31be:	307c 0010      	moveaw #16,%a0
    31c2:	0c00 0078      	cmpib #120,%d0
    31c6:	6700 fe60      	beqw 3028 <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    31ca:	70ef           	moveq #-17,%d0
    31cc:	c280           	andl %d0,%d1
    31ce:	307c 000a      	moveaw #10,%a0
    31d2:	6000 fe54      	braw 3028 <_vsnprintf+0x554>
    switch (*format) {
    31d6:	307c 0002      	moveaw #2,%a0
    31da:	6000 fe4c      	braw 3028 <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    31de:	2243           	moveal %d3,%a1
    31e0:	2011           	movel %a1@,%d0
    31e2:	4880           	extw %d0
    31e4:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    31e6:	2f04           	movel %d4,%sp@-
    31e8:	2f0b           	movel %a3,%sp@-
    31ea:	2f07           	movel %d7,%sp@-
    31ec:	4878 000a      	pea a <DUART_IMR>
    31f0:	2200           	movel %d0,%d1
    31f2:	d281           	addl %d1,%d1
    31f4:	9381           	subxl %d1,%d1
    31f6:	4481           	negl %d1
    31f8:	2f01           	movel %d1,%sp@-
    31fa:	4a80           	tstl %d0
    31fc:	6c00 fc28      	bgew 2e26 <_vsnprintf+0x352>
    3200:	4480           	negl %d0
    3202:	2f00           	movel %d0,%sp@-
    3204:	2f02           	movel %d2,%sp@-
    3206:	2f0a           	movel %a2,%sp@-
    3208:	2f06           	movel %d6,%sp@-
    320a:	2f0d           	movel %a5,%sp@-
    320c:	4eb9 0000 2460 	jsr 2460 <_ntoa_long>
    3212:	2440           	moveal %d0,%a2
    3214:	4fef 0028      	lea %sp@(40),%sp
    3218:	2605           	movel %d5,%d3
    321a:	6000 fc22      	braw 2e3e <_vsnprintf+0x36a>
    321e:	7000           	moveq #0,%d0
    3220:	4600           	notb %d0
    3222:	2243           	moveal %d3,%a1
    3224:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3226:	2f01           	movel %d1,%sp@-
    3228:	2f0b           	movel %a3,%sp@-
    322a:	2f07           	movel %d7,%sp@-
    322c:	2f08           	movel %a0,%sp@-
    322e:	42a7           	clrl %sp@-
    3230:	2f00           	movel %d0,%sp@-
    3232:	6000 fe36      	braw 306a <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    3236:	0c00 0064      	cmpib #100,%d0
    323a:	6700 fb9e      	beqw 2dda <_vsnprintf+0x306>
    323e:	2204           	movel %d4,%d1
    3240:	307c 000a      	moveaw #10,%a0
    3244:	6000 fde2      	braw 3028 <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3248:	2f02           	movel %d2,%sp@-
    324a:	2f0a           	movel %a2,%sp@-
    324c:	2f06           	movel %d6,%sp@-
    324e:	2043           	moveal %d3,%a0
    3250:	2010           	movel %a0@,%d0
    3252:	4880           	extw %d0
    3254:	3240           	moveaw %d0,%a1
    3256:	2f09           	movel %a1,%sp@-
    3258:	4e95           	jsr %a5@
    325a:	4fef 0010      	lea %sp@(16),%sp
    325e:	2444           	moveal %d4,%a2
    3260:	2605           	movel %d5,%d3
    3262:	6000 fd48      	braw 2fac <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    3266:	2043           	moveal %d3,%a0
    3268:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    326a:	2f04           	movel %d4,%sp@-
    326c:	2f0b           	movel %a3,%sp@-
    326e:	2f07           	movel %d7,%sp@-
    3270:	4878 000a      	pea a <DUART_IMR>
    3274:	2200           	movel %d0,%d1
    3276:	d281           	addl %d1,%d1
    3278:	9381           	subxl %d1,%d1
    327a:	4481           	negl %d1
    327c:	2f01           	movel %d1,%sp@-
    327e:	4a80           	tstl %d0
    3280:	6c00 fba4      	bgew 2e26 <_vsnprintf+0x352>
    3284:	6000 ff7a      	braw 3200 <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    3288:	2f01           	movel %d1,%sp@-
    328a:	2f0b           	movel %a3,%sp@-
    328c:	2f07           	movel %d7,%sp@-
    328e:	2f08           	movel %a0,%sp@-
    3290:	42a7           	clrl %sp@-
    3292:	2043           	moveal %d3,%a0
    3294:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3296:	2f02           	movel %d2,%sp@-
    3298:	2f0a           	movel %a2,%sp@-
    329a:	2f06           	movel %d6,%sp@-
    329c:	2f0d           	movel %a5,%sp@-
    329e:	4eb9 0000 2460 	jsr 2460 <_ntoa_long>
    32a4:	2440           	moveal %d0,%a2
    32a6:	4fef 0028      	lea %sp@(40),%sp
    32aa:	2604           	movel %d4,%d3
        break;
    32ac:	6000 fdd2      	braw 3080 <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    32b0:	2243           	moveal %d3,%a1
    32b2:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    32b4:	2f04           	movel %d4,%sp@-
    32b6:	2f0b           	movel %a3,%sp@-
    32b8:	2f07           	movel %d7,%sp@-
    32ba:	4878 000a      	pea a <DUART_IMR>
    32be:	2200           	movel %d0,%d1
    32c0:	d281           	addl %d1,%d1
    32c2:	9381           	subxl %d1,%d1
    32c4:	4481           	negl %d1
    32c6:	2f01           	movel %d1,%sp@-
    32c8:	4a80           	tstl %d0
    32ca:	6c00 fb5a      	bgew 2e26 <_vsnprintf+0x352>
    32ce:	6000 ff30      	braw 3200 <_vsnprintf+0x72c>
          while (l++ < width) {
    32d2:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    32d4:	102f 002f      	moveb %sp@(47),%d0
    32d8:	6600 fece      	bnew 31a8 <_vsnprintf+0x6d4>
    32dc:	6000 fddc      	braw 30ba <_vsnprintf+0x5e6>

000032e0 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    32e0:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    32e4:	486e 000c      	pea %fp@(12)
    32e8:	2f2e 0008      	movel %fp@(8),%sp@-
    32ec:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    32f0:	486e ffff      	pea %fp@(-1)
    32f4:	4879 0000 2abc 	pea 2abc <_out_char>
    32fa:	4eb9 0000 2ad4 	jsr 2ad4 <_vsnprintf>
  va_end(va);
  return ret;
    3300:	4fef 0014      	lea %sp@(20),%sp
}
    3304:	4e5e           	unlk %fp
    3306:	4e75           	rts

00003308 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3308:	2f02           	movel %d2,%sp@-
    330a:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    330e:	0c02 000a      	cmpib #10,%d2
    3312:	6714           	beqs 3328 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    3314:	41f9 0000 3694 	lea 3694 <buf>,%a0
    331a:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    331c:	2f48 0008      	movel %a0,%sp@(8)
}
    3320:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3322:	4ef9 0000 334a 	jmp 334a <mcPrint>
    mcPrint(crbuf);
    3328:	4879 0000 3684 	pea 3684 <crbuf>
    332e:	4eb9 0000 334a 	jsr 334a <mcPrint>
    3334:	588f           	addql #4,%sp
  buf[0] = chr;
    3336:	41f9 0000 3694 	lea 3694 <buf>,%a0
    333c:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    333e:	2f48 0008      	movel %a0,%sp@(8)
}
    3342:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3344:	4ef9 0000 334a 	jmp 334a <mcPrint>

0000334a <mcPrint>:
    334a:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    334e:	206f 0010      	moveal %sp@(16),%a0
    3352:	7200           	moveq #0,%d1
    3354:	4e4e           	trap #14
    3356:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    335a:	4e75           	rts

0000335c <mcInputchar>:
    335c:	2f01           	movel %d1,%sp@-
    335e:	7211           	moveq #17,%d1
    3360:	4e4e           	trap #14
    3362:	221f           	movel %sp@+,%d1
    3364:	4e75           	rts

00003366 <mcCheckInput>:
    3366:	2f01           	movel %d1,%sp@-
    3368:	7212           	moveq #18,%d1
    336a:	4e4e           	trap #14
    336c:	4880           	extw %d0
    336e:	48c0           	extl %d0
    3370:	221f           	movel %sp@+,%d1
    3372:	4e75           	rts

00003374 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    3374:	41f9 0000 3688 	lea 3688 <lfsr_val>,%a0
    337a:	b1fc 0000 6ea8 	cmpal #28328,%a0
    3380:	641c           	bccs 339e <__kinit+0x2a>
    3382:	203c 0000 6ea8 	movel #28328,%d0
    3388:	0480 0000 3689 	subil #13961,%d0
    338e:	72fc           	moveq #-4,%d1
    3390:	c081           	andl %d1,%d0
    3392:	0680 0000 368c 	addil #13964,%d0
    3398:	4298           	clrl %a0@+
    339a:	b088           	cmpl %a0,%d0
    339c:	66fa           	bnes 3398 <__kinit+0x24>
}
    339e:	4e75           	rts

000033a0 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    33a0:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    33a4:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    33a8:	7200           	moveq #0,%d1
    33aa:	3239 0000 36a4 	movew 36a4 <cxa_atexit_count>,%d1
    33b0:	2401           	movel %d1,%d2
    33b2:	5382           	subql #1,%d2
    33b4:	4a81           	tstl %d1
    33b6:	6738           	beqs 33f0 <__cxa_finalize+0x50>
    33b8:	2001           	movel %d1,%d0
    33ba:	e788           	lsll #3,%d0
    33bc:	2440           	moveal %d0,%a2
    33be:	95c1           	subal %d1,%a2
    33c0:	d5ca           	addal %a2,%a2
    33c2:	d5fc 0000 3698 	addal #13976,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    33c8:	4a83           	tstl %d3
    33ca:	662a           	bnes 33f6 <__cxa_finalize+0x56>
    33cc:	4a2a 000c      	tstb %a2@(12)
    33d0:	6610           	bnes 33e2 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    33d2:	2f2a 0004      	movel %a2@(4),%sp@-
    33d6:	2052           	moveal %a2@,%a0
    33d8:	4e90           	jsr %a0@
            entry->done = true;
    33da:	157c 0001 000c 	moveb #1,%a2@(12)
    33e0:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    33e2:	45ea fff2      	lea %a2@(-14),%a2
    33e6:	51ca ffe0      	dbf %d2,33c8 <__cxa_finalize+0x28>
    33ea:	4242           	clrw %d2
    33ec:	5382           	subql #1,%d2
    33ee:	64d8           	bccs 33c8 <__cxa_finalize+0x28>
        }
    }
}
    33f0:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    33f4:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    33f6:	b6aa 0008      	cmpl %a2@(8),%d3
    33fa:	67d0           	beqs 33cc <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    33fc:	45ea fff2      	lea %a2@(-14),%a2
    3400:	51ca fff4      	dbf %d2,33f6 <__cxa_finalize+0x56>
    3404:	4242           	clrw %d2
    3406:	5382           	subql #1,%d2
    3408:	64ec           	bccs 33f6 <__cxa_finalize+0x56>
}
    340a:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    340e:	4e75           	rts

00003410 <__udivsi3>:
    3410:	2f02           	movel %d2,%sp@-
    3412:	222f 000c      	movel %sp@(12),%d1
    3416:	202f 0008      	movel %sp@(8),%d0
    341a:	0c81 0001 0000 	cmpil #65536,%d1
    3420:	6416           	bccs 3438 <L3>
    3422:	2400           	movel %d0,%d2
    3424:	4242           	clrw %d2
    3426:	4842           	swap %d2
    3428:	84c1           	divuw %d1,%d2
    342a:	3002           	movew %d2,%d0
    342c:	4840           	swap %d0
    342e:	342f 000a      	movew %sp@(10),%d2
    3432:	84c1           	divuw %d1,%d2
    3434:	3002           	movew %d2,%d0
    3436:	6030           	bras 3468 <L6>

00003438 <L3>:
    3438:	2401           	movel %d1,%d2

0000343a <L4>:
    343a:	e289           	lsrl #1,%d1
    343c:	e288           	lsrl #1,%d0
    343e:	0c81 0001 0000 	cmpil #65536,%d1
    3444:	64f4           	bccs 343a <L4>
    3446:	80c1           	divuw %d1,%d0
    3448:	0280 0000 ffff 	andil #65535,%d0
    344e:	2202           	movel %d2,%d1
    3450:	c2c0           	muluw %d0,%d1
    3452:	4842           	swap %d2
    3454:	c4c0           	muluw %d0,%d2
    3456:	4842           	swap %d2
    3458:	4a42           	tstw %d2
    345a:	660a           	bnes 3466 <L5>
    345c:	d282           	addl %d2,%d1
    345e:	6506           	bcss 3466 <L5>
    3460:	b2af 0008      	cmpl %sp@(8),%d1
    3464:	6302           	blss 3468 <L6>

00003466 <L5>:
    3466:	5380           	subql #1,%d0

00003468 <L6>:
    3468:	241f           	movel %sp@+,%d2
    346a:	4e75           	rts

0000346c <__umodsi3>:
    346c:	222f 0008      	movel %sp@(8),%d1
    3470:	202f 0004      	movel %sp@(4),%d0
    3474:	2f01           	movel %d1,%sp@-
    3476:	2f00           	movel %d0,%sp@-
    3478:	4eb9 0000 3410 	jsr 3410 <__udivsi3>
    347e:	508f           	addql #8,%sp
    3480:	222f 0008      	movel %sp@(8),%d1
    3484:	2f01           	movel %d1,%sp@-
    3486:	2f00           	movel %d0,%sp@-
    3488:	4eb9 0000 349c 	jsr 349c <__mulsi3>
    348e:	508f           	addql #8,%sp
    3490:	222f 0004      	movel %sp@(4),%d1
    3494:	9280           	subl %d0,%d1
    3496:	2001           	movel %d1,%d0
    3498:	4e75           	rts
	...

0000349c <__mulsi3>:
    349c:	302f 0004      	movew %sp@(4),%d0
    34a0:	c0ef 000a      	muluw %sp@(10),%d0
    34a4:	322f 0006      	movew %sp@(6),%d1
    34a8:	c2ef 0008      	muluw %sp@(8),%d1
    34ac:	d041           	addw %d1,%d0
    34ae:	4840           	swap %d0
    34b0:	4240           	clrw %d0
    34b2:	322f 0006      	movew %sp@(6),%d1
    34b6:	c2ef 000a      	muluw %sp@(10),%d1
    34ba:	d081           	addl %d1,%d0
    34bc:	4e75           	rts
    34be:	5b42           	subqw #5,%d2
    34c0:	4144           	.short 0x4144
    34c2:	5d00           	subqb #6,%d0
    34c4:	5b4f           	subqw #5,%sp
    34c6:	4b5d           	.short 0x4b5d
    34c8:	0043 6f6e      	oriw #28526,%d3
    34cc:	7469           	moveq #105,%d2
    34ce:	6e75           	bgts 3545 <__mulsi3+0xa9>
    34d0:	6f75           	bles 3547 <__mulsi3+0xab>
    34d2:	7320           	.short 0x7320
    34d4:	7465           	moveq #101,%d2
    34d6:	7374           	.short 0x7374
    34d8:	696e           	bvss 3548 <__mulsi3+0xac>
    34da:	6720           	beqs 34fc <__mulsi3+0x60>
    34dc:	6672           	bnes 3550 <__mulsi3+0xb4>
    34de:	6f6d           	bles 354d <__mulsi3+0xb1>
    34e0:	2030 7825      	movel %a0@(25,%d7:l),%d0
    34e4:	3036 7820      	movew %fp@(20,%d7:l),%d0
    34e8:	746f           	moveq #111,%d2
    34ea:	2030 7825      	movel %a0@(25,%d7:l),%d0
    34ee:	3036 7820      	movew %fp@(20,%d7:l),%d0
    34f2:	2870 7265      	moveal %a0@(65,%d7:w:2),%a4
    34f6:	7373           	.short 0x7373
    34f8:	2061           	moveal %a1@-,%a0
    34fa:	206b 6579      	moveal %a3@(25977),%a0
    34fe:	2074 6f20 6578 	moveal %a4@(6578,%d6:l:8),%a0
    3504:	6974           	bvss 357a <__mulsi3+0xde>
    3506:	290a           	movel %a2,%a4@-
    3508:	000d           	.short 0x000d
    350a:	2575 3a25 3032 	movel %a5@(25,%d3:l:2),%a2@(12338)
    3510:	7520           	.short 0x7520
    3512:	2573 2050 6173 	movel %a3@(50,%d2:w),%a2@(24947)
    3518:	7320           	.short 0x7320
    351a:	2325           	movel %a5@-,%a1@-
    351c:	6420           	bccs 353e <__mulsi3+0xa2>
    351e:	2d20           	movel %a0@-,%fp@-
    3520:	4669 6c6c      	notw %a1@(27756)
    3524:	696e           	bvss 3594 <__mulsi3+0xf8>
    3526:	6720           	beqs 3548 <__mulsi3+0xac>
    3528:	776f           	.short 0x776f
    352a:	7264           	moveq #100,%d1
    352c:	7320           	.short 0x7320
    352e:	4020           	negxb %a0@-
    3530:	3078 2530      	moveaw 2530 <_ntoa_long+0xd0>,%a0
    3534:	3678 2028      	moveaw 2028 <_postinit+0x4>,%a3
    3538:	4c46           	.short 0x4c46
    353a:	5352           	subqw #1,%a2@
    353c:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3540:	3034 7829      	movew %a4@(29,%d7:l),%d0
    3544:	2e2e 2e20      	movel %fp@(11808),%d7
    3548:	2020           	movel %a0@-,%d0
    354a:	2000           	movel %d0,%d0
    354c:	0d25           	btst %d6,%a5@-
    354e:	753a           	.short 0x753a
    3550:	2530 3275      	movel %a0@(75,%d3:w:2),%a2@-
    3554:	2025           	movel %a5@-,%d0
    3556:	7320           	.short 0x7320
    3558:	5061           	addqw #8,%a1@-
    355a:	7373           	.short 0x7373
    355c:	2023           	movel %a3@-,%d0
    355e:	2564 202d      	movel %a4@-,%a2@(8237)
    3562:	2056           	moveal %fp@,%a0
    3564:	6572           	bcss 35d8 <__mulsi3+0x13c>
    3566:	6966           	bvss 35ce <__mulsi3+0x132>
    3568:	7969           	.short 0x7969
    356a:	6e67           	bgts 35d3 <__mulsi3+0x137>
    356c:	2077 6f72 6473 	moveal %sp@(64732040)@(2030),%a0
    3572:	2040 2030 
    3576:	7825           	moveq #37,%d4
    3578:	3036 7820      	movew %fp@(20,%d7:l),%d0
    357c:	284c           	moveal %a4,%a4
    357e:	4653           	notw %a3@
    3580:	5220           	addqb #1,%a0@-
    3582:	3078 2530      	moveaw 2530 <_ntoa_long+0xd0>,%a0
    3586:	3478 292e      	moveaw 292e <_ntoa_long+0x4ce>,%a2
    358a:	2e2e 000d      	movel %fp@(13),%d7
    358e:	203e           	.short 0x203e
    3590:	2045           	moveal %d5,%a0
    3592:	7272           	moveq #114,%d1
    3594:	2025           	movel %a5@-,%d0
    3596:	642c           	bccs 35c4 <__mulsi3+0x128>
    3598:	2070 6173 7320 	moveal %a0@(73202564)@(2c203078),%a0
    359e:	2564 2c20 3078 
    35a4:	2530 3678      	movel %a0@(78,%d3:w:8),%a2@-
    35a8:	3d30 7825      	movew %a0@(25,%d7:l),%fp@-
    35ac:	3034 7820      	movew %a4@(20,%d7:l),%d0
    35b0:	7673           	moveq #115,%d3
    35b2:	2030 7825      	movel %a0@(25,%d7:l),%d0
    35b6:	3034 7820      	movew %a4@(20,%d7:l),%d0
    35ba:	6578           	bcss 3634 <__mulsi3+0x198>
    35bc:	7065           	moveq #101,%d0
    35be:	6374           	blss 3634 <__mulsi3+0x198>
    35c0:	6564           	bcss 3626 <__mulsi3+0x18a>
    35c2:	2020           	movel %a0@-,%d0
    35c4:	2020           	movel %a0@-,%d0
    35c6:	2020           	movel %a0@-,%d0
    35c8:	2020           	movel %a0@-,%d0
    35ca:	2020           	movel %a0@-,%d0
    35cc:	2020           	movel %a0@-,%d0
    35ce:	2020           	movel %a0@-,%d0
    35d0:	2020           	movel %a0@-,%d0
    35d2:	200a           	movel %a2,%d0
    35d4:	000a           	.short 0x000a
    35d6:	0a54 6573      	eoriw #25971,%a4@
    35da:	7469           	moveq #105,%d2
    35dc:	6e67           	bgts 3645 <__mulsi3+0x1a9>
    35de:	2066           	moveal %fp@-,%a0
    35e0:	6f72           	bles 3654 <__mulsi3+0x1b8>
    35e2:	2025           	movel %a5@-,%d0
    35e4:	753a           	.short 0x753a
    35e6:	2530 3275      	movel %a0@(75,%d3:w:2),%a2@-
    35ea:	2c20           	movel %a0@-,%d6
    35ec:	6d65           	blts 3653 <__mulsi3+0x1b7>
    35ee:	6d63           	blts 3653 <__mulsi3+0x1b7>
    35f0:	6865           	bvcs 3657 <__mulsi3+0x1bb>
    35f2:	636b           	blss 365f <__mulsi3+0x1c3>
    35f4:	2065           	moveal %a5@-,%a0
    35f6:	7869           	moveq #105,%d4
    35f8:	7469           	moveq #105,%d2
    35fa:	6e67           	bgts 3663 <__mulsi3+0x1c7>
    35fc:	2e2e 2e0a      	movel %fp@(11786),%d7
    3600:	0046 4149      	oriw #16713,%d6
    3604:	4c45           	.short 0x4c45
    3606:	4421           	negb %a1@-
    3608:	2025           	movel %a5@-,%d0
    360a:	6420           	bccs 362c <__mulsi3+0x190>
    360c:	6661           	bnes 366f <__mulsi3+0x1d3>
    360e:	696c           	bvss 367c <__mulsi3+0x1e0>
    3610:	6564           	bcss 3676 <__mulsi3+0x1da>
    3612:	2070 6173 7365 	moveal %a0@(7365732c)@(20256420),%a0
    3618:	732c 2025 6420 
    361e:	676f           	beqs 368f <start_state+0x3>
    3620:	6f64           	bles 3686 <crbuf+0x2>
    3622:	2028 2564      	movel %a0@(9572),%d0
    3626:	2077 6f72 6420 	moveal %sp@(64206572)@(726f),%a0
    362c:	6572 726f 
    3630:	7273           	moveq #115,%d1
    3632:	2074 6f74 616c 	moveal %a4@(616c292e)@(0),%a0
    3638:	292e 
    363a:	0050 4153      	oriw #16723,%a0@
    363e:	5345           	subqw #1,%d5
    3640:	4421           	negb %a1@-
    3642:	2025           	movel %a5@-,%d0
    3644:	6420           	bccs 3666 <__mulsi3+0x1ca>
    3646:	6572           	bcss 36ba <cxa_atexits+0x14>
    3648:	726f           	moveq #111,%d1
    364a:	722d           	moveq #45,%d1
    364c:	6672           	bnes 36c0 <cxa_atexits+0x1a>
    364e:	6565           	bcss 36b5 <cxa_atexits+0xf>
    3650:	2074 6573 7420 	moveal %a4@(74207061)@(73736573),%a0
    3656:	7061 7373 6573 
    365c:	2e00           	movel %d0,%d7
    365e:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    3662:	3337 6d58      	movew %sp@(0),%a1@-
    3666:	6f73           	bles 36db <cxa_atexits+0x35>
    3668:	6552           	bcss 36bc <cxa_atexits+0x16>
    366a:	414d           	.short 0x414d
    366c:	201b           	movel %a3@+,%d0
    366e:	5b30 6d62 7269 	subqb #5,%a0@(7269)@(6e67)
    3674:	6e67 
    3676:	7570           	.short 0x7570
    3678:	