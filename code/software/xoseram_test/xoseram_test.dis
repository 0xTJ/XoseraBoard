
xoseram_test.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3a58 	movel #14936,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3a70 <SAVE_PROG_EXIT>
    2048:	3a70 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 35e4 	lea 35e4 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 267c 	lea 267c <kmain>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3a70 	movel 3a70 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 3610 	lea 3610 <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3a50 	lea 3a50 <salt.0>,%a2
    208a:	47f9 0000 3a50 	lea 3a50 <salt.0>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3a50 	lea 3a50 <salt.0>,%a2
    20ac:	47f9 0000 3a50 	lea 3a50 <salt.0>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <each_megabyte_test>:
#define TEST_BANK
#define TEST_LFSR

//#define SILENCE_ERRORS

void each_megabyte_test() {
    20c4:	48e7 3e30      	moveml %d2-%d6/%a2-%a3,%sp@-
    volatile uint8_t *ptr;
    int delay = 3;

    uint8_t value = 0;

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    20c8:	7c10           	moveq #16,%d6
    20ca:	4846           	swap %d6
    uint8_t value = 0;
    20cc:	4205           	clrb %d5
    int delay = 3;
    20ce:	7403           	moveq #3,%d2
    20d0:	45f9 0000 3540 	lea 3540 <printf_>,%a2
    20d6:	47f9 0000 35bc 	lea 35bc <mcDelaymsec10>,%a3
        printf("\n\x1b[1;37mR/W test at base address 0x%08x\n", addr);
    20dc:	2f06           	movel %d6,%sp@-
    20de:	4879 0000 372e 	pea 372e <__mulsi3+0x22>
    20e4:	4e92           	jsr %a2@
    20e6:	508f           	addql #8,%sp
        ptr = (uint8_t*)addr;

        for (int i = 0; i < RUN_SIZE; i++) {
    20e8:	7600           	moveq #0,%d3
    20ea:	2043           	moveal %d3,%a0
    20ec:	d1c6           	addal %d6,%a0
#ifdef ONLY_HIGH8
            if ((i & 0x0f) < 8) {
                *ptr++ = 0;
            } else {
#endif
                *ptr = value;
    20ee:	1085           	moveb %d5,%a0@
                uint8_t check = *ptr;
    20f0:	1010           	moveb %a0@,%d0
                if (check != value) {
    20f2:	ba00           	cmpb %d0,%d5
    20f4:	6720           	beqs 2116 <each_megabyte_test+0x52>
                    printf("\x1b[1;31m0x%02x write is bad: 0x%02x [LATEST VALUE 0x%02x]\x1b[0m\n", i, check, *ptr);
    20f6:	1210           	moveb %a0@,%d1
    20f8:	0281 0000 00ff 	andil #255,%d1
    20fe:	2f01           	movel %d1,%sp@-
    2100:	0280 0000 00ff 	andil #255,%d0
    2106:	2f00           	movel %d0,%sp@-
    2108:	2f03           	movel %d3,%sp@-
    210a:	4879 0000 3757 	pea 3757 <__mulsi3+0x4b>
    2110:	4e92           	jsr %a2@
    2112:	4fef 0010      	lea %sp@(16),%sp
                }
                ptr++;
                delay ^= 1;
    2116:	0a42 0001      	eoriw #1,%d2
                mcDelaymsec10(delay);
    211a:	2f02           	movel %d2,%sp@-
    211c:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    211e:	5283           	addql #1,%d3
    2120:	588f           	addql #4,%sp
    2122:	0c83 0000 0100 	cmpil #256,%d3
    2128:	66c0           	bnes 20ea <each_megabyte_test+0x26>
#ifdef ONLY_HIGH8
            }
#endif
        }

        mcDelaymsec10(200);
    212a:	4878 00c8      	pea c8 <R_STOPCNTCMD+0xaa>
    212e:	4e93           	jsr %a3@
    2130:	588f           	addql #4,%sp

        ptr = (uint8_t*)addr;

        for (int i = 0; i < RUN_SIZE; i++) {
    2132:	7600           	moveq #0,%d3
    2134:	2043           	moveal %d3,%a0
    2136:	d1c6           	addal %d6,%a0
            uint8_t val = *ptr++;
    2138:	1810           	moveb %a0@,%d4

            if (val == value) {
    213a:	ba04           	cmpb %d4,%d5
    213c:	6700 0084      	beqw 21c2 <each_megabyte_test+0xfe>
                printf("\x1b[1;32m");
            } else {
                printf("\x1b[1;31m");
    2140:	4879 0000 379d 	pea 379d <__mulsi3+0x91>
    2146:	4e92           	jsr %a2@
    2148:	588f           	addql #4,%sp
            }

            printf("0x%02x", val);
    214a:	0284 0000 00ff 	andil #255,%d4
    2150:	2f04           	movel %d4,%sp@-
    2152:	4879 0000 37a5 	pea 37a5 <__mulsi3+0x99>
    2158:	4e92           	jsr %a2@

            if ((i + 1) % 16 == 0) {
    215a:	5283           	addql #1,%d3
    215c:	700f           	moveq #15,%d0
    215e:	c083           	andl %d3,%d0
    2160:	508f           	addql #8,%sp
    2162:	663e           	bnes 21a2 <each_megabyte_test+0xde>
                printf("\n");
    2164:	4879 0000 399b 	pea 399b <__mulsi3+0x28f>
    216a:	4e92           	jsr %a2@
    216c:	588f           	addql #4,%sp
            } else {
                printf("  ");
            }

            delay ^= 1;
    216e:	0a42 0001      	eoriw #1,%d2
            mcDelaymsec10(delay);
    2172:	2f02           	movel %d2,%sp@-
    2174:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    2176:	588f           	addql #4,%sp
    2178:	0c83 0000 0100 	cmpil #256,%d3
    217e:	66b4           	bnes 2134 <each_megabyte_test+0x70>
        }

        printf("\x1b[0m\n");
    2180:	4879 0000 378f 	pea 378f <__mulsi3+0x83>
    2186:	4e92           	jsr %a2@

        value++;
    2188:	5205           	addqb #1,%d5
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    218a:	0686 0010 0000 	addil #1048576,%d6
    2190:	588f           	addql #4,%sp
    2192:	0c86 00e0 0000 	cmpil #14680064,%d6
    2198:	6600 ff42      	bnew 20dc <each_megabyte_test+0x18>
    }
}
    219c:	4cdf 0c7c      	moveml %sp@+,%d2-%d6/%a2-%a3
    21a0:	4e75           	rts
                printf("  ");
    21a2:	4879 0000 3911 	pea 3911 <__mulsi3+0x205>
    21a8:	4e92           	jsr %a2@
    21aa:	588f           	addql #4,%sp
            delay ^= 1;
    21ac:	0a42 0001      	eoriw #1,%d2
            mcDelaymsec10(delay);
    21b0:	2f02           	movel %d2,%sp@-
    21b2:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    21b4:	588f           	addql #4,%sp
    21b6:	0c83 0000 0100 	cmpil #256,%d3
    21bc:	6600 ff76      	bnew 2134 <each_megabyte_test+0x70>
    21c0:	60be           	bras 2180 <each_megabyte_test+0xbc>
                printf("\x1b[1;32m");
    21c2:	4879 0000 3795 	pea 3795 <__mulsi3+0x89>
    21c8:	4e92           	jsr %a2@
    21ca:	588f           	addql #4,%sp
    21cc:	6000 ff7c      	braw 214a <each_megabyte_test+0x86>

000021d0 <bank_test>:

void bank_test() {
    21d0:	2f0b           	movel %a3,%sp@-
    21d2:	2f0a           	movel %a2,%sp@-
    // Write bottom byte of each MB in each bank
    // Write to set low bank
    volatile uint8_t *ptr = (uint8_t*)REG_RAM_LOW;
    *ptr = 1;
    21d4:	13fc 0001 00fc 	moveb #1,fc1060 <DUART_BASE_R2+0x40fb8>
    21da:	1060 

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    21dc:	267c 0010 0000 	moveal #1048576,%a3
    21e2:	45f9 0000 3540 	lea 3540 <printf_>,%a2
        printf("\x1b[1;37mLow  bank write at address 0x%08x\n", addr);
    21e8:	2f0b           	movel %a3,%sp@-
    21ea:	4879 0000 37ac 	pea 37ac <__mulsi3+0xa0>
    21f0:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        *ptr = 0xa0;
    21f2:	16bc ffa0      	moveb #-96,%a3@
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    21f6:	d7fc 0010 0000 	addal #1048576,%a3
    21fc:	508f           	addql #8,%sp
    21fe:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2204:	66e2           	bnes 21e8 <bank_test+0x18>
    }

    // Write to set high bank
    ptr = (uint8_t*)REG_RAM_HIGH;
    *ptr = 1;
    2206:	13fc 0001 00fc 	moveb #1,fc1062 <DUART_BASE_R2+0x40fba>
    220c:	1062 
    
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    220e:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mHigh bank write at address 0x%08x\n", addr);
    2214:	2f0b           	movel %a3,%sp@-
    2216:	4879 0000 37d6 	pea 37d6 <__mulsi3+0xca>
    221c:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        *ptr = 0xc0;
    221e:	16bc ffc0      	moveb #-64,%a3@
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2222:	d7fc 0010 0000 	addal #1048576,%a3
    2228:	508f           	addql #8,%sp
    222a:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2230:	66e2           	bnes 2214 <bank_test+0x44>
    }

    // Read back and check
    printf("\n");
    2232:	4879 0000 399b 	pea 399b <__mulsi3+0x28f>
    2238:	4e92           	jsr %a2@
    // Switch back to low bank
    ptr = (uint8_t*)REG_RAM_LOW;
    *ptr = 1;
    223a:	13fc 0001 00fc 	moveb #1,fc1060 <DUART_BASE_R2+0x40fb8>
    2240:	1060 
    2242:	588f           	addql #4,%sp

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2244:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mLow  bank check at address 0x%08x: ", addr);
    224a:	2f0b           	movel %a3,%sp@-
    224c:	4879 0000 3800 	pea 3800 <__mulsi3+0xf4>
    2252:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        if (*ptr == 0xa0) {
    2254:	1013           	moveb %a3@,%d0
    2256:	508f           	addql #8,%sp
    2258:	0c00 ffa0      	cmpib #-96,%d0
    225c:	6700 0092      	beqw 22f0 <bank_test+0x120>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
        } else {
            printf("\x1b[1;31mFAIL 0x%02x\x1b[0m\n", *ptr);
    2260:	1013           	moveb %a3@,%d0
    2262:	0280 0000 00ff 	andil #255,%d0
    2268:	2f00           	movel %d0,%sp@-
    226a:	4879 0000 3843 	pea 3843 <__mulsi3+0x137>
    2270:	4e92           	jsr %a2@
    2272:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2274:	d7fc 0010 0000 	addal #1048576,%a3
    227a:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2280:	66c8           	bnes 224a <bank_test+0x7a>
        }
    }

    // Switch back to high bank
    ptr = (uint8_t*)REG_RAM_HIGH;
    *ptr = 1;
    2282:	13fc 0001 00fc 	moveb #1,fc1062 <DUART_BASE_R2+0x40fba>
    2288:	1062 

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    228a:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mHigh bank check at address 0x%08x: ", addr);
    2290:	2f0b           	movel %a3,%sp@-
    2292:	4879 0000 385b 	pea 385b <__mulsi3+0x14f>
    2298:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        if (*ptr == 0xc0) {
    229a:	1013           	moveb %a3@,%d0
    229c:	508f           	addql #8,%sp
    229e:	0c00 ffc0      	cmpib #-64,%d0
    22a2:	6728           	beqs 22cc <bank_test+0xfc>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
        } else {
            printf("\x1b[1;31mFAIL 0x%02x\x1b[0m\n", *ptr);
    22a4:	1013           	moveb %a3@,%d0
    22a6:	0280 0000 00ff 	andil #255,%d0
    22ac:	2f00           	movel %d0,%sp@-
    22ae:	4879 0000 3843 	pea 3843 <__mulsi3+0x137>
    22b4:	4e92           	jsr %a2@
    22b6:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    22b8:	d7fc 0010 0000 	addal #1048576,%a3
    22be:	b7fc 00e0 0000 	cmpal #14680064,%a3
    22c4:	66ca           	bnes 2290 <bank_test+0xc0>
        }
    }
}
    22c6:	245f           	moveal %sp@+,%a2
    22c8:	265f           	moveal %sp@+,%a3
    22ca:	4e75           	rts
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
    22cc:	1013           	moveb %a3@,%d0
    22ce:	0280 0000 00ff 	andil #255,%d0
    22d4:	2f00           	movel %d0,%sp@-
    22d6:	4879 0000 382b 	pea 382b <__mulsi3+0x11f>
    22dc:	4e92           	jsr %a2@
    22de:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    22e0:	d7fc 0010 0000 	addal #1048576,%a3
    22e6:	b7fc 00e0 0000 	cmpal #14680064,%a3
    22ec:	66a2           	bnes 2290 <bank_test+0xc0>
    22ee:	60d6           	bras 22c6 <bank_test+0xf6>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
    22f0:	1013           	moveb %a3@,%d0
    22f2:	0280 0000 00ff 	andil #255,%d0
    22f8:	2f00           	movel %d0,%sp@-
    22fa:	4879 0000 382b 	pea 382b <__mulsi3+0x11f>
    2300:	4e92           	jsr %a2@
    2302:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2304:	d7fc 0010 0000 	addal #1048576,%a3
    230a:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2310:	6600 ff38      	bnew 224a <bank_test+0x7a>
    2314:	6000 ff6c      	braw 2282 <bank_test+0xb2>

00002318 <memcheck>:
  lfsr_val &= 0xffffff;

  return lfsr_val;
}

void memcheck() {
    2318:	4fef ffe4      	lea %sp@(-28),%sp
    231c:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
  printf("Continuous testing from 0x%06x to 0x%06x (press a key to exit)\n",
    2320:	2f3c 00df ffff 	movel #14680063,%sp@-
    2326:	2f3c 0010 0000 	movel #1048576,%sp@-
    232c:	4879 0000 3891 	pea 3891 <__mulsi3+0x185>
    2332:	47f9 0000 3540 	lea 3540 <printf_>,%a3
    2338:	4e93           	jsr %a3@
  int          update_interval = 0x7000;
  int          pass            = 1;
  int          badpasses       = 0;
  int          goodpasses      = 0;
  int          errors          = 0;
  unsigned int start_ts        = _TIMER_100HZ;
    233a:	2f79 0000 040c 	movel 40c <_TIMER_100HZ>,%sp@(60)
    2340:	003c 
    2342:	4fef 000c      	lea %sp@(12),%sp
  int          errors          = 0;
    2346:	7400           	moveq #0,%d2
  int          goodpasses      = 0;
    2348:	42af 0044      	clrl %sp@(68)
  int          badpasses       = 0;
    234c:	7a00           	moveq #0,%d5
  int          pass            = 1;
    234e:	7801           	moveq #1,%d4
    2350:	4bf9 0000 35d6 	lea 35d6 <mcCheckInput>,%a5
    2356:	49f9 0000 3680 	lea 3680 <__udivsi3>,%a4
static void init_LFSR() {
    235c:	2079 0000 3a50 	moveal 3a50 <salt.0>,%a0
    2362:	2448           	moveal %a0,%a2
    2364:	2f42 002c      	movel %d2,%sp@(44)
    start_state = _TIMER_100HZ;
    2368:	2239 0000 040c 	movel 40c <_TIMER_100HZ>,%d1
    start_state += salt++;
    236e:	2e0a           	movel %a2,%d7
    2370:	528a           	addql #1,%a2
    2372:	7c00           	moveq #0,%d6
    start_state = _TIMER_100HZ;
    2374:	2241           	moveal %d1,%a1
    2376:	91c8           	subal %a0,%a0
    start_state += salt++;
    2378:	2008           	movel %a0,%d0
    237a:	2209           	movel %a1,%d1
    237c:	d287           	addl %d7,%d1
    237e:	d186           	addxl %d6,%d0
    if (start_state > 0xffffffULL) {
    2380:	4282           	clrl %d2
    2382:	263c 00ff ffff 	movel #16777215,%d3
    2388:	9681           	subl %d1,%d3
    238a:	9580           	subxl %d0,%d2
    238c:	6406           	bccs 2394 <memcheck+0x7c>
      start_state++;
    238e:	4283           	clrl %d3
    2390:	5281           	addql #1,%d1
    2392:	d183           	addxl %d3,%d0
    lfsr_val = (uint32_t)start_state & 0xffffff;
    2394:	2601           	movel %d1,%d3
    2396:	0283 00ff ffff 	andil #16777215,%d3
  } while (lfsr_val == 0);
    239c:	67ca           	beqs 2368 <memcheck+0x50>
    239e:	242f 002c      	movel %sp@(44),%d2
    23a2:	2f46 0034      	movel %d6,%sp@(52)
    23a6:	2f47 0038      	movel %d7,%sp@(56)
    23aa:	2f48 003c      	movel %a0,%sp@(60)
    23ae:	2f49 0040      	movel %a1,%sp@(64)
    23b2:	23c0 0000 3a5c 	movel %d0,3a5c <start_state>
    23b8:	23c1 0000 3a60 	movel %d1,3a60 <start_state+0x4>
    23be:	23c3 0000 3a58 	movel %d3,3a58 <lfsr_val>
    23c4:	23ca 0000 3a50 	movel %a2,3a50 <salt.0>
    23ca:	4a82           	tstl %d2
    23cc:	6700 020e      	beqw 25dc <memcheck+0x2c4>
    23d0:	2c3c 0000 3886 	movel #14470,%d6
    23d6:	7610           	moveq #16,%d3
    23d8:	4843           	swap %d3
  for (;;) {
    bool pass_bad = false;

    init_LFSR();

    for (int i = 0; i < memtest_words; i += update_interval) {
    23da:	95ca           	subal %a2,%a2
    23dc:	2e2f 0030      	movel %sp@(48),%d7
      if (checkinput()) {
    23e0:	4e95           	jsr %a5@
    23e2:	4a00           	tstb %d0
    23e4:	6600 00b4      	bnew 249a <memcheck+0x182>
        break;
      }
      unsigned int ts = _TIMER_100HZ - start_ts;
    23e8:	2c79 0000 040c 	moveal 40c <_TIMER_100HZ>,%fp
    23ee:	9dc7           	subal %d7,%fp
      unsigned int tm = ts / (60 * 100);
      ts              = (ts - (tm * (60 * 100))) / 100;
    23f0:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    23f4:	2f0e           	movel %fp,%sp@-
    23f6:	4eb9 0000 36dc 	jsr 36dc <__umodsi3>
    23fc:	508f           	addql #8,%sp

      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    23fe:	2239 0000 3a58 	movel 3a58 <lfsr_val>,%d1
    2404:	0281 0000 ffff 	andil #65535,%d1
    240a:	2f01           	movel %d1,%sp@-
    240c:	2f03           	movel %d3,%sp@-
    240e:	2f04           	movel %d4,%sp@-
    2410:	2f06           	movel %d6,%sp@-
      ts              = (ts - (tm * (60 * 100))) / 100;
    2412:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    2416:	2f00           	movel %d0,%sp@-
    2418:	4e94           	jsr %a4@
      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    241a:	588f           	addql #4,%sp
    241c:	2e80           	movel %d0,%sp@
      unsigned int tm = ts / (60 * 100);
    241e:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    2422:	2f0e           	movel %fp,%sp@-
    2424:	4e94           	jsr %a4@
      printf("\r%u:%02u %s Pass #%d - Filling words @ 0x%06x (LFSR 0x%04x)...    ",
    2426:	588f           	addql #4,%sp
    2428:	2e80           	movel %d0,%sp@
    242a:	4879 0000 38d1 	pea 38d1 <__mulsi3+0x1c5>
    2430:	4e93           	jsr %a3@
             ts,
             errors ? "[BAD]" : "[OK]",
             pass,
             (unsigned int)&word_ptr[i],
             (unsigned int)lfsr_val & 0xffff);
      int k = memtest_words > (i + update_interval) ? (i + update_interval) : memtest_words;
    2432:	4dea 7000      	lea %a2@(28672),%fp
    2436:	224e           	moveal %fp,%a1
    2438:	4fef 001c      	lea %sp@(28),%sp
    243c:	bdfc 0068 0000 	cmpal #6815744,%fp
    2442:	6f06           	bles 244a <memcheck+0x132>
    2444:	227c 0068 0000 	moveal #6815744,%a1
      for (int j = i; j < k; j++) {
    244a:	b5c9           	cmpal %a1,%a2
    244c:	6c34           	bges 2482 <memcheck+0x16a>
    244e:	2039 0000 3a58 	movel 3a58 <lfsr_val>,%d0
    2454:	d3fc 0008 0000 	addal #524288,%a1
    245a:	d3c9           	addal %a1,%a1
    245c:	2043           	moveal %d3,%a0
  lfsr_val = lfsr_val << 1;       /* Shift register */
    245e:	2200           	movel %d0,%d1
    2460:	d280           	addl %d0,%d1
  if (msb)                        /* If the output bit is 1, */
    2462:	0800 0017      	btst #23,%d0
    2466:	6706           	beqs 246e <memcheck+0x156>
    lfsr_val ^= 0x80042B;         /*  apply toggle mask. */
    2468:	0a81 0080 042b 	eoril #8389675,%d1
  lfsr_val &= 0xffffff;
    246e:	2001           	movel %d1,%d0
    2470:	0280 00ff ffff 	andil #16777215,%d0
        uint16_t v  = next_LFSR();
    2476:	30c0           	movew %d0,%a0@+
      for (int j = i; j < k; j++) {
    2478:	b3c8           	cmpal %a0,%a1
    247a:	66e2           	bnes 245e <memcheck+0x146>
    247c:	23c0 0000 3a58 	movel %d0,3a58 <lfsr_val>
    for (int i = 0; i < memtest_words; i += update_interval) {
    2482:	0683 0000 e000 	addil #57344,%d3
    2488:	bdfc 0068 2000 	cmpal #6823936,%fp
    248e:	670a           	beqs 249a <memcheck+0x182>
    2490:	244e           	moveal %fp,%a2
      if (checkinput()) {
    2492:	4e95           	jsr %a5@
    2494:	4a00           	tstb %d0
    2496:	6700 ff50      	beqw 23e8 <memcheck+0xd0>
        word_ptr[j] = v;
      }
    }

    if (checkinput()) {
    249a:	4e95           	jsr %a5@
    249c:	1e00           	moveb %d0,%d7
    249e:	6600 0150      	bnew 25f0 <memcheck+0x2d8>
  lfsr_val = (uint32_t)start_state & 0xffffff;
    24a2:	2039 0000 3a60 	movel 3a60 <start_state+0x4>,%d0
    24a8:	0280 00ff ffff 	andil #16777215,%d0
    24ae:	23c0 0000 3a58 	movel %d0,3a58 <lfsr_val>
    24b4:	2c7c 0010 0000 	moveal #1048576,%fp
    }
#endif

    reset_LFSR();

    for (int i = 0; i < memtest_words; i += update_interval) {
    24ba:	95ca           	subal %a2,%a2
      if (checkinput()) {
    24bc:	4e95           	jsr %a5@
    24be:	4a00           	tstb %d0
    24c0:	6600 00f0      	bnew 25b2 <memcheck+0x29a>
        break;
      }
      unsigned int ts = _TIMER_100HZ - start_ts;
    24c4:	2c39 0000 040c 	movel 40c <_TIMER_100HZ>,%d6
    24ca:	9caf 0030      	subl %sp@(48),%d6
      unsigned int tm = ts / (60 * 100);
    24ce:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    24d2:	2f06           	movel %d6,%sp@-
    24d4:	4e94           	jsr %a4@
    24d6:	508f           	addql #8,%sp
    24d8:	2600           	movel %d0,%d3
      ts              = (ts - (tm * (60 * 100))) / 100;
    24da:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    24de:	2f06           	movel %d6,%sp@-
    24e0:	4eb9 0000 36dc 	jsr 36dc <__umodsi3>
    24e6:	508f           	addql #8,%sp
    24e8:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    24ec:	2f00           	movel %d0,%sp@-
    24ee:	4e94           	jsr %a4@
    24f0:	508f           	addql #8,%sp
      printf("\r%u:%02u %s Pass #%d - Verifying words @ 0x%06x (LFSR 0x%04x)...",
    24f2:	2c39 0000 3a58 	movel 3a58 <lfsr_val>,%d6
    24f8:	0286 0000 ffff 	andil #65535,%d6
    24fe:	4a82           	tstl %d2
    2500:	6700 00d0      	beqw 25d2 <memcheck+0x2ba>
    2504:	41f9 0000 3886 	lea 3886 <__mulsi3+0x17a>,%a0
    250a:	2f06           	movel %d6,%sp@-
    250c:	2f0e           	movel %fp,%sp@-
    250e:	2f04           	movel %d4,%sp@-
    2510:	2f08           	movel %a0,%sp@-
    2512:	2f00           	movel %d0,%sp@-
    2514:	2f03           	movel %d3,%sp@-
    2516:	4879 0000 3914 	pea 3914 <__mulsi3+0x208>
    251c:	4e93           	jsr %a3@
             ts,
             errors ? "[BAD]" : "[OK]",
             pass,
             (unsigned int)&word_ptr[i],
             (unsigned int)lfsr_val & 0xffff);
      int k = memtest_words > (i + update_interval) ? (i + update_interval) : memtest_words;
    251e:	2c0a           	movel %a2,%d6
    2520:	0686 0000 7000 	addil #28672,%d6
    2526:	2606           	movel %d6,%d3
    2528:	4fef 001c      	lea %sp@(28),%sp
    252c:	0c86 0068 0000 	cmpil #6815744,%d6
    2532:	6f04           	bles 2538 <memcheck+0x220>
    2534:	7668           	moveq #104,%d3
    2536:	4843           	swap %d3
      for (int j = i; j < k; j++) {
    2538:	b5c3           	cmpal %d3,%a2
    253a:	6c5e           	bges 259a <memcheck+0x282>
    253c:	0683 0008 0000 	addil #524288,%d3
    2542:	d683           	addl %d3,%d3
    2544:	244e           	moveal %fp,%a2
  bool msb = lfsr_val & 0x800000; /* Get MSB (i.e., the output bit). */
    2546:	2039 0000 3a58 	movel 3a58 <lfsr_val>,%d0
  lfsr_val = lfsr_val << 1;       /* Shift register */
    254c:	2200           	movel %d0,%d1
    254e:	d280           	addl %d0,%d1
  if (msb)                        /* If the output bit is 1, */
    2550:	0800 0017      	btst #23,%d0
    2554:	6706           	beqs 255c <memcheck+0x244>
    lfsr_val ^= 0x80042B;         /*  apply toggle mask. */
    2556:	0a81 0080 042b 	eoril #8389675,%d1
  lfsr_val &= 0xffffff;
    255c:	2001           	movel %d1,%d0
    255e:	0280 00ff ffff 	andil #16777215,%d0
    2564:	23c0 0000 3a58 	movel %d0,3a58 <lfsr_val>
        uint16_t v = next_LFSR();
        if (word_ptr[j] != v) {
    256a:	3052           	moveaw %a2@,%a0
    256c:	b048           	cmpw %a0,%d0
    256e:	6724           	beqs 2594 <memcheck+0x27c>
          errors++;
    2570:	5282           	addql #1,%d2
          if (!pass_bad) {
    2572:	4a07           	tstb %d7
    2574:	6602           	bnes 2578 <memcheck+0x260>
            badpasses++;
    2576:	5285           	addql #1,%d5
          }
          pass_bad = true;
#ifndef SILENCE_ERRORS
          printf("\r > Err %d, pass %d, 0x%06x=0x%04x vs 0x%04x expected                 \n",
    2578:	3f01           	movew %d1,%sp@-
    257a:	4267           	clrw %sp@-
    257c:	3f08           	movew %a0,%sp@-
    257e:	4267           	clrw %sp@-
    2580:	2f0a           	movel %a2,%sp@-
    2582:	2f04           	movel %d4,%sp@-
    2584:	2f02           	movel %d2,%sp@-
    2586:	4879 0000 3955 	pea 3955 <__mulsi3+0x249>
    258c:	4e93           	jsr %a3@
    258e:	4fef 0018      	lea %sp@(24),%sp
          pass_bad = true;
    2592:	7e01           	moveq #1,%d7
      for (int j = i; j < k; j++) {
    2594:	548a           	addql #2,%a2
    2596:	b68a           	cmpl %a2,%d3
    2598:	66ac           	bnes 2546 <memcheck+0x22e>
    for (int i = 0; i < memtest_words; i += update_interval) {
    259a:	ddfc 0000 e000 	addal #57344,%fp
    25a0:	0c86 0068 2000 	cmpil #6823936,%d6
    25a6:	670a           	beqs 25b2 <memcheck+0x29a>
    25a8:	2446           	moveal %d6,%a2
      if (checkinput()) {
    25aa:	4e95           	jsr %a5@
    25ac:	4a00           	tstb %d0
    25ae:	6700 ff14      	beqw 24c4 <memcheck+0x1ac>
                 v);
#endif
        }
      }
    }
    if (checkinput()) {
    25b2:	4e95           	jsr %a5@
    25b4:	4a00           	tstb %d0
    25b6:	6638           	bnes 25f0 <memcheck+0x2d8>
      break;
    }
    if (!pass_bad) {
    25b8:	4a07           	tstb %d7
    25ba:	6604           	bnes 25c0 <memcheck+0x2a8>
      goodpasses++;
    25bc:	52af 0044      	addql #1,%sp@(68)
    }
    pass++;
    25c0:	5284           	addql #1,%d4
static void init_LFSR() {
    25c2:	2079 0000 3a50 	moveal 3a50 <salt.0>,%a0
    25c8:	2448           	moveal %a0,%a2
    25ca:	2f42 002c      	movel %d2,%sp@(44)
    25ce:	6000 fd98      	braw 2368 <memcheck+0x50>
      printf("\r%u:%02u %s Pass #%d - Verifying words @ 0x%06x (LFSR 0x%04x)...",
    25d2:	41f9 0000 388c 	lea 388c <__mulsi3+0x180>,%a0
    25d8:	6000 ff30      	braw 250a <memcheck+0x1f2>
    25dc:	2c3c 0000 388c 	movel #14476,%d6
  } while (lfsr_val == 0);
    25e2:	7610           	moveq #16,%d3
    25e4:	4843           	swap %d3
    for (int i = 0; i < memtest_words; i += update_interval) {
    25e6:	95ca           	subal %a2,%a2
    25e8:	2e2f 0030      	movel %sp@(48),%d7
    25ec:	6000 fdf2      	braw 23e0 <memcheck+0xc8>
  }
  inputchar();
    25f0:	4eb9 0000 35cc 	jsr 35cc <mcInputchar>

  unsigned int ts = _TIMER_100HZ - start_ts;
    25f6:	2639 0000 040c 	movel 40c <_TIMER_100HZ>,%d3
    25fc:	96af 0030      	subl %sp@(48),%d3
  unsigned int tm = ts / (60 * 100);
  ts              = (ts - (tm * (60 * 100))) / 100;
    2600:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    2604:	2f03           	movel %d3,%sp@-
    2606:	4eb9 0000 36dc 	jsr 36dc <__umodsi3>
    260c:	508f           	addql #8,%sp
    260e:	4878 0064      	pea 64 <R_STOPCNTCMD+0x46>
    2612:	2f00           	movel %d0,%sp@-
    2614:	4e94           	jsr %a4@
  printf("\n\nTesting for %u:%02u, memcheck exiting...\n", tm, ts);
    2616:	588f           	addql #4,%sp
    2618:	2e80           	movel %d0,%sp@
  unsigned int tm = ts / (60 * 100);
    261a:	4878 1770      	pea 1770 <EFP_CHECKINPUT+0x12d8>
    261e:	2f03           	movel %d3,%sp@-
    2620:	4e94           	jsr %a4@
  printf("\n\nTesting for %u:%02u, memcheck exiting...\n", tm, ts);
    2622:	588f           	addql #4,%sp
    2624:	2e80           	movel %d0,%sp@
    2626:	4879 0000 399d 	pea 399d <__mulsi3+0x291>
    262c:	4e93           	jsr %a3@
  if (errors) {
    262e:	4fef 000c      	lea %sp@(12),%sp
    2632:	4a82           	tstl %d2
    2634:	6628           	bnes 265e <memcheck+0x346>
    printf(
        "FAILED! %d failed passes, %d good (%d word errors total).", badpasses, goodpasses, errors);
  } else if (goodpasses > 0) {
    2636:	4aaf 0044      	tstl %sp@(68)
    263a:	6e0a           	bgts 2646 <memcheck+0x32e>
    printf("PASSED! %d error-free test passes.", goodpasses);
  }
}
    263c:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2640:	4fef 001c      	lea %sp@(28),%sp
    2644:	4e75           	rts
    printf("PASSED! %d error-free test passes.", goodpasses);
    2646:	2f2f 0044      	movel %sp@(68),%sp@-
    264a:	4879 0000 3a03 	pea 3a03 <__mulsi3+0x2f7>
    2650:	4e93           	jsr %a3@
    2652:	508f           	addql #8,%sp
}
    2654:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2658:	4fef 001c      	lea %sp@(28),%sp
    265c:	4e75           	rts
    printf(
    265e:	2f02           	movel %d2,%sp@-
    2660:	2f2f 0048      	movel %sp@(72),%sp@-
    2664:	2f05           	movel %d5,%sp@-
    2666:	4879 0000 39c9 	pea 39c9 <__mulsi3+0x2bd>
    266c:	4e93           	jsr %a3@
    266e:	4fef 0010      	lea %sp@(16),%sp
}
    2672:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2676:	4fef 001c      	lea %sp@(28),%sp
    267a:	4e75           	rts

0000267c <kmain>:

void kmain() {
    267c:	2f0b           	movel %a3,%sp@-
    267e:	2f0a           	movel %a2,%sp@-
    printf("\x1b[1;37mXoseRAM \x1b[0mbringup tests\n");
    2680:	4879 0000 3a26 	pea 3a26 <__mulsi3+0x31a>
    2686:	4eb9 0000 3540 	jsr 3540 <printf_>

#ifdef TEST_EACH_MEG
    each_megabyte_test();
    268c:	4eb9 0000 20c4 	jsr 20c4 <each_megabyte_test>
#endif

#ifdef TEST_BANK
    bank_test();
    2692:	4eb9 0000 21d0 	jsr 21d0 <bank_test>
#endif

#ifdef TEST_LFSR
    while (checkinput()) {  // clear any queued input
    2698:	588f           	addql #4,%sp
    269a:	45f9 0000 35d6 	lea 35d6 <mcCheckInput>,%a2
        inputchar();
    26a0:	47f9 0000 35cc 	lea 35cc <mcInputchar>,%a3
    while (checkinput()) {  // clear any queued input
    26a6:	4e92           	jsr %a2@
    26a8:	4a00           	tstb %d0
    26aa:	6708           	beqs 26b4 <kmain+0x38>
        inputchar();
    26ac:	4e93           	jsr %a3@
    while (checkinput()) {  // clear any queued input
    26ae:	4e92           	jsr %a2@
    26b0:	4a00           	tstb %d0
    26b2:	66f8           	bnes 26ac <kmain+0x30>
    }
    memcheck();
#endif
}
    26b4:	245f           	moveal %sp@+,%a2
    26b6:	265f           	moveal %sp@+,%a3
    memcheck();
    26b8:	4ef9 0000 2318 	jmp 2318 <memcheck>

000026be <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    26be:	4e75           	rts

000026c0 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    26c0:	4fef ffcc      	lea %sp@(-52),%sp
    26c4:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    26c8:	246f 0064      	moveal %sp@(100),%a2
    26cc:	2a2f 0068      	movel %sp@(104),%d5
    26d0:	2c2f 0070      	movel %sp@(112),%d6
    26d4:	242f 0074      	movel %sp@(116),%d2
    26d8:	262f 007c      	movel %sp@(124),%d3
    26dc:	2e2f 0084      	movel %sp@(132),%d7
    26e0:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    26e6:	222f 0088      	movel %sp@(136),%d1
    26ea:	0281 0000 0400 	andil #1024,%d1
    26f0:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    26f4:	4a82           	tstl %d2
    26f6:	6700 0174      	beqw 286c <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    26fa:	7210           	moveq #16,%d1
    26fc:	c2af 0088      	andl %sp@(136),%d1
    2700:	2f41 0036      	movel %d1,%sp@(54)
    2704:	082f 0005 008b 	btst #5,%sp@(139)
    270a:	6600 017e      	bnew 288a <_ntoa_long+0x1ca>
    270e:	7061           	moveq #97,%d0
    2710:	41ef 0040      	lea %sp@(64),%a0
    2714:	2f48 002e      	movel %a0,%sp@(46)
    2718:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    271c:	2808           	movel %a0,%d4
    271e:	49f9 0000 36dc 	lea 36dc <__umodsi3>,%a4
    2724:	47f9 0000 3680 	lea 3680 <__udivsi3>,%a3
    272a:	1200           	moveb %d0,%d1
    272c:	0601 fff6      	addib #-10,%d1
    2730:	2f4a 003a      	movel %a2,%sp@(58)
    2734:	2a45           	moveal %d5,%a5
    2736:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    2738:	2f03           	movel %d3,%sp@-
    273a:	2f02           	movel %d2,%sp@-
    273c:	4e94           	jsr %a4@
    273e:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2740:	7209           	moveq #9,%d1
    2742:	b280           	cmpl %d0,%d1
    2744:	652a           	bcss 2770 <_ntoa_long+0xb0>
    2746:	0600 0030      	addib #48,%d0
    274a:	2444           	moveal %d4,%a2
    274c:	14c0           	moveb %d0,%a2@+
      value /= base;
    274e:	2f03           	movel %d3,%sp@-
    2750:	2f02           	movel %d2,%sp@-
    2752:	4e93           	jsr %a3@
    2754:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    2756:	b682           	cmpl %d2,%d3
    2758:	6228           	bhis 2782 <_ntoa_long+0xc2>
    275a:	bdca           	cmpal %a2,%fp
    275c:	6724           	beqs 2782 <_ntoa_long+0xc2>
    275e:	280a           	movel %a2,%d4
      value /= base;
    2760:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    2762:	2f03           	movel %d3,%sp@-
    2764:	2f02           	movel %d2,%sp@-
    2766:	4e94           	jsr %a4@
    2768:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    276a:	7209           	moveq #9,%d1
    276c:	b280           	cmpl %d0,%d1
    276e:	64d6           	bccs 2746 <_ntoa_long+0x86>
    2770:	d005           	addb %d5,%d0
    2772:	2444           	moveal %d4,%a2
    2774:	14c0           	moveb %d0,%a2@+
      value /= base;
    2776:	2f03           	movel %d3,%sp@-
    2778:	2f02           	movel %d2,%sp@-
    277a:	4e93           	jsr %a3@
    277c:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    277e:	b682           	cmpl %d2,%d3
    2780:	63d8           	blss 275a <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2782:	246f 003a      	moveal %sp@(58),%a2
    2786:	2a0d           	movel %a5,%d5
    2788:	307c 0001      	moveaw #1,%a0
    278c:	91ef 002e      	subal %sp@(46),%a0
    2790:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    2792:	082f 0001 008b 	btst #1,%sp@(139)
    2798:	6700 013e      	beqw 28d8 <_ntoa_long+0x218>
    279c:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    27a0:	4aaf 0036      	tstl %sp@(54)
    27a4:	6700 023c      	beqw 29e2 <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    27a8:	4aaf 0032      	tstl %sp@(50)
    27ac:	6600 01aa      	bnew 2958 <_ntoa_long+0x298>
    27b0:	4a84           	tstl %d4
    27b2:	6600 0324      	bnew 2ad8 <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27b6:	7010           	moveq #16,%d0
    27b8:	b083           	cmpl %d3,%d0
    27ba:	6700 0412      	beqw 2bce <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27be:	5583           	subql #2,%d3
    27c0:	6700 04b0      	beqw 2c72 <_ntoa_long+0x5b2>
      buf[len++] = '0';
    27c4:	1f7c 0030 0040 	moveb #48,%sp@(64)
    27ca:	202f 0088      	movel %sp@(136),%d0
    27ce:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27d0:	7203           	moveq #3,%d1
    27d2:	c280           	andl %d0,%d1
      buf[len++] = '-';
    27d4:	2802           	movel %d2,%d4
    if (negative) {
    27d6:	4a2f 003f      	tstb %sp@(63)
    27da:	6700 02dc      	beqw 2ab8 <_ntoa_long+0x3f8>
      buf[len++] = '-';
    27de:	5284           	addql #1,%d4
    27e0:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27e6:	4a81           	tstl %d1
    27e8:	6600 0194      	bnew 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27ec:	b887           	cmpl %d7,%d4
    27ee:	6400 018e      	bccw 297e <_ntoa_long+0x2be>
    27f2:	242f 006c      	movel %sp@(108),%d2
    27f6:	2604           	movel %d4,%d3
    27f8:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    27fa:	2002           	movel %d2,%d0
    27fc:	5282           	addql #1,%d2
    27fe:	2f06           	movel %d6,%sp@-
    2800:	2f00           	movel %d0,%sp@-
    2802:	2f05           	movel %d5,%sp@-
    2804:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2808:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    280a:	2003           	movel %d3,%d0
    280c:	d082           	addl %d2,%d0
    280e:	4fef 0010      	lea %sp@(16),%sp
    2812:	be80           	cmpl %d0,%d7
    2814:	62e4           	bhis 27fa <_ntoa_long+0x13a>
    2816:	2004           	movel %d4,%d0
    2818:	5280           	addql #1,%d0
    281a:	be80           	cmpl %d0,%d7
    281c:	6500 033e      	bcsw 2b5c <_ntoa_long+0x49c>
    2820:	2047           	moveal %d7,%a0
    2822:	5388           	subql #1,%a0
    2824:	91c4           	subal %d4,%a0
    2826:	226f 006c      	moveal %sp@(108),%a1
    282a:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    282e:	2609           	movel %a1,%d3
  while (len) {
    2830:	4a84           	tstl %d4
    2832:	6600 014e      	bnew 2982 <_ntoa_long+0x2c2>
    2836:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    2838:	bcfc 0000      	cmpaw #0,%fp
    283c:	6722           	beqs 2860 <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    283e:	2602           	movel %d2,%d3
    2840:	96af 006c      	subl %sp@(108),%d3
    2844:	be83           	cmpl %d3,%d7
    2846:	6318           	blss 2860 <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    2848:	2f06           	movel %d6,%sp@-
    284a:	2f02           	movel %d2,%sp@-
    284c:	5282           	addql #1,%d2
    284e:	2f05           	movel %d5,%sp@-
    2850:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2854:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    2856:	5283           	addql #1,%d3
    2858:	4fef 0010      	lea %sp@(16),%sp
    285c:	be83           	cmpl %d3,%d7
    285e:	62e8           	bhis 2848 <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    2860:	2002           	movel %d2,%d0
    2862:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2866:	4fef 0034      	lea %sp@(52),%sp
    286a:	4e75           	rts
    flags &= ~FLAGS_HASH;
    286c:	70ef           	moveq #-17,%d0
    286e:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    2872:	4aaf 0032      	tstl %sp@(50)
    2876:	6640           	bnes 28b8 <_ntoa_long+0x1f8>
    2878:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    287c:	2f40 0088      	movel %d0,%sp@(136)
    2880:	082f 0005 008b 	btst #5,%sp@(139)
    2886:	6700 fe86      	beqw 270e <_ntoa_long+0x4e>
    288a:	7041           	moveq #65,%d0
    288c:	41ef 0040      	lea %sp@(64),%a0
    2890:	2f48 002e      	movel %a0,%sp@(46)
    2894:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2898:	2808           	movel %a0,%d4
    289a:	49f9 0000 36dc 	lea 36dc <__umodsi3>,%a4
    28a0:	47f9 0000 3680 	lea 3680 <__udivsi3>,%a3
    28a6:	1200           	moveb %d0,%d1
    28a8:	0601 fff6      	addib #-10,%d1
    28ac:	2f4a 003a      	movel %a2,%sp@(58)
    28b0:	2a45           	moveal %d5,%a5
    28b2:	1a01           	moveb %d1,%d5
    28b4:	6000 fe82      	braw 2738 <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    28b8:	7802           	moveq #2,%d4
    28ba:	c8af 0088      	andl %sp@(136),%d4
    28be:	082f 0001 008b 	btst #1,%sp@(139)
    28c4:	6600 01e0      	bnew 2aa6 <_ntoa_long+0x3e6>
    28c8:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    28cc:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    28d0:	2f7c 0000 0400 	movel #1024,%sp@(50)
    28d6:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    28d8:	4a87           	tstl %d7
    28da:	6700 012e      	beqw 2a0a <_ntoa_long+0x34a>
    28de:	7001           	moveq #1,%d0
    28e0:	c0af 0088      	andl %sp@(136),%d0
    28e4:	2c40           	moveal %d0,%fp
    28e6:	082f 0000 008b 	btst #0,%sp@(139)
    28ec:	6700 0194      	beqw 2a82 <_ntoa_long+0x3c2>
    28f0:	4a2f 003f      	tstb %sp@(63)
    28f4:	6600 0250      	bnew 2b46 <_ntoa_long+0x486>
    28f8:	700c           	moveq #12,%d0
    28fa:	c0af 0088      	andl %sp@(136),%d0
    28fe:	6600 0246      	bnew 2b46 <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2902:	b8af 0080      	cmpl %sp@(128),%d4
    2906:	6400 013a      	bccw 2a42 <_ntoa_long+0x382>
    290a:	7020           	moveq #32,%d0
    290c:	b084           	cmpl %d4,%d0
    290e:	6700 030a      	beqw 2c1a <_ntoa_long+0x55a>
    2912:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    2916:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    291a:	5284           	addql #1,%d4
    291c:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2920:	b880           	cmpl %d0,%d4
    2922:	6400 0116      	bccw 2a3a <_ntoa_long+0x37a>
    2926:	7220           	moveq #32,%d1
    2928:	b284           	cmpl %d4,%d1
    292a:	66ee           	bnes 291a <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    292c:	bcfc 0000      	cmpaw #0,%fp
    2930:	6700 0140      	beqw 2a72 <_ntoa_long+0x3b2>
    2934:	7020           	moveq #32,%d0
    2936:	b087           	cmpl %d7,%d0
    2938:	6400 0138      	bccw 2a72 <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    293c:	4aaf 0036      	tstl %sp@(54)
    2940:	6700 020a      	beqw 2b4c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2944:	4aaf 0032      	tstl %sp@(50)
    2948:	6600 0390      	bnew 2cda <_ntoa_long+0x61a>
    294c:	7020           	moveq #32,%d0
    294e:	9dce           	subal %fp,%fp
    2950:	b0af 0080      	cmpl %sp@(128),%d0
    2954:	6700 02e8      	beqw 2c3e <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2958:	7003           	moveq #3,%d0
    295a:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    295e:	7210           	moveq #16,%d1
    2960:	b283           	cmpl %d3,%d1
    2962:	6700 0220      	beqw 2b84 <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2966:	5583           	subql #2,%d3
    2968:	6700 01bc      	beqw 2b26 <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    296c:	7220           	moveq #32,%d1
    296e:	b284           	cmpl %d4,%d1
    2970:	6666           	bnes 29d8 <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2972:	4a80           	tstl %d0
    2974:	6608           	bnes 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2976:	7220           	moveq #32,%d1
    2978:	b287           	cmpl %d7,%d1
    297a:	6500 fe76      	bcsw 27f2 <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    297e:	262f 006c      	movel %sp@(108),%d3
    2982:	4bef 0040      	lea %sp@(64),%a5
    2986:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    298a:	d684           	addl %d4,%d3
    298c:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2990:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2992:	2f06           	movel %d6,%sp@-
    2994:	200c           	movel %a4,%d0
    2996:	908b           	subl %a3,%d0
    2998:	2f00           	movel %d0,%sp@-
    299a:	2f05           	movel %d5,%sp@-
    299c:	1023           	moveb %a3@-,%d0
    299e:	4880           	extw %d0
    29a0:	3040           	moveaw %d0,%a0
    29a2:	2f08           	movel %a0,%sp@-
    29a4:	4e92           	jsr %a2@
  while (len) {
    29a6:	4fef 0010      	lea %sp@(16),%sp
    29aa:	b7cd           	cmpal %a5,%a3
    29ac:	6700 fe8a      	beqw 2838 <_ntoa_long+0x178>
    29b0:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    29b2:	2f06           	movel %d6,%sp@-
    29b4:	200c           	movel %a4,%d0
    29b6:	908b           	subl %a3,%d0
    29b8:	2f00           	movel %d0,%sp@-
    29ba:	2f05           	movel %d5,%sp@-
    29bc:	1023           	moveb %a3@-,%d0
    29be:	4880           	extw %d0
    29c0:	3040           	moveaw %d0,%a0
    29c2:	2f08           	movel %a0,%sp@-
    29c4:	4e92           	jsr %a2@
  while (len) {
    29c6:	4fef 0010      	lea %sp@(16),%sp
    29ca:	b7cd           	cmpal %a5,%a3
    29cc:	66c2           	bnes 2990 <_ntoa_long+0x2d0>
    29ce:	6000 fe68      	braw 2838 <_ntoa_long+0x178>
      buf[len++] = 'X';
    29d2:	5384           	subql #1,%d4
    29d4:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    29d8:	2004           	movel %d4,%d0
    29da:	5284           	addql #1,%d4
    29dc:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    29e2:	7020           	moveq #32,%d0
    29e4:	b084           	cmpl %d4,%d0
    29e6:	6600 0134      	bnew 2b1c <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    29ea:	7003           	moveq #3,%d0
    29ec:	c0af 0088      	andl %sp@(136),%d0
    29f0:	6700 00a8      	beqw 2a9a <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    29f4:	262f 006c      	movel %sp@(108),%d3
    29f8:	7820           	moveq #32,%d4
    29fa:	4bef 0040      	lea %sp@(64),%a5
    29fe:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    2a02:	d684           	addl %d4,%d3
    2a04:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2a08:	6086           	bras 2990 <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a0a:	b8af 0080      	cmpl %sp@(128),%d4
    2a0e:	6400 0280      	bccw 2c90 <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2a12:	7201           	moveq #1,%d1
    2a14:	c2af 0088      	andl %sp@(136),%d1
    2a18:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a1a:	7020           	moveq #32,%d0
    2a1c:	b084           	cmpl %d4,%d0
    2a1e:	6600 fef2      	bnew 2912 <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a22:	4a81           	tstl %d1
    2a24:	6700 02ba      	beqw 2ce0 <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    2a28:	4aaf 0036      	tstl %sp@(54)
    2a2c:	6600 02ba      	bnew 2ce8 <_ntoa_long+0x628>
    2a30:	9dce           	subal %fp,%fp
    2a32:	262f 006c      	movel %sp@(108),%d3
    2a36:	7820           	moveq #32,%d4
    2a38:	60c0           	bras 29fa <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a3a:	bcfc 0000      	cmpaw #0,%fp
    2a3e:	6700 fd60      	beqw 27a0 <_ntoa_long+0xe0>
    2a42:	be84           	cmpl %d4,%d7
    2a44:	6300 024a      	blsw 2c90 <_ntoa_long+0x5d0>
    2a48:	7220           	moveq #32,%d1
    2a4a:	b284           	cmpl %d4,%d1
    2a4c:	6700 0270      	beqw 2cbe <_ntoa_long+0x5fe>
    2a50:	43ef 0040      	lea %sp@(64),%a1
    2a54:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    2a58:	2009           	movel %a1,%d0
    2a5a:	d087           	addl %d7,%d0
    2a5c:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    2a60:	10bc 0030      	moveb #48,%a0@
    2a64:	2208           	movel %a0,%d1
    2a66:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a68:	b1c0           	cmpal %d0,%a0
    2a6a:	6700 0100      	beqw 2b6c <_ntoa_long+0x4ac>
    2a6e:	bdc8           	cmpal %a0,%fp
    2a70:	66ee           	bnes 2a60 <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    2a72:	4aaf 0036      	tstl %sp@(54)
    2a76:	6700 00d4      	beqw 2b4c <_ntoa_long+0x48c>
    2a7a:	9dce           	subal %fp,%fp
    2a7c:	7820           	moveq #32,%d4
    2a7e:	6000 fd28      	braw 27a8 <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2a82:	b8af 0080      	cmpl %sp@(128),%d4
    2a86:	6400 fd18      	bccw 27a0 <_ntoa_long+0xe0>
    2a8a:	7220           	moveq #32,%d1
    2a8c:	b284           	cmpl %d4,%d1
    2a8e:	6600 fe82      	bnew 2912 <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    2a92:	4aaf 0036      	tstl %sp@(54)
    2a96:	6600 0250      	bnew 2ce8 <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    2a9a:	7820           	moveq #32,%d4
    2a9c:	b887           	cmpl %d7,%d4
    2a9e:	6500 fd52      	bcsw 27f2 <_ntoa_long+0x132>
    2aa2:	6000 feda      	braw 297e <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    2aa6:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2aaa:	7203           	moveq #3,%d1
    2aac:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2aae:	2802           	movel %d2,%d4
    if (negative) {
    2ab0:	4a2f 003f      	tstb %sp@(63)
    2ab4:	6600 fd28      	bnew 27de <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    2ab8:	0800 0002      	btst #2,%d0
    2abc:	6700 00e8      	beqw 2ba6 <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2ac0:	5284           	addql #1,%d4
    2ac2:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2ac8:	4a81           	tstl %d1
    2aca:	6600 feb2      	bnew 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2ace:	b887           	cmpl %d7,%d4
    2ad0:	6500 fd20      	bcsw 27f2 <_ntoa_long+0x132>
    2ad4:	6000 fea8      	braw 297e <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2ad8:	b8af 0080      	cmpl %sp@(128),%d4
    2adc:	6706           	beqs 2ae4 <_ntoa_long+0x424>
    2ade:	be84           	cmpl %d4,%d7
    2ae0:	6600 fe76      	bnew 2958 <_ntoa_long+0x298>
      len--;
    2ae4:	2004           	movel %d4,%d0
    2ae6:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    2ae8:	7201           	moveq #1,%d1
    2aea:	b284           	cmpl %d4,%d1
    2aec:	6700 fcc8      	beqw 27b6 <_ntoa_long+0xf6>
    2af0:	7210           	moveq #16,%d1
    2af2:	b283           	cmpl %d3,%d1
    2af4:	6700 01a8      	beqw 2c9e <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2af8:	7202           	moveq #2,%d1
      len--;
    2afa:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2afc:	b283           	cmpl %d3,%d1
    2afe:	6600 feda      	bnew 29da <_ntoa_long+0x31a>
    2b02:	7003           	moveq #3,%d0
    2b04:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    2b08:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    2b0e:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2b10:	7220           	moveq #32,%d1
    2b12:	b284           	cmpl %d4,%d1
    2b14:	6700 fe5c      	beqw 2972 <_ntoa_long+0x2b2>
    2b18:	6000 febe      	braw 29d8 <_ntoa_long+0x318>
    2b1c:	202f 0088      	movel %sp@(136),%d0
    2b20:	2404           	movel %d4,%d2
    2b22:	6000 fcac      	braw 27d0 <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2b26:	7220           	moveq #32,%d1
    2b28:	b284           	cmpl %d4,%d1
    2b2a:	66dc           	bnes 2b08 <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b2c:	4a80           	tstl %d0
    2b2e:	6600 fe4e      	bnew 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2b32:	7020           	moveq #32,%d0
    2b34:	b087           	cmpl %d7,%d0
    2b36:	6400 fe46      	bccw 297e <_ntoa_long+0x2be>
    2b3a:	242f 006c      	movel %sp@(108),%d2
    2b3e:	2604           	movel %d4,%d3
    2b40:	9682           	subl %d2,%d3
    2b42:	6000 fcb6      	braw 27fa <_ntoa_long+0x13a>
      width--;
    2b46:	5387           	subql #1,%d7
    2b48:	6000 fdb8      	braw 2902 <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    2b4c:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b4e:	7003           	moveq #3,%d0
    2b50:	c0af 0088      	andl %sp@(136),%d0
    2b54:	6600 fe9e      	bnew 29f4 <_ntoa_long+0x334>
    2b58:	6000 ff40      	braw 2a9a <_ntoa_long+0x3da>
    2b5c:	91c8           	subal %a0,%a0
    2b5e:	226f 006c      	moveal %sp@(108),%a1
    2b62:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    2b66:	2609           	movel %a1,%d3
    2b68:	6000 fcc6      	braw 2830 <_ntoa_long+0x170>
      buf[len++] = '0';
    2b6c:	307c 0001      	moveaw #1,%a0
    2b70:	91c9           	subal %a1,%a0
    2b72:	2808           	movel %a0,%d4
    2b74:	d881           	addl %d1,%d4
    2b76:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2b78:	4aaf 0036      	tstl %sp@(54)
    2b7c:	6600 fc2a      	bnew 27a8 <_ntoa_long+0xe8>
    2b80:	6000 fe60      	braw 29e2 <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2b84:	7220           	moveq #32,%d1
    2b86:	082f 0005 008b 	btst #5,%sp@(139)
    2b8c:	6600 00ca      	bnew 2c58 <_ntoa_long+0x598>
    2b90:	b284           	cmpl %d4,%d1
    2b92:	6600 00b0      	bnew 2c44 <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2b96:	4a80           	tstl %d0
    2b98:	6600 fde4      	bnew 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2b9c:	b287           	cmpl %d7,%d1
    2b9e:	6500 fc52      	bcsw 27f2 <_ntoa_long+0x132>
    2ba2:	6000 fdda      	braw 297e <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    2ba6:	0800 0003      	btst #3,%d0
    2baa:	6640           	bnes 2bec <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2bac:	4a81           	tstl %d1
    2bae:	6600 00d8      	bnew 2c88 <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    2bb2:	b487           	cmpl %d7,%d2
    2bb4:	6500 fc3c      	bcsw 27f2 <_ntoa_long+0x132>
  while (len) {
    2bb8:	4a82           	tstl %d2
    2bba:	6600 fdc2      	bnew 297e <_ntoa_long+0x2be>
    2bbe:	242f 006c      	movel %sp@(108),%d2
}
    2bc2:	2002           	movel %d2,%d0
    2bc4:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2bc8:	4fef 0034      	lea %sp@(52),%sp
    2bcc:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2bce:	082f 0005 008b 	btst #5,%sp@(139)
    2bd4:	662e           	bnes 2c04 <_ntoa_long+0x544>
      buf[len++] = 'x';
    2bd6:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    2bdc:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2be2:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2be6:	7402           	moveq #2,%d2
    2be8:	6000 fbe6      	braw 27d0 <_ntoa_long+0x110>
      buf[len++] = ' ';
    2bec:	5284           	addql #1,%d4
    2bee:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2bf4:	4a81           	tstl %d1
    2bf6:	6600 fd86      	bnew 297e <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2bfa:	b887           	cmpl %d7,%d4
    2bfc:	6500 fbf4      	bcsw 27f2 <_ntoa_long+0x132>
    2c00:	6000 fd7c      	braw 297e <_ntoa_long+0x2be>
      buf[len++] = 'X';
    2c04:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    2c0a:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2c10:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2c14:	7402           	moveq #2,%d2
    2c16:	6000 fbb8      	braw 27d0 <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c1a:	7220           	moveq #32,%d1
    2c1c:	b287           	cmpl %d7,%d1
    2c1e:	6400 fe08      	bccw 2a28 <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    2c22:	4aaf 0036      	tstl %sp@(54)
    2c26:	6700 ff24      	beqw 2b4c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2c2a:	4aaf 0032      	tstl %sp@(50)
    2c2e:	6600 00aa      	bnew 2cda <_ntoa_long+0x61a>
    2c32:	7220           	moveq #32,%d1
    2c34:	9dce           	subal %fp,%fp
    2c36:	b2af 0080      	cmpl %sp@(128),%d1
    2c3a:	6600 fd1c      	bnew 2958 <_ntoa_long+0x298>
      len--;
    2c3e:	701f           	moveq #31,%d0
    2c40:	6000 feae      	braw 2af0 <_ntoa_long+0x430>
      buf[len++] = 'x';
    2c44:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    2c4a:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2c4c:	7220           	moveq #32,%d1
    2c4e:	b284           	cmpl %d4,%d1
    2c50:	6700 fd20      	beqw 2972 <_ntoa_long+0x2b2>
    2c54:	6000 fd82      	braw 29d8 <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c58:	b284           	cmpl %d4,%d1
    2c5a:	6700 fed0      	beqw 2b2c <_ntoa_long+0x46c>
      buf[len++] = 'X';
    2c5e:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    2c64:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2c66:	7220           	moveq #32,%d1
    2c68:	b284           	cmpl %d4,%d1
    2c6a:	6700 fd06      	beqw 2972 <_ntoa_long+0x2b2>
    2c6e:	6000 fd68      	braw 29d8 <_ntoa_long+0x318>
      buf[len++] = 'b';
    2c72:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    2c78:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2c7e:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    2c82:	7402           	moveq #2,%d2
    2c84:	6000 fb4a      	braw 27d0 <_ntoa_long+0x110>
    2c88:	262f 006c      	movel %sp@(108),%d3
    2c8c:	6000 fba2      	braw 2830 <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2c90:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2c92:	4aaf 0036      	tstl %sp@(54)
    2c96:	6600 fb10      	bnew 27a8 <_ntoa_long+0xe8>
    2c9a:	6000 fd46      	braw 29e2 <_ntoa_long+0x322>
      buf[len++] = 'x';
    2c9e:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2ca2:	082f 0005 008b 	btst #5,%sp@(139)
    2ca8:	6600 fd28      	bnew 29d2 <_ntoa_long+0x312>
      buf[len++] = 'x';
    2cac:	2004           	movel %d4,%d0
    2cae:	5380           	subql #1,%d0
    2cb0:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    2cb4:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    2cba:	6000 fd26      	braw 29e2 <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    2cbe:	4aaf 0036      	tstl %sp@(54)
    2cc2:	6700 fe88      	beqw 2b4c <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2cc6:	4aaf 0032      	tstl %sp@(50)
    2cca:	660e           	bnes 2cda <_ntoa_long+0x61a>
    2ccc:	7020           	moveq #32,%d0
    2cce:	b0af 0080      	cmpl %sp@(128),%d0
    2cd2:	6738           	beqs 2d0c <_ntoa_long+0x64c>
    2cd4:	7220           	moveq #32,%d1
    2cd6:	b287           	cmpl %d7,%d1
    2cd8:	6732           	beqs 2d0c <_ntoa_long+0x64c>
    2cda:	9dce           	subal %fp,%fp
    2cdc:	6000 fc7a      	braw 2958 <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2ce0:	4aaf 0036      	tstl %sp@(54)
    2ce4:	6700 fc98      	beqw 297e <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2ce8:	4aaf 0032      	tstl %sp@(50)
    2cec:	6708           	beqs 2cf6 <_ntoa_long+0x636>
    2cee:	9dce           	subal %fp,%fp
    2cf0:	7820           	moveq #32,%d4
    2cf2:	6000 fc64      	braw 2958 <_ntoa_long+0x298>
    2cf6:	7020           	moveq #32,%d0
    2cf8:	7820           	moveq #32,%d4
    2cfa:	b0af 0080      	cmpl %sp@(128),%d0
    2cfe:	6714           	beqs 2d14 <_ntoa_long+0x654>
    2d00:	9dce           	subal %fp,%fp
    2d02:	be84           	cmpl %d4,%d7
    2d04:	6600 fc52      	bnew 2958 <_ntoa_long+0x298>
    2d08:	6000 fdda      	braw 2ae4 <_ntoa_long+0x424>
    2d0c:	9dce           	subal %fp,%fp
      len--;
    2d0e:	701f           	moveq #31,%d0
    2d10:	6000 fdde      	braw 2af0 <_ntoa_long+0x430>
    2d14:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    2d16:	9dce           	subal %fp,%fp
    2d18:	6000 fdd6      	braw 2af0 <_ntoa_long+0x430>

00002d1c <_out_char>:
{
    2d1c:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2d20:	4a00           	tstb %d0
    2d22:	6602           	bnes 2d26 <_out_char+0xa>
}
    2d24:	4e75           	rts
    _putchar(character);
    2d26:	4880           	extw %d0
    2d28:	3040           	moveaw %d0,%a0
    2d2a:	2f48 0004      	movel %a0,%sp@(4)
    2d2e:	4ef9 0000 3568 	jmp 3568 <_putchar>

00002d34 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    2d34:	4fef fff4      	lea %sp@(-12),%sp
    2d38:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    2d3c:	2a6f 003c      	moveal %sp@(60),%a5
    2d40:	2c2f 0040      	movel %sp@(64),%d6
    2d44:	242f 0044      	movel %sp@(68),%d2
    2d48:	286f 0048      	moveal %sp@(72),%a4
    2d4c:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    2d50:	4a86           	tstl %d6
    2d52:	6700 023e      	beqw 2f92 <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    2d56:	1014           	moveb %a4@,%d0
    2d58:	95ca           	subal %a2,%a2
    2d5a:	4a00           	tstb %d0
    2d5c:	6700 0244      	beqw 2fa2 <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    2d60:	2c7c 0000 2dd0 	moveal #11728,%fp
      format++;
    2d66:	528c           	addql #1,%a4
    if (*format != '%') {
    2d68:	0c00 0025      	cmpib #37,%d0
    2d6c:	6740           	beqs 2dae <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    2d6e:	280a           	movel %a2,%d4
    2d70:	5284           	addql #1,%d4
    2d72:	2f02           	movel %d2,%sp@-
    2d74:	2f0a           	movel %a2,%sp@-
    2d76:	2f06           	movel %d6,%sp@-
    2d78:	4880           	extw %d0
    2d7a:	3040           	moveaw %d0,%a0
    2d7c:	2f08           	movel %a0,%sp@-
    2d7e:	4e95           	jsr %a5@
      continue;
    2d80:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    2d84:	2444           	moveal %d4,%a2
  while (*format)
    2d86:	1014           	moveb %a4@,%d0
    2d88:	66dc           	bnes 2d66 <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2d8a:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2d8c:	b5c2           	cmpal %d2,%a2
    2d8e:	6504           	bcss 2d94 <_vsnprintf+0x60>
    2d90:	2442           	moveal %d2,%a2
    2d92:	538a           	subql #1,%a2
    2d94:	2f02           	movel %d2,%sp@-
    2d96:	2f0a           	movel %a2,%sp@-
    2d98:	2f06           	movel %d6,%sp@-
    2d9a:	42a7           	clrl %sp@-
    2d9c:	4e95           	jsr %a5@
  return (int)idx;
    2d9e:	4fef 0010      	lea %sp@(16),%sp
}
    2da2:	2003           	movel %d3,%d0
    2da4:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2da8:	4fef 000c      	lea %sp@(12),%sp
    2dac:	4e75           	rts
    flags = 0U;
    2dae:	7200           	moveq #0,%d1
      switch (*format) {
    2db0:	204c           	moveal %a4,%a0
    2db2:	1018           	moveb %a0@+,%d0
    2db4:	1800           	moveb %d0,%d4
    2db6:	0604 ffe0      	addib #-32,%d4
    2dba:	0c04 0010      	cmpib #16,%d4
    2dbe:	6232           	bhis 2df2 <_vsnprintf+0xbe>
    2dc0:	0284 0000 00ff 	andil #255,%d4
    2dc6:	d884           	addl %d4,%d4
    2dc8:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2dcc:	4efb 9002      	jmp %pc@(2dd0 <_vsnprintf+0x9c>,%a1:w)
    2dd0:	00e2           	.short 0x00e2
    2dd2:	0022 0022      	orib #34,%a2@-
    2dd6:	00d8           	.short 0x00d8
    2dd8:	0022 0022      	orib #34,%a2@-
    2ddc:	0022 0022      	orib #34,%a2@-
    2de0:	0022 0022      	orib #34,%a2@-
    2de4:	0022 00ce      	orib #-50,%a2@-
    2de8:	0022 00c4      	orib #-60,%a2@-
    2dec:	0022 0022      	orib #34,%a2@-
    2df0:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2df2:	1800           	moveb %d0,%d4
    2df4:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2df8:	0c04 0009      	cmpib #9,%d4
    2dfc:	6300 00be      	blsw 2ebc <_vsnprintf+0x188>
    else if (*format == '*') {
    2e00:	0c00 002a      	cmpib #42,%d0
    2e04:	6700 0172      	beqw 2f78 <_vsnprintf+0x244>
    width = 0U;
    2e08:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2e0a:	0c00 002e      	cmpib #46,%d0
    2e0e:	6700 00fc      	beqw 2f0c <_vsnprintf+0x1d8>
    precision = 0U;
    2e12:	7e00           	moveq #0,%d7
        format++;
    2e14:	2808           	movel %a0,%d4
    switch (*format) {
    2e16:	0c00 006c      	cmpib #108,%d0
    2e1a:	6700 011e      	beqw 2f3a <_vsnprintf+0x206>
    2e1e:	0c00 006c      	cmpib #108,%d0
    2e22:	6e00 0136      	bgtw 2f5a <_vsnprintf+0x226>
    2e26:	0c00 0068      	cmpib #104,%d0
    2e2a:	6700 02c8      	beqw 30f4 <_vsnprintf+0x3c0>
    2e2e:	0c00 006a      	cmpib #106,%d0
    2e32:	6600 017a      	bnew 2fae <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2e36:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2e3a:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2e3e:	2844           	moveal %d4,%a4
    2e40:	528c           	addql #1,%a4
    switch (*format) {
    2e42:	0c00 0078      	cmpib #120,%d0
    2e46:	6e00 0198      	bgtw 2fe0 <_vsnprintf+0x2ac>
    2e4a:	0c00 0063      	cmpib #99,%d0
    2e4e:	6e00 0168      	bgtw 2fb8 <_vsnprintf+0x284>
    2e52:	0c00 0062      	cmpib #98,%d0
    2e56:	6700 05de      	beqw 3436 <_vsnprintf+0x702>
    2e5a:	0c00 0063      	cmpib #99,%d0
    2e5e:	6700 0362      	beqw 31c2 <_vsnprintf+0x48e>
    2e62:	0c00 0025      	cmpib #37,%d0
    2e66:	6600 050a      	bnew 3372 <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2e6a:	280a           	movel %a2,%d4
    2e6c:	5284           	addql #1,%d4
    2e6e:	2f02           	movel %d2,%sp@-
    2e70:	2f0a           	movel %a2,%sp@-
    2e72:	2f06           	movel %d6,%sp@-
    2e74:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2e78:	4e95           	jsr %a5@
        break;
    2e7a:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2e7e:	2444           	moveal %d4,%a2
  while (*format)
    2e80:	1014           	moveb %a4@,%d0
    2e82:	6600 fee2      	bnew 2d66 <_vsnprintf+0x32>
    2e86:	6000 ff02      	braw 2d8a <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2e8a:	7001           	moveq #1,%d0
    2e8c:	8280           	orl %d0,%d1
  while (*format)
    2e8e:	2848           	moveal %a0,%a4
    2e90:	6000 ff1e      	braw 2db0 <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2e94:	7a02           	moveq #2,%d5
    2e96:	8285           	orl %d5,%d1
  while (*format)
    2e98:	2848           	moveal %a0,%a4
    2e9a:	6000 ff14      	braw 2db0 <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2e9e:	7004           	moveq #4,%d0
    2ea0:	8280           	orl %d0,%d1
  while (*format)
    2ea2:	2848           	moveal %a0,%a4
    2ea4:	6000 ff0a      	braw 2db0 <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2ea8:	7010           	moveq #16,%d0
    2eaa:	8280           	orl %d0,%d1
  while (*format)
    2eac:	2848           	moveal %a0,%a4
    2eae:	6000 ff00      	braw 2db0 <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2eb2:	7a08           	moveq #8,%d5
    2eb4:	8285           	orl %d5,%d1
  while (*format)
    2eb6:	2848           	moveal %a0,%a4
    2eb8:	6000 fef6      	braw 2db0 <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2ebc:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ebe:	2848           	moveal %a0,%a4
    2ec0:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2ec4:	d3c9           	addal %a1,%a1
    2ec6:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2eca:	d7cb           	addal %a3,%a3
    2ecc:	4880           	extw %d0
    2ece:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2ed2:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2ed4:	1800           	moveb %d0,%d4
    2ed6:	0604 ffd0      	addib #-48,%d4
    2eda:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2edc:	0c04 0009      	cmpib #9,%d4
    2ee0:	6200 ff28      	bhiw 2e0a <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2ee4:	2848           	moveal %a0,%a4
    2ee6:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2eea:	d3c9           	addal %a1,%a1
    2eec:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2ef0:	d7cb           	addal %a3,%a3
    2ef2:	4880           	extw %d0
    2ef4:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2ef8:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2efa:	1800           	moveb %d0,%d4
    2efc:	0604 ffd0      	addib #-48,%d4
    2f00:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2f02:	0c04 0009      	cmpib #9,%d4
    2f06:	63b6           	blss 2ebe <_vsnprintf+0x18a>
    2f08:	6000 ff00      	braw 2e0a <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2f0c:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2f10:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2f14:	1a00           	moveb %d0,%d5
    2f16:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2f1a:	0c05 0009      	cmpib #9,%d5
    2f1e:	6300 02f6      	blsw 3216 <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2f22:	0c00 002a      	cmpib #42,%d0
    2f26:	6700 0334      	beqw 325c <_vsnprintf+0x528>
      format++;
    2f2a:	2848           	moveal %a0,%a4
    precision = 0U;
    2f2c:	7e00           	moveq #0,%d7
    2f2e:	5288           	addql #1,%a0
        format++;
    2f30:	2808           	movel %a0,%d4
    switch (*format) {
    2f32:	0c00 006c      	cmpib #108,%d0
    2f36:	6600 fee6      	bnew 2e1e <_vsnprintf+0xea>
        if (*format == 'l') {
    2f3a:	102c 0001      	moveb %a4@(1),%d0
    2f3e:	0c00 006c      	cmpib #108,%d0
    2f42:	6700 040a      	beqw 334e <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2f46:	0041 0100      	oriw #256,%d1
        format++;
    2f4a:	2844           	moveal %d4,%a4
    2f4c:	528c           	addql #1,%a4
    switch (*format) {
    2f4e:	0c00 0078      	cmpib #120,%d0
    2f52:	6f00 fef6      	blew 2e4a <_vsnprintf+0x116>
    2f56:	6000 0088      	braw 2fe0 <_vsnprintf+0x2ac>
    switch (*format) {
    2f5a:	0c00 007a      	cmpib #122,%d0
    2f5e:	6600 00a2      	bnew 3002 <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2f62:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2f66:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2f6a:	2844           	moveal %d4,%a4
    2f6c:	528c           	addql #1,%a4
    switch (*format) {
    2f6e:	0c00 0078      	cmpib #120,%d0
    2f72:	6f00 fed6      	blew 2e4a <_vsnprintf+0x116>
    2f76:	6068           	bras 2fe0 <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2f78:	2243           	moveal %d3,%a1
    2f7a:	2659           	moveal %a1@+,%a3
    2f7c:	2609           	movel %a1,%d3
      if (w < 0) {
    2f7e:	b6fc 0000      	cmpaw #0,%a3
    2f82:	6d00 0124      	bltw 30a8 <_vsnprintf+0x374>
    if (*format == '.') {
    2f86:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2f8a:	2848           	moveal %a0,%a4
    2f8c:	5288           	addql #1,%a0
    2f8e:	6000 fe7a      	braw 2e0a <_vsnprintf+0xd6>
    out = _out_null;
    2f92:	4bf9 0000 26be 	lea 26be <_out_null>,%a5
  while (*format)
    2f98:	1014           	moveb %a4@,%d0
    2f9a:	95ca           	subal %a2,%a2
    2f9c:	4a00           	tstb %d0
    2f9e:	6600 fdc0      	bnew 2d60 <_vsnprintf+0x2c>
    2fa2:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2fa4:	b5c2           	cmpal %d2,%a2
    2fa6:	6500 fdec      	bcsw 2d94 <_vsnprintf+0x60>
    2faa:	6000 fde4      	braw 2d90 <_vsnprintf+0x5c>
        format++;
    2fae:	2848           	moveal %a0,%a4
    switch (*format) {
    2fb0:	0c00 0063      	cmpib #99,%d0
    2fb4:	6f00 fe9c      	blew 2e52 <_vsnprintf+0x11e>
    2fb8:	1a00           	moveb %d0,%d5
    2fba:	0605 ff9c      	addib #-100,%d5
    2fbe:	0285 0000 00ff 	andil #255,%d5
    2fc4:	7801           	moveq #1,%d4
    2fc6:	ebac           	lsll %d5,%d4
    2fc8:	0284 0012 0821 	andil #1181729,%d4
    2fce:	6652           	bnes 3022 <_vsnprintf+0x2ee>
    2fd0:	0c00 0073      	cmpib #115,%d0
    2fd4:	6700 0140      	beqw 3116 <_vsnprintf+0x3e2>
    2fd8:	0c00 0070      	cmpib #112,%d0
    2fdc:	6700 00e0      	beqw 30be <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2fe0:	280a           	movel %a2,%d4
    2fe2:	5284           	addql #1,%d4
    2fe4:	2f02           	movel %d2,%sp@-
    2fe6:	2f0a           	movel %a2,%sp@-
    2fe8:	2f06           	movel %d6,%sp@-
    2fea:	4880           	extw %d0
    2fec:	3240           	moveaw %d0,%a1
    2fee:	2f09           	movel %a1,%sp@-
    2ff0:	4e95           	jsr %a5@
        break;
    2ff2:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2ff6:	2444           	moveal %d4,%a2
  while (*format)
    2ff8:	1014           	moveb %a4@,%d0
    2ffa:	6600 fd6a      	bnew 2d66 <_vsnprintf+0x32>
    2ffe:	6000 fd8a      	braw 2d8a <_vsnprintf+0x56>
        format++;
    3002:	2848           	moveal %a0,%a4
    switch (*format) {
    3004:	0c00 0078      	cmpib #120,%d0
    3008:	6ed6           	bgts 2fe0 <_vsnprintf+0x2ac>
    300a:	1a00           	moveb %d0,%d5
    300c:	0605 ff9c      	addib #-100,%d5
    3010:	0285 0000 00ff 	andil #255,%d5
    3016:	7801           	moveq #1,%d4
    3018:	ebac           	lsll %d5,%d4
    301a:	0284 0012 0821 	andil #1181729,%d4
    3020:	67ae           	beqs 2fd0 <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    3022:	0c00 006f      	cmpib #111,%d0
    3026:	6700 025c      	beqw 3284 <_vsnprintf+0x550>
    302a:	6e00 03f2      	bgtw 341e <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    302e:	78ef           	moveq #-17,%d4
    3030:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    3032:	0c00 0069      	cmpib #105,%d0
    3036:	6600 045e      	bnew 3496 <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    303a:	0801 000a      	btst #10,%d1
    303e:	6704           	beqs 3044 <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    3040:	78ee           	moveq #-18,%d4
    3042:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    3044:	0804 0009      	btst #9,%d4
    3048:	6600 fd3c      	bnew 2d86 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    304c:	2a03           	movel %d3,%d5
    304e:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    3050:	0804 0008      	btst #8,%d4
    3054:	6600 0470      	bnew 34c6 <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3058:	0804 0006      	btst #6,%d4
    305c:	6600 03e0      	bnew 343e <_vsnprintf+0x70a>
    3060:	4a04           	tstb %d4
    3062:	6a00 04ac      	bplw 3510 <_vsnprintf+0x7dc>
    3066:	2043           	moveal %d3,%a0
    3068:	2010           	movel %a0@,%d0
    306a:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    306c:	2f04           	movel %d4,%sp@-
    306e:	2f0b           	movel %a3,%sp@-
    3070:	2f07           	movel %d7,%sp@-
    3072:	4878 000a      	pea a <DUART_IMR>
    3076:	2200           	movel %d0,%d1
    3078:	d281           	addl %d1,%d1
    307a:	9381           	subxl %d1,%d1
    307c:	4481           	negl %d1
    307e:	2f01           	movel %d1,%sp@-
    3080:	4a80           	tstl %d0
    3082:	6d00 03dc      	bltw 3460 <_vsnprintf+0x72c>
    3086:	2f00           	movel %d0,%sp@-
    3088:	2f02           	movel %d2,%sp@-
    308a:	2f0a           	movel %a2,%sp@-
    308c:	2f06           	movel %d6,%sp@-
    308e:	2f0d           	movel %a5,%sp@-
    3090:	4eb9 0000 26c0 	jsr 26c0 <_ntoa_long>
    3096:	2440           	moveal %d0,%a2
    3098:	4fef 0028      	lea %sp@(40),%sp
    309c:	2605           	movel %d5,%d3
  while (*format)
    309e:	1014           	moveb %a4@,%d0
    30a0:	6600 fcc4      	bnew 2d66 <_vsnprintf+0x32>
    30a4:	6000 fce4      	braw 2d8a <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    30a8:	7002           	moveq #2,%d0
    30aa:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    30ac:	2a0b           	movel %a3,%d5
    30ae:	4485           	negl %d5
    30b0:	2645           	moveal %d5,%a3
    if (*format == '.') {
    30b2:	102c 0001      	moveb %a4@(1),%d0
      format++;
    30b6:	2848           	moveal %a0,%a4
    30b8:	5288           	addql #1,%a0
    30ba:	6000 fd4e      	braw 2e0a <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    30be:	7021           	moveq #33,%d0
    30c0:	8081           	orl %d1,%d0
    30c2:	2f00           	movel %d0,%sp@-
    30c4:	4878 0008      	pea 8 <DUART_ACR>
    30c8:	2f07           	movel %d7,%sp@-
    30ca:	4878 0010      	pea 10 <DUART_MR1B>
    30ce:	42a7           	clrl %sp@-
    30d0:	2043           	moveal %d3,%a0
    30d2:	2f18           	movel %a0@+,%sp@-
    30d4:	2608           	movel %a0,%d3
    30d6:	2f02           	movel %d2,%sp@-
    30d8:	2f0a           	movel %a2,%sp@-
    30da:	2f06           	movel %d6,%sp@-
    30dc:	2f0d           	movel %a5,%sp@-
    30de:	4eb9 0000 26c0 	jsr 26c0 <_ntoa_long>
    30e4:	2440           	moveal %d0,%a2
        break;
    30e6:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    30ea:	1014           	moveb %a4@,%d0
    30ec:	6600 fc78      	bnew 2d66 <_vsnprintf+0x32>
    30f0:	6000 fc98      	braw 2d8a <_vsnprintf+0x56>
        if (*format == 'h') {
    30f4:	102c 0001      	moveb %a4@(1),%d0
    30f8:	0c00 0068      	cmpib #104,%d0
    30fc:	6700 0232      	beqw 3330 <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    3100:	7a7f           	moveq #127,%d5
    3102:	4605           	notb %d5
    3104:	8285           	orl %d5,%d1
        format++;
    3106:	2844           	moveal %d4,%a4
    3108:	528c           	addql #1,%a4
    switch (*format) {
    310a:	0c00 0078      	cmpib #120,%d0
    310e:	6f00 fd3a      	blew 2e4a <_vsnprintf+0x116>
    3112:	6000 fecc      	braw 2fe0 <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    3116:	2f43 0030      	movel %d3,%sp@(48)
    311a:	2243           	moveal %d3,%a1
    311c:	58af 0030      	addql #4,%sp@(48)
    3120:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    3122:	2043           	moveal %d3,%a0
    3124:	1f50 002f      	moveb %a0@,%sp@(47)
    3128:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    312c:	4a87           	tstl %d7
    312e:	6700 0118      	beqw 3248 <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    3132:	4a00           	tstb %d0
    3134:	671a           	beqs 3150 <_vsnprintf+0x41c>
    3136:	2807           	movel %d7,%d4
    3138:	5384           	subql #1,%d4
    313a:	2043           	moveal %d3,%a0
    313c:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    3140:	5288           	addql #1,%a0
    3142:	4a10           	tstb %a0@
    3144:	6700 01e2      	beqw 3328 <_vsnprintf+0x5f4>
    3148:	b1c9           	cmpal %a1,%a0
    314a:	66f4           	bnes 3140 <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    314c:	2809           	movel %a1,%d4
    314e:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    3150:	2a01           	movel %d1,%d5
    3152:	0285 0000 0400 	andil #1024,%d5
    3158:	2245           	moveal %d5,%a1
    315a:	0801 000a      	btst #10,%d1
    315e:	6706           	beqs 3166 <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    3160:	be84           	cmpl %d4,%d7
    3162:	6402           	bccs 3166 <_vsnprintf+0x432>
    3164:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    3166:	7a02           	moveq #2,%d5
    3168:	ca81           	andl %d1,%d5
    316a:	2f45 0034      	movel %d5,%sp@(52)
    316e:	0801 0001      	btst #1,%d1
    3172:	6700 0258      	beqw 33cc <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3176:	4a2f 002f      	tstb %sp@(47)
    317a:	6700 017a      	beqw 32f6 <_vsnprintf+0x5c2>
    317e:	220a           	movel %a2,%d1
    3180:	2a09           	movel %a1,%d5
    3182:	204b           	moveal %a3,%a0
    3184:	2643           	moveal %d3,%a3
    3186:	224c           	moveal %a4,%a1
    3188:	284a           	moveal %a2,%a4
    318a:	2447           	moveal %d7,%a2
    318c:	2e09           	movel %a1,%d7
    318e:	2608           	movel %a0,%d3
    3190:	4a85           	tstl %d5
    3192:	670e           	beqs 31a2 <_vsnprintf+0x46e>
    3194:	41ea ffff      	lea %a2@(-1),%a0
    3198:	b4fc 0000      	cmpaw #0,%a2
    319c:	6700 014c      	beqw 32ea <_vsnprintf+0x5b6>
    31a0:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    31a2:	528c           	addql #1,%a4
    31a4:	528b           	addql #1,%a3
    31a6:	2f02           	movel %d2,%sp@-
    31a8:	2f01           	movel %d1,%sp@-
    31aa:	2f06           	movel %d6,%sp@-
    31ac:	4880           	extw %d0
    31ae:	3240           	moveaw %d0,%a1
    31b0:	2f09           	movel %a1,%sp@-
    31b2:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    31b4:	1013           	moveb %a3@,%d0
    31b6:	4fef 0010      	lea %sp@(16),%sp
    31ba:	6700 012e      	beqw 32ea <_vsnprintf+0x5b6>
    31be:	220c           	movel %a4,%d1
    31c0:	60ce           	bras 3190 <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    31c2:	280a           	movel %a2,%d4
    31c4:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    31c6:	2a03           	movel %d3,%d5
    31c8:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    31ca:	0801 0001      	btst #1,%d1
    31ce:	6700 01b6      	beqw 3386 <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    31d2:	2f02           	movel %d2,%sp@-
    31d4:	2f0a           	movel %a2,%sp@-
    31d6:	2f06           	movel %d6,%sp@-
    31d8:	2043           	moveal %d3,%a0
    31da:	2010           	movel %a0@,%d0
    31dc:	4880           	extw %d0
    31de:	3240           	moveaw %d0,%a1
    31e0:	2f09           	movel %a1,%sp@-
    31e2:	4e95           	jsr %a5@
          while (l++ < width) {
    31e4:	4fef 0010      	lea %sp@(16),%sp
    31e8:	d5cb           	addal %a3,%a2
    31ea:	7001           	moveq #1,%d0
    31ec:	b08b           	cmpl %a3,%d0
    31ee:	6400 02ce      	bccw 34be <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    31f2:	2004           	movel %d4,%d0
    31f4:	5284           	addql #1,%d4
    31f6:	2f02           	movel %d2,%sp@-
    31f8:	2f00           	movel %d0,%sp@-
    31fa:	2f06           	movel %d6,%sp@-
    31fc:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3200:	4e95           	jsr %a5@
          while (l++ < width) {
    3202:	4fef 0010      	lea %sp@(16),%sp
    3206:	b5c4           	cmpal %d4,%a2
    3208:	66e8           	bnes 31f2 <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    320a:	2605           	movel %d5,%d3
  while (*format)
    320c:	1014           	moveb %a4@,%d0
    320e:	6600 fb56      	bnew 2d66 <_vsnprintf+0x32>
    3212:	6000 fb76      	braw 2d8a <_vsnprintf+0x56>
  unsigned int i = 0U;
    3216:	7e00           	moveq #0,%d7
    3218:	2848           	moveal %a0,%a4
    321a:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    321c:	528c           	addql #1,%a4
    321e:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    3222:	d3c9           	addal %a1,%a1
    3224:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    3228:	d1c8           	addal %a0,%a0
    322a:	4880           	extw %d0
    322c:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    3230:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    3232:	1800           	moveb %d0,%d4
    3234:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    3238:	0c04 0009      	cmpib #9,%d4
    323c:	63de           	blss 321c <_vsnprintf+0x4e8>
    323e:	2e08           	movel %a0,%d7
    3240:	41ec 0001      	lea %a4@(1),%a0
    3244:	6000 fbce      	braw 2e14 <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    3248:	4a2f 002f      	tstb %sp@(47)
    324c:	6700 ff02      	beqw 3150 <_vsnprintf+0x41c>
    3250:	78fe           	moveq #-2,%d4
    3252:	2043           	moveal %d3,%a0
    3254:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    3258:	6000 fee6      	braw 3140 <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    325c:	2043           	moveal %d3,%a0
    325e:	2e18           	movel %a0@+,%d7
    3260:	2608           	movel %a0,%d3
    3262:	4a87           	tstl %d7
    3264:	6d0e           	blts 3274 <_vsnprintf+0x540>
    switch (*format) {
    3266:	102c 0002      	moveb %a4@(2),%d0
        format++;
    326a:	548c           	addql #2,%a4
    326c:	41ec 0001      	lea %a4@(1),%a0
    3270:	6000 fba2      	braw 2e14 <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    3274:	7e00           	moveq #0,%d7
    switch (*format) {
    3276:	102c 0002      	moveb %a4@(2),%d0
        format++;
    327a:	548c           	addql #2,%a4
    327c:	41ec 0001      	lea %a4@(1),%a0
    3280:	6000 fb92      	braw 2e14 <_vsnprintf+0xe0>
    switch (*format) {
    3284:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    3288:	0801 000a      	btst #10,%d1
    328c:	6600 00dc      	bnew 336a <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    3290:	70f3           	moveq #-13,%d0
    3292:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    3294:	0801 0009      	btst #9,%d1
    3298:	6600 faec      	bnew 2d86 <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    329c:	2803           	movel %d3,%d4
    329e:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    32a0:	0801 0008      	btst #8,%d1
    32a4:	6600 0242      	bnew 34e8 <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    32a8:	0801 0006      	btst #6,%d1
    32ac:	6600 01d0      	bnew 347e <_vsnprintf+0x74a>
    32b0:	2243           	moveal %d3,%a1
    32b2:	2011           	movel %a1@,%d0
    32b4:	4a01           	tstb %d1
    32b6:	6a06           	bpls 32be <_vsnprintf+0x58a>
    32b8:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    32be:	2f01           	movel %d1,%sp@-
    32c0:	2f0b           	movel %a3,%sp@-
    32c2:	2f07           	movel %d7,%sp@-
    32c4:	2f08           	movel %a0,%sp@-
    32c6:	42a7           	clrl %sp@-
    32c8:	2f00           	movel %d0,%sp@-
    32ca:	2f02           	movel %d2,%sp@-
    32cc:	2f0a           	movel %a2,%sp@-
    32ce:	2f06           	movel %d6,%sp@-
    32d0:	2f0d           	movel %a5,%sp@-
    32d2:	4eb9 0000 26c0 	jsr 26c0 <_ntoa_long>
    32d8:	2440           	moveal %d0,%a2
    32da:	4fef 0028      	lea %sp@(40),%sp
    32de:	2604           	movel %d4,%d3
  while (*format)
    32e0:	1014           	moveb %a4@,%d0
    32e2:	6600 fa82      	bnew 2d66 <_vsnprintf+0x32>
    32e6:	6000 faa2      	braw 2d8a <_vsnprintf+0x56>
    32ea:	2643           	moveal %d3,%a3
    32ec:	244c           	moveal %a4,%a2
    32ee:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    32f0:	4aaf 0034      	tstl %sp@(52)
    32f4:	6724           	beqs 331a <_vsnprintf+0x5e6>
    32f6:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    32f8:	b88b           	cmpl %a3,%d4
    32fa:	641e           	bccs 331a <_vsnprintf+0x5e6>
    32fc:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    3300:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    3302:	2005           	movel %d5,%d0
    3304:	5285           	addql #1,%d5
    3306:	2f02           	movel %d2,%sp@-
    3308:	2f00           	movel %d0,%sp@-
    330a:	2f06           	movel %d6,%sp@-
    330c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3310:	4e95           	jsr %a5@
          while (l++ < width) {
    3312:	4fef 0010      	lea %sp@(16),%sp
    3316:	ba8a           	cmpl %a2,%d5
    3318:	66e8           	bnes 3302 <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    331a:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    331e:	1014           	moveb %a4@,%d0
    3320:	6600 fa44      	bnew 2d66 <_vsnprintf+0x32>
    3324:	6000 fa64      	braw 2d8a <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    3328:	2808           	movel %a0,%d4
    332a:	9883           	subl %d3,%d4
    332c:	6000 fe22      	braw 3150 <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    3330:	703f           	moveq #63,%d0
    3332:	4600           	notb %d0
    3334:	8280           	orl %d0,%d1
          format++;
    3336:	280c           	movel %a4,%d4
    3338:	5484           	addql #2,%d4
    switch (*format) {
    333a:	102c 0002      	moveb %a4@(2),%d0
        format++;
    333e:	2844           	moveal %d4,%a4
    3340:	528c           	addql #1,%a4
    switch (*format) {
    3342:	0c00 0078      	cmpib #120,%d0
    3346:	6f00 fb02      	blew 2e4a <_vsnprintf+0x116>
    334a:	6000 fc94      	braw 2fe0 <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    334e:	0041 0300      	oriw #768,%d1
          format++;
    3352:	280c           	movel %a4,%d4
    3354:	5484           	addql #2,%d4
    switch (*format) {
    3356:	102c 0002      	moveb %a4@(2),%d0
        format++;
    335a:	2844           	moveal %d4,%a4
    335c:	528c           	addql #1,%a4
    switch (*format) {
    335e:	0c00 0078      	cmpib #120,%d0
    3362:	6f00 fae6      	blew 2e4a <_vsnprintf+0x116>
    3366:	6000 fc78      	braw 2fe0 <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    336a:	70f2           	moveq #-14,%d0
    336c:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    336e:	6000 ff24      	braw 3294 <_vsnprintf+0x560>
    switch (*format) {
    3372:	0c00 0058      	cmpib #88,%d0
    3376:	6600 fc68      	bnew 2fe0 <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    337a:	7a20           	moveq #32,%d5
    337c:	8285           	orl %d5,%d1
    337e:	307c 0010      	moveaw #16,%a0
    3382:	6000 ff04      	braw 3288 <_vsnprintf+0x554>
          while (l++ < width) {
    3386:	7001           	moveq #1,%d0
    3388:	b08b           	cmpl %a3,%d0
    338a:	6400 011c      	bccw 34a8 <_vsnprintf+0x774>
    338e:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    3392:	2e08           	movel %a0,%d7
    3394:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    3396:	2004           	movel %d4,%d0
    3398:	5284           	addql #1,%d4
    339a:	2f02           	movel %d2,%sp@-
    339c:	2f00           	movel %d0,%sp@-
    339e:	2f06           	movel %d6,%sp@-
    33a0:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    33a4:	4e95           	jsr %a5@
          while (l++ < width) {
    33a6:	4fef 0010      	lea %sp@(16),%sp
    33aa:	b887           	cmpl %d7,%d4
    33ac:	66e8           	bnes 3396 <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    33ae:	d5cb           	addal %a3,%a2
    33b0:	2f02           	movel %d2,%sp@-
    33b2:	2f07           	movel %d7,%sp@-
    33b4:	2f06           	movel %d6,%sp@-
    33b6:	2243           	moveal %d3,%a1
    33b8:	2011           	movel %a1@,%d0
    33ba:	4880           	extw %d0
    33bc:	3040           	moveaw %d0,%a0
    33be:	2f08           	movel %a0,%sp@-
    33c0:	4e95           	jsr %a5@
    33c2:	4fef 0010      	lea %sp@(16),%sp
    33c6:	2605           	movel %d5,%d3
    33c8:	6000 fe42      	braw 320c <_vsnprintf+0x4d8>
          while (l++ < width) {
    33cc:	b88b           	cmpl %a3,%d4
    33ce:	6400 0162      	bccw 3532 <_vsnprintf+0x7fe>
    33d2:	200b           	movel %a3,%d0
    33d4:	d08a           	addl %a2,%d0
    33d6:	9084           	subl %d4,%d0
    33d8:	2800           	movel %d0,%d4
    33da:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    33dc:	200a           	movel %a2,%d0
    33de:	528a           	addql #1,%a2
    33e0:	2f02           	movel %d2,%sp@-
    33e2:	2f00           	movel %d0,%sp@-
    33e4:	2f06           	movel %d6,%sp@-
    33e6:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    33ea:	4e95           	jsr %a5@
          while (l++ < width) {
    33ec:	4fef 0010      	lea %sp@(16),%sp
    33f0:	b5c4           	cmpal %d4,%a2
    33f2:	66e8           	bnes 33dc <_vsnprintf+0x6a8>
    33f4:	2245           	moveal %d5,%a1
    33f6:	280b           	movel %a3,%d4
    33f8:	5284           	addql #1,%d4
    33fa:	2043           	moveal %d3,%a0
    33fc:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3400:	102f 002f      	moveb %sp@(47),%d0
    3404:	6700 ff14      	beqw 331a <_vsnprintf+0x5e6>
    3408:	220a           	movel %a2,%d1
    340a:	2a09           	movel %a1,%d5
    340c:	204b           	moveal %a3,%a0
    340e:	2643           	moveal %d3,%a3
    3410:	224c           	moveal %a4,%a1
    3412:	284a           	moveal %a2,%a4
    3414:	2447           	moveal %d7,%a2
    3416:	2e09           	movel %a1,%d7
    3418:	2608           	movel %a0,%d3
    341a:	6000 fd74      	braw 3190 <_vsnprintf+0x45c>
    switch (*format) {
    341e:	307c 0010      	moveaw #16,%a0
    3422:	0c00 0078      	cmpib #120,%d0
    3426:	6700 fe60      	beqw 3288 <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    342a:	70ef           	moveq #-17,%d0
    342c:	c280           	andl %d0,%d1
    342e:	307c 000a      	moveaw #10,%a0
    3432:	6000 fe54      	braw 3288 <_vsnprintf+0x554>
    switch (*format) {
    3436:	307c 0002      	moveaw #2,%a0
    343a:	6000 fe4c      	braw 3288 <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    343e:	2243           	moveal %d3,%a1
    3440:	2011           	movel %a1@,%d0
    3442:	4880           	extw %d0
    3444:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3446:	2f04           	movel %d4,%sp@-
    3448:	2f0b           	movel %a3,%sp@-
    344a:	2f07           	movel %d7,%sp@-
    344c:	4878 000a      	pea a <DUART_IMR>
    3450:	2200           	movel %d0,%d1
    3452:	d281           	addl %d1,%d1
    3454:	9381           	subxl %d1,%d1
    3456:	4481           	negl %d1
    3458:	2f01           	movel %d1,%sp@-
    345a:	4a80           	tstl %d0
    345c:	6c00 fc28      	bgew 3086 <_vsnprintf+0x352>
    3460:	4480           	negl %d0
    3462:	2f00           	movel %d0,%sp@-
    3464:	2f02           	movel %d2,%sp@-
    3466:	2f0a           	movel %a2,%sp@-
    3468:	2f06           	movel %d6,%sp@-
    346a:	2f0d           	movel %a5,%sp@-
    346c:	4eb9 0000 26c0 	jsr 26c0 <_ntoa_long>
    3472:	2440           	moveal %d0,%a2
    3474:	4fef 0028      	lea %sp@(40),%sp
    3478:	2605           	movel %d5,%d3
    347a:	6000 fc22      	braw 309e <_vsnprintf+0x36a>
    347e:	7000           	moveq #0,%d0
    3480:	4600           	notb %d0
    3482:	2243           	moveal %d3,%a1
    3484:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    3486:	2f01           	movel %d1,%sp@-
    3488:	2f0b           	movel %a3,%sp@-
    348a:	2f07           	movel %d7,%sp@-
    348c:	2f08           	movel %a0,%sp@-
    348e:	42a7           	clrl %sp@-
    3490:	2f00           	movel %d0,%sp@-
    3492:	6000 fe36      	braw 32ca <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    3496:	0c00 0064      	cmpib #100,%d0
    349a:	6700 fb9e      	beqw 303a <_vsnprintf+0x306>
    349e:	2204           	movel %d4,%d1
    34a0:	307c 000a      	moveaw #10,%a0
    34a4:	6000 fde2      	braw 3288 <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    34a8:	2f02           	movel %d2,%sp@-
    34aa:	2f0a           	movel %a2,%sp@-
    34ac:	2f06           	movel %d6,%sp@-
    34ae:	2043           	moveal %d3,%a0
    34b0:	2010           	movel %a0@,%d0
    34b2:	4880           	extw %d0
    34b4:	3240           	moveaw %d0,%a1
    34b6:	2f09           	movel %a1,%sp@-
    34b8:	4e95           	jsr %a5@
    34ba:	4fef 0010      	lea %sp@(16),%sp
    34be:	2444           	moveal %d4,%a2
    34c0:	2605           	movel %d5,%d3
    34c2:	6000 fd48      	braw 320c <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    34c6:	2043           	moveal %d3,%a0
    34c8:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    34ca:	2f04           	movel %d4,%sp@-
    34cc:	2f0b           	movel %a3,%sp@-
    34ce:	2f07           	movel %d7,%sp@-
    34d0:	4878 000a      	pea a <DUART_IMR>
    34d4:	2200           	movel %d0,%d1
    34d6:	d281           	addl %d1,%d1
    34d8:	9381           	subxl %d1,%d1
    34da:	4481           	negl %d1
    34dc:	2f01           	movel %d1,%sp@-
    34de:	4a80           	tstl %d0
    34e0:	6c00 fba4      	bgew 3086 <_vsnprintf+0x352>
    34e4:	6000 ff7a      	braw 3460 <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    34e8:	2f01           	movel %d1,%sp@-
    34ea:	2f0b           	movel %a3,%sp@-
    34ec:	2f07           	movel %d7,%sp@-
    34ee:	2f08           	movel %a0,%sp@-
    34f0:	42a7           	clrl %sp@-
    34f2:	2043           	moveal %d3,%a0
    34f4:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    34f6:	2f02           	movel %d2,%sp@-
    34f8:	2f0a           	movel %a2,%sp@-
    34fa:	2f06           	movel %d6,%sp@-
    34fc:	2f0d           	movel %a5,%sp@-
    34fe:	4eb9 0000 26c0 	jsr 26c0 <_ntoa_long>
    3504:	2440           	moveal %d0,%a2
    3506:	4fef 0028      	lea %sp@(40),%sp
    350a:	2604           	movel %d4,%d3
        break;
    350c:	6000 fdd2      	braw 32e0 <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3510:	2243           	moveal %d3,%a1
    3512:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3514:	2f04           	movel %d4,%sp@-
    3516:	2f0b           	movel %a3,%sp@-
    3518:	2f07           	movel %d7,%sp@-
    351a:	4878 000a      	pea a <DUART_IMR>
    351e:	2200           	movel %d0,%d1
    3520:	d281           	addl %d1,%d1
    3522:	9381           	subxl %d1,%d1
    3524:	4481           	negl %d1
    3526:	2f01           	movel %d1,%sp@-
    3528:	4a80           	tstl %d0
    352a:	6c00 fb5a      	bgew 3086 <_vsnprintf+0x352>
    352e:	6000 ff30      	braw 3460 <_vsnprintf+0x72c>
          while (l++ < width) {
    3532:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3534:	102f 002f      	moveb %sp@(47),%d0
    3538:	6600 fece      	bnew 3408 <_vsnprintf+0x6d4>
    353c:	6000 fddc      	braw 331a <_vsnprintf+0x5e6>

00003540 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    3540:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    3544:	486e 000c      	pea %fp@(12)
    3548:	2f2e 0008      	movel %fp@(8),%sp@-
    354c:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    3550:	486e ffff      	pea %fp@(-1)
    3554:	4879 0000 2d1c 	pea 2d1c <_out_char>
    355a:	4eb9 0000 2d34 	jsr 2d34 <_vsnprintf>
  va_end(va);
  return ret;
    3560:	4fef 0014      	lea %sp@(20),%sp
}
    3564:	4e5e           	unlk %fp
    3566:	4e75           	rts

00003568 <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    3568:	2f02           	movel %d2,%sp@-
    356a:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    356e:	0c02 000a      	cmpib #10,%d2
    3572:	6714           	beqs 3588 <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    3574:	41f9 0000 3a64 	lea 3a64 <buf>,%a0
    357a:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    357c:	2f48 0008      	movel %a0,%sp@(8)
}
    3580:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    3582:	4ef9 0000 35aa 	jmp 35aa <mcPrint>
    mcPrint(crbuf);
    3588:	4879 0000 3a54 	pea 3a54 <crbuf>
    358e:	4eb9 0000 35aa 	jsr 35aa <mcPrint>
    3594:	588f           	addql #4,%sp
  buf[0] = chr;
    3596:	41f9 0000 3a64 	lea 3a64 <buf>,%a0
    359c:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    359e:	2f48 0008      	movel %a0,%sp@(8)
}
    35a2:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    35a4:	4ef9 0000 35aa 	jmp 35aa <mcPrint>

000035aa <mcPrint>:
    35aa:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    35ae:	206f 0010      	moveal %sp@(16),%a0
    35b2:	7200           	moveq #0,%d1
    35b4:	4e4e           	trap #14
    35b6:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    35ba:	4e75           	rts

000035bc <mcDelaymsec10>:
    35bc:	202f 0004      	movel %sp@(4),%d0
    35c0:	d0b8 040c      	addl 40c <_TIMER_100HZ>,%d0
    35c4:	b0b8 040c      	cmpl 40c <_TIMER_100HZ>,%d0
    35c8:	64fa           	bccs 35c4 <mcDelaymsec10+0x8>
    35ca:	4e75           	rts

000035cc <mcInputchar>:
    35cc:	2f01           	movel %d1,%sp@-
    35ce:	7211           	moveq #17,%d1
    35d0:	4e4e           	trap #14
    35d2:	221f           	movel %sp@+,%d1
    35d4:	4e75           	rts

000035d6 <mcCheckInput>:
    35d6:	2f01           	movel %d1,%sp@-
    35d8:	7212           	moveq #18,%d1
    35da:	4e4e           	trap #14
    35dc:	4880           	extw %d0
    35de:	48c0           	extl %d0
    35e0:	221f           	movel %sp@+,%d1
    35e2:	4e75           	rts

000035e4 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    35e4:	41f9 0000 3a58 	lea 3a58 <lfsr_val>,%a0
    35ea:	b1fc 0000 7278 	cmpal #29304,%a0
    35f0:	641c           	bccs 360e <__kinit+0x2a>
    35f2:	203c 0000 7278 	movel #29304,%d0
    35f8:	0480 0000 3a59 	subil #14937,%d0
    35fe:	72fc           	moveq #-4,%d1
    3600:	c081           	andl %d1,%d0
    3602:	0680 0000 3a5c 	addil #14940,%d0
    3608:	4298           	clrl %a0@+
    360a:	b088           	cmpl %a0,%d0
    360c:	66fa           	bnes 3608 <__kinit+0x24>
}
    360e:	4e75           	rts

00003610 <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    3610:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    3614:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3618:	7200           	moveq #0,%d1
    361a:	3239 0000 3a74 	movew 3a74 <cxa_atexit_count>,%d1
    3620:	2401           	movel %d1,%d2
    3622:	5382           	subql #1,%d2
    3624:	4a81           	tstl %d1
    3626:	6738           	beqs 3660 <__cxa_finalize+0x50>
    3628:	2001           	movel %d1,%d0
    362a:	e788           	lsll #3,%d0
    362c:	2440           	moveal %d0,%a2
    362e:	95c1           	subal %d1,%a2
    3630:	d5ca           	addal %a2,%a2
    3632:	d5fc 0000 3a68 	addal #14952,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3638:	4a83           	tstl %d3
    363a:	662a           	bnes 3666 <__cxa_finalize+0x56>
    363c:	4a2a 000c      	tstb %a2@(12)
    3640:	6610           	bnes 3652 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    3642:	2f2a 0004      	movel %a2@(4),%sp@-
    3646:	2052           	moveal %a2@,%a0
    3648:	4e90           	jsr %a0@
            entry->done = true;
    364a:	157c 0001 000c 	moveb #1,%a2@(12)
    3650:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3652:	45ea fff2      	lea %a2@(-14),%a2
    3656:	51ca ffe0      	dbf %d2,3638 <__cxa_finalize+0x28>
    365a:	4242           	clrw %d2
    365c:	5382           	subql #1,%d2
    365e:	64d8           	bccs 3638 <__cxa_finalize+0x28>
        }
    }
}
    3660:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    3664:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3666:	b6aa 0008      	cmpl %a2@(8),%d3
    366a:	67d0           	beqs 363c <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    366c:	45ea fff2      	lea %a2@(-14),%a2
    3670:	51ca fff4      	dbf %d2,3666 <__cxa_finalize+0x56>
    3674:	4242           	clrw %d2
    3676:	5382           	subql #1,%d2
    3678:	64ec           	bccs 3666 <__cxa_finalize+0x56>
}
    367a:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    367e:	4e75           	rts

00003680 <__udivsi3>:
    3680:	2f02           	movel %d2,%sp@-
    3682:	222f 000c      	movel %sp@(12),%d1
    3686:	202f 0008      	movel %sp@(8),%d0
    368a:	0c81 0001 0000 	cmpil #65536,%d1
    3690:	6416           	bccs 36a8 <L3>
    3692:	2400           	movel %d0,%d2
    3694:	4242           	clrw %d2
    3696:	4842           	swap %d2
    3698:	84c1           	divuw %d1,%d2
    369a:	3002           	movew %d2,%d0
    369c:	4840           	swap %d0
    369e:	342f 000a      	movew %sp@(10),%d2
    36a2:	84c1           	divuw %d1,%d2
    36a4:	3002           	movew %d2,%d0
    36a6:	6030           	bras 36d8 <L6>

000036a8 <L3>:
    36a8:	2401           	movel %d1,%d2

000036aa <L4>:
    36aa:	e289           	lsrl #1,%d1
    36ac:	e288           	lsrl #1,%d0
    36ae:	0c81 0001 0000 	cmpil #65536,%d1
    36b4:	64f4           	bccs 36aa <L4>
    36b6:	80c1           	divuw %d1,%d0
    36b8:	0280 0000 ffff 	andil #65535,%d0
    36be:	2202           	movel %d2,%d1
    36c0:	c2c0           	muluw %d0,%d1
    36c2:	4842           	swap %d2
    36c4:	c4c0           	muluw %d0,%d2
    36c6:	4842           	swap %d2
    36c8:	4a42           	tstw %d2
    36ca:	660a           	bnes 36d6 <L5>
    36cc:	d282           	addl %d2,%d1
    36ce:	6506           	bcss 36d6 <L5>
    36d0:	b2af 0008      	cmpl %sp@(8),%d1
    36d4:	6302           	blss 36d8 <L6>

000036d6 <L5>:
    36d6:	5380           	subql #1,%d0

000036d8 <L6>:
    36d8:	241f           	movel %sp@+,%d2
    36da:	4e75           	rts

000036dc <__umodsi3>:
    36dc:	222f 0008      	movel %sp@(8),%d1
    36e0:	202f 0004      	movel %sp@(4),%d0
    36e4:	2f01           	movel %d1,%sp@-
    36e6:	2f00           	movel %d0,%sp@-
    36e8:	4eb9 0000 3680 	jsr 3680 <__udivsi3>
    36ee:	508f           	addql #8,%sp
    36f0:	222f 0008      	movel %sp@(8),%d1
    36f4:	2f01           	movel %d1,%sp@-
    36f6:	2f00           	movel %d0,%sp@-
    36f8:	4eb9 0000 370c 	jsr 370c <__mulsi3>
    36fe:	508f           	addql #8,%sp
    3700:	222f 0004      	movel %sp@(4),%d1
    3704:	9280           	subl %d0,%d1
    3706:	2001           	movel %d1,%d0
    3708:	4e75           	rts
	...

0000370c <__mulsi3>:
    370c:	302f 0004      	movew %sp@(4),%d0
    3710:	c0ef 000a      	muluw %sp@(10),%d0
    3714:	322f 0006      	movew %sp@(6),%d1
    3718:	c2ef 0008      	muluw %sp@(8),%d1
    371c:	d041           	addw %d1,%d0
    371e:	4840           	swap %d0
    3720:	4240           	clrw %d0
    3722:	322f 0006      	movew %sp@(6),%d1
    3726:	c2ef 000a      	muluw %sp@(10),%d1
    372a:	d081           	addl %d1,%d0
    372c:	4e75           	rts
    372e:	0a1b 5b31      	eorib #49,%a3@+
    3732:	3b33 376d 522f 	movew %a3@(522f)@(0),%a5@-
    3738:	5720           	subqb #3,%a0@-
    373a:	7465           	moveq #101,%d2
    373c:	7374           	.short 0x7374
    373e:	2061           	moveal %a1@-,%a0
    3740:	7420           	moveq #32,%d2
    3742:	6261           	bhis 37a5 <__mulsi3+0x99>
    3744:	7365           	.short 0x7365
    3746:	2061           	moveal %a1@-,%a0
    3748:	6464           	bccs 37ae <__mulsi3+0xa2>
    374a:	7265           	moveq #101,%d1
    374c:	7373           	.short 0x7373
    374e:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3752:	3038 780a      	movew 780a <_bss_end+0x592>,%d0
    3756:	001b 5b31      	orib #49,%a3@+
    375a:	3b33 316d 3078 	movew %a3@(3078)@(0),%a5@-
    3760:	2530 3278      	movel %a0@(78,%d3:w:2),%a2@-
    3764:	2077 7269      	moveal %sp@(69,%d7:w:2),%a0
    3768:	7465           	moveq #101,%d2
    376a:	2069 7320      	moveal %a1@(29472),%a0
    376e:	6261           	bhis 37d1 <__mulsi3+0xc5>
    3770:	643a           	bccs 37ac <__mulsi3+0xa0>
    3772:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3776:	3032 7820      	movew %a2@(20,%d7:l),%d0
    377a:	5b4c           	subqw #5,%a4
    377c:	4154           	.short 0x4154
    377e:	4553           	.short 0x4553
    3780:	5420           	addqb #2,%a0@-
    3782:	5641           	addqw #3,%d1
    3784:	4c55           	.short 0x4c55
    3786:	4520           	.short 0x4520
    3788:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    378c:	3278 5d1b      	moveaw 5d1b <cxa_atexits+0x22a5>,%a1
    3790:	5b30 6d0a 001b 	subqb #5,%a0@(0,%d6:l:4)@(1b)
    3796:	5b31 3b33 326d 	subqb #5,%a1@(326d001b,%d3:l:2)@(5b313b33)
    379c:	001b 5b31 3b33 
    37a2:	316d 0030 7825 	movew %a5@(48),%a0@(30757)
    37a8:	3032 7800      	movew %a2@(0,%d7:l),%d0
    37ac:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    37b0:	3337 6d4c      	movew %sp@(0)@(0),%a1@-
    37b4:	6f77           	bles 382d <__mulsi3+0x121>
    37b6:	2020           	movel %a0@-,%d0
    37b8:	6261           	bhis 381b <__mulsi3+0x10f>
    37ba:	6e6b           	bgts 3827 <__mulsi3+0x11b>
    37bc:	2077 7269      	moveal %sp@(69,%d7:w:2),%a0
    37c0:	7465           	moveq #101,%d2
    37c2:	2061           	moveal %a1@-,%a0
    37c4:	7420           	moveq #32,%d2
    37c6:	6164           	bsrs 382c <__mulsi3+0x120>
    37c8:	6472           	bccs 383c <__mulsi3+0x130>
    37ca:	6573           	bcss 383f <__mulsi3+0x133>
    37cc:	7320           	.short 0x7320
    37ce:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    37d2:	3878 0a00      	moveaw a00 <EFP_CHECKINPUT+0x568>,%a4
    37d6:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    37da:	3337 6d48      	movew %sp@(0),%a1@-
    37de:	6967           	bvss 3847 <__mulsi3+0x13b>
    37e0:	6820           	bvcs 3802 <__mulsi3+0xf6>
    37e2:	6261           	bhis 3845 <__mulsi3+0x139>
    37e4:	6e6b           	bgts 3851 <__mulsi3+0x145>
    37e6:	2077 7269      	moveal %sp@(69,%d7:w:2),%a0
    37ea:	7465           	moveq #101,%d2
    37ec:	2061           	moveal %a1@-,%a0
    37ee:	7420           	moveq #32,%d2
    37f0:	6164           	bsrs 3856 <__mulsi3+0x14a>
    37f2:	6472           	bccs 3866 <__mulsi3+0x15a>
    37f4:	6573           	bcss 3869 <__mulsi3+0x15d>
    37f6:	7320           	.short 0x7320
    37f8:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    37fc:	3878 0a00      	moveaw a00 <EFP_CHECKINPUT+0x568>,%a4
    3800:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    3804:	3337 6d4c      	movew %sp@(0)@(0),%a1@-
    3808:	6f77           	bles 3881 <__mulsi3+0x175>
    380a:	2020           	movel %a0@-,%d0
    380c:	6261           	bhis 386f <__mulsi3+0x163>
    380e:	6e6b           	bgts 387b <__mulsi3+0x16f>
    3810:	2063           	moveal %a3@-,%a0
    3812:	6865           	bvcs 3879 <__mulsi3+0x16d>
    3814:	636b           	blss 3881 <__mulsi3+0x175>
    3816:	2061           	moveal %a1@-,%a0
    3818:	7420           	moveq #32,%d2
    381a:	6164           	bsrs 3880 <__mulsi3+0x174>
    381c:	6472           	bccs 3890 <__mulsi3+0x184>
    381e:	6573           	bcss 3893 <__mulsi3+0x187>
    3820:	7320           	.short 0x7320
    3822:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    3826:	3878 3a20      	moveaw 3a20 <__mulsi3+0x314>,%a4
    382a:	001b 5b31      	orib #49,%a3@+
    382e:	3b33 326d      	movew %a3@(6d,%d3:w:2),%a5@-
    3832:	4f4b           	.short 0x4f4b
    3834:	2020           	movel %a0@-,%d0
    3836:	2030 7825      	movel %a0@(25,%d7:l),%d0
    383a:	3032 781b      	movew %a2@(1b,%d7:l),%d0
    383e:	5b30 6d0a 001b 	subqb #5,%a0@(0,%d6:l:4)@(1b)
    3844:	5b31 3b33 316d 	subqb #5,%a1@(316d4641,%d3:l:2)@(494c2030)
    384a:	4641 494c 2030 
    3850:	7825           	moveq #37,%d4
    3852:	3032 781b      	movew %a2@(1b,%d7:l),%d0
    3856:	5b30 6d0a 001b 	subqb #5,%a0@(0,%d6:l:4)@(1b)
    385c:	5b31 3b33 376d 	subqb #5,%a1@(376d4869,%d3:l:2)@(67682062)
    3862:	4869 6768 2062 
    3868:	616e           	bsrs 38d8 <__mulsi3+0x1cc>
    386a:	6b20           	bmis 388c <__mulsi3+0x180>
    386c:	6368           	blss 38d6 <__mulsi3+0x1ca>
    386e:	6563           	bcss 38d3 <__mulsi3+0x1c7>
    3870:	6b20           	bmis 3892 <__mulsi3+0x186>
    3872:	6174           	bsrs 38e8 <__mulsi3+0x1dc>
    3874:	2061           	moveal %a1@-,%a0
    3876:	6464           	bccs 38dc <__mulsi3+0x1d0>
    3878:	7265           	moveq #101,%d1
    387a:	7373           	.short 0x7373
    387c:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3880:	3038 783a      	movew 783a <_bss_end+0x5c2>,%d0
    3884:	2000           	movel %d0,%d0
    3886:	5b42           	subqw #5,%d2
    3888:	4144           	.short 0x4144
    388a:	5d00           	subqb #6,%d0
    388c:	5b4f           	subqw #5,%sp
    388e:	4b5d           	.short 0x4b5d
    3890:	0043 6f6e      	oriw #28526,%d3
    3894:	7469           	moveq #105,%d2
    3896:	6e75           	bgts 390d <__mulsi3+0x201>
    3898:	6f75           	bles 390f <__mulsi3+0x203>
    389a:	7320           	.short 0x7320
    389c:	7465           	moveq #101,%d2
    389e:	7374           	.short 0x7374
    38a0:	696e           	bvss 3910 <__mulsi3+0x204>
    38a2:	6720           	beqs 38c4 <__mulsi3+0x1b8>
    38a4:	6672           	bnes 3918 <__mulsi3+0x20c>
    38a6:	6f6d           	bles 3915 <__mulsi3+0x209>
    38a8:	2030 7825      	movel %a0@(25,%d7:l),%d0
    38ac:	3036 7820      	movew %fp@(20,%d7:l),%d0
    38b0:	746f           	moveq #111,%d2
    38b2:	2030 7825      	movel %a0@(25,%d7:l),%d0
    38b6:	3036 7820      	movew %fp@(20,%d7:l),%d0
    38ba:	2870 7265      	moveal %a0@(65,%d7:w:2),%a4
    38be:	7373           	.short 0x7373
    38c0:	2061           	moveal %a1@-,%a0
    38c2:	206b 6579      	moveal %a3@(25977),%a0
    38c6:	2074 6f20 6578 	moveal %a4@(6578,%d6:l:8),%a0
    38cc:	6974           	bvss 3942 <__mulsi3+0x236>
    38ce:	290a           	movel %a2,%a4@-
    38d0:	000d           	.short 0x000d
    38d2:	2575 3a25 3032 	movel %a5@(25,%d3:l:2),%a2@(12338)
    38d8:	7520           	.short 0x7520
    38da:	2573 2050 6173 	movel %a3@(50,%d2:w),%a2@(24947)
    38e0:	7320           	.short 0x7320
    38e2:	2325           	movel %a5@-,%a1@-
    38e4:	6420           	bccs 3906 <__mulsi3+0x1fa>
    38e6:	2d20           	movel %a0@-,%fp@-
    38e8:	4669 6c6c      	notw %a1@(27756)
    38ec:	696e           	bvss 395c <__mulsi3+0x250>
    38ee:	6720           	beqs 3910 <__mulsi3+0x204>
    38f0:	776f           	.short 0x776f
    38f2:	7264           	moveq #100,%d1
    38f4:	7320           	.short 0x7320
    38f6:	4020           	negxb %a0@-
    38f8:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    38fc:	3678 2028      	moveaw 2028 <_postinit+0x4>,%a3
    3900:	4c46           	.short 0x4c46
    3902:	5352           	subqw #1,%a2@
    3904:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3908:	3034 7829      	movew %a4@(29,%d7:l),%d0
    390c:	2e2e 2e20      	movel %fp@(11808),%d7
    3910:	2020           	movel %a0@-,%d0
    3912:	2000           	movel %d0,%d0
    3914:	0d25           	btst %d6,%a5@-
    3916:	753a           	.short 0x753a
    3918:	2530 3275      	movel %a0@(75,%d3:w:2),%a2@-
    391c:	2025           	movel %a5@-,%d0
    391e:	7320           	.short 0x7320
    3920:	5061           	addqw #8,%a1@-
    3922:	7373           	.short 0x7373
    3924:	2023           	movel %a3@-,%d0
    3926:	2564 202d      	movel %a4@-,%a2@(8237)
    392a:	2056           	moveal %fp@,%a0
    392c:	6572           	bcss 39a0 <__mulsi3+0x294>
    392e:	6966           	bvss 3996 <__mulsi3+0x28a>
    3930:	7969           	.short 0x7969
    3932:	6e67           	bgts 399b <__mulsi3+0x28f>
    3934:	2077 6f72 6473 	moveal %sp@(64732040)@(2030),%a0
    393a:	2040 2030 
    393e:	7825           	moveq #37,%d4
    3940:	3036 7820      	movew %fp@(20,%d7:l),%d0
    3944:	284c           	moveal %a4,%a4
    3946:	4653           	notw %a3@
    3948:	5220           	addqb #1,%a0@-
    394a:	3078 2530      	moveaw 2530 <memcheck+0x218>,%a0
    394e:	3478 292e      	moveaw 292e <_ntoa_long+0x26e>,%a2
    3952:	2e2e 000d      	movel %fp@(13),%d7
    3956:	203e           	.short 0x203e
    3958:	2045           	moveal %d5,%a0
    395a:	7272           	moveq #114,%d1
    395c:	2025           	movel %a5@-,%d0
    395e:	642c           	bccs 398c <__mulsi3+0x280>
    3960:	2070 6173 7320 	moveal %a0@(73202564)@(2c203078),%a0
    3966:	2564 2c20 3078 
    396c:	2530 3678      	movel %a0@(78,%d3:w:8),%a2@-
    3970:	3d30 7825      	movew %a0@(25,%d7:l),%fp@-
    3974:	3034 7820      	movew %a4@(20,%d7:l),%d0
    3978:	7673           	moveq #115,%d3
    397a:	2030 7825      	movel %a0@(25,%d7:l),%d0
    397e:	3034 7820      	movew %a4@(20,%d7:l),%d0
    3982:	6578           	bcss 39fc <__mulsi3+0x2f0>
    3984:	7065           	moveq #101,%d0
    3986:	6374           	blss 39fc <__mulsi3+0x2f0>
    3988:	6564           	bcss 39ee <__mulsi3+0x2e2>
    398a:	2020           	movel %a0@-,%d0
    398c:	2020           	movel %a0@-,%d0
    398e:	2020           	movel %a0@-,%d0
    3990:	2020           	movel %a0@-,%d0
    3992:	2020           	movel %a0@-,%d0
    3994:	2020           	movel %a0@-,%d0
    3996:	2020           	movel %a0@-,%d0
    3998:	2020           	movel %a0@-,%d0
    399a:	200a           	movel %a2,%d0
    399c:	000a           	.short 0x000a
    399e:	0a54 6573      	eoriw #25971,%a4@
    39a2:	7469           	moveq #105,%d2
    39a4:	6e67           	bgts 3a0d <__mulsi3+0x301>
    39a6:	2066           	moveal %fp@-,%a0
    39a8:	6f72           	bles 3a1c <__mulsi3+0x310>
    39aa:	2025           	movel %a5@-,%d0
    39ac:	753a           	.short 0x753a
    39ae:	2530 3275      	movel %a0@(75,%d3:w:2),%a2@-
    39b2:	2c20           	movel %a0@-,%d6
    39b4:	6d65           	blts 3a1b <__mulsi3+0x30f>
    39b6:	6d63           	blts 3a1b <__mulsi3+0x30f>
    39b8:	6865           	bvcs 3a1f <__mulsi3+0x313>
    39ba:	636b           	blss 3a27 <__mulsi3+0x31b>
    39bc:	2065           	moveal %a5@-,%a0
    39be:	7869           	moveq #105,%d4
    39c0:	7469           	moveq #105,%d2
    39c2:	6e67           	bgts 3a2b <__mulsi3+0x31f>
    39c4:	2e2e 2e0a      	movel %fp@(11786),%d7
    39c8:	0046 4149      	oriw #16713,%d6
    39cc:	4c45           	.short 0x4c45
    39ce:	4421           	negb %a1@-
    39d0:	2025           	movel %a5@-,%d0
    39d2:	6420           	bccs 39f4 <__mulsi3+0x2e8>
    39d4:	6661           	bnes 3a37 <__mulsi3+0x32b>
    39d6:	696c           	bvss 3a44 <__mulsi3+0x338>
    39d8:	6564           	bcss 3a3e <__mulsi3+0x332>
    39da:	2070 6173 7365 	moveal %a0@(7365732c)@(20256420),%a0
    39e0:	732c 2025 6420 
    39e6:	676f           	beqs 3a57 <crbuf+0x3>
    39e8:	6f64           	bles 3a4e <_code_end+0x6>
    39ea:	2028 2564      	movel %a0@(9572),%d0
    39ee:	2077 6f72 6420 	moveal %sp@(64206572)@(726f),%a0
    39f4:	6572 726f 
    39f8:	7273           	moveq #115,%d1
    39fa:	2074 6f74 616c 	moveal %a4@(616c292e)@(0),%a0
    3a00:	292e 
    3a02:	0050 4153      	oriw #16723,%a0@
    3a06:	5345           	subqw #1,%d5
    3a08:	4421           	negb %a1@-
    3a0a:	2025           	movel %a5@-,%d0
    3a0c:	6420           	bccs 3a2e <__mulsi3+0x322>
    3a0e:	6572           	bcss 3a82 <cxa_atexits+0xc>
    3a10:	726f           	moveq #111,%d1
    3a12:	722d           	moveq #45,%d1
    3a14:	6672           	bnes 3a88 <cxa_atexits+0x12>
    3a16:	6565           	bcss 3a7d <cxa_atexits+0x7>
    3a18:	2074 6573 7420 	moveal %a4@(74207061)@(73736573),%a0
    3a1e:	7061 7373 6573 
    3a24:	2e00           	movel %d0,%d7
    3a26:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    3a2a:	3337 6d58      	movew %sp@(0),%a1@-
    3a2e:	6f73           	bles 3aa3 <cxa_atexits+0x2d>
    3a30:	6552           	bcss 3a84 <cxa_atexits+0xe>
    3a32:	414d           	.short 0x414d
    3a34:	201b           	movel %a3@+,%d0
    3a36:	5b30 6d62 7269 	subqb #5,%a0@(7269)@(6e67)
    3a3c:	6e67 
    3a3e:	7570           	.short 0x7570
    3a40:	