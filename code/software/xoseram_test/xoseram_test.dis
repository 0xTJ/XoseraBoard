
xoseram_test.elf:     file format elf32-m68k


Disassembly of section .text.init:

00002000 <_init>:
    2000:	41fa fffe      	lea %pc@(2000 <_init>),%a0
    2004:	43f9 0000 2000 	lea 2000 <_init>,%a1
    200a:	203c 0000 20c4 	movel #8388,%d0
    2010:	9089           	subl %a1,%d0
    2012:	e488           	lsrl #2,%d0
    2014:	5380           	subql #1,%d0
    2016:	22d8           	movel %a0@+,%a1@+
    2018:	51c8 fffc      	dbf %d0,2016 <_init+0x16>
    201c:	4ef9 0000 2024 	jmp 2024 <_postinit>

Disassembly of section .text.postinit:

00002024 <_postinit>:
    2024:	203c 0000 3514 	movel #13588,%d0
    202a:	9089           	subl %a1,%d0
    202c:	e488           	lsrl #2,%d0
    202e:	2200           	movel %d0,%d1
    2030:	4841           	swap %d1
    2032:	6002           	bras 2036 <_postinit+0x12>
    2034:	22d8           	movel %a0@+,%a1@+
    2036:	51c8 fffc      	dbf %d0,2034 <_postinit+0x10>
    203a:	51c9 fff8      	dbf %d1,2034 <_postinit+0x10>

0000203e <_start>:
    203e:	2e78 0414      	moveal 414 <SDB_MEMSIZE>,%sp
    2042:	23f8 0490 0000 	movel 490 <EFP_PROG_EXIT>,3520 <SAVE_PROG_EXIT>
    2048:	3520 
    204a:	21fc 0000 2064 	movel #8292,490 <EFP_PROG_EXIT>
    2050:	0490 
    2052:	41f9 0000 3242 	lea 3242 <__kinit>,%a0
    2058:	4e90           	jsr %a0@
    205a:	6124           	bsrs 2080 <CALL_CTORS>
    205c:	41f9 0000 231a 	lea 231a <kmain>,%a0
    2062:	4e90           	jsr %a0@
    2064:	21f9 0000 3520 	movel 3520 <SAVE_PROG_EXIT>,490 <EFP_PROG_EXIT>
    206a:	0490 
    206c:	42a7           	clrl %sp@-
    206e:	41f9 0000 326e 	lea 326e <__cxa_finalize>,%a0
    2074:	4e90           	jsr %a0@
    2076:	588f           	addql #4,%sp
    2078:	6128           	bsrs 20a2 <CALL_DTORS>
    207a:	2078 0004      	moveal 4 <DUART_CRA>,%a0
    207e:	4ed0           	jmp %a0@

00002080 <CALL_CTORS>:
    2080:	48e7 0038      	moveml %a2-%a4,%sp@-
    2084:	45f9 0000 3510 	lea 3510 <crbuf>,%a2
    208a:	47f9 0000 3510 	lea 3510 <crbuf>,%a3
    2090:	598b           	subql #4,%a3
    2092:	b7ca           	cmpal %a2,%a3
    2094:	6506           	bcss 209c <CALL_CTORS+0x1c>
    2096:	2853           	moveal %a3@,%a4
    2098:	4e94           	jsr %a4@
    209a:	60f4           	bras 2090 <CALL_CTORS+0x10>
    209c:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20a0:	4e75           	rts

000020a2 <CALL_DTORS>:
    20a2:	48e7 0038      	moveml %a2-%a4,%sp@-
    20a6:	45f9 0000 3510 	lea 3510 <crbuf>,%a2
    20ac:	47f9 0000 3510 	lea 3510 <crbuf>,%a3
    20b2:	b5cb           	cmpal %a3,%a2
    20b4:	6708           	beqs 20be <CALL_DTORS+0x1c>
    20b6:	2852           	moveal %a2@,%a4
    20b8:	4e94           	jsr %a4@
    20ba:	588a           	addql #4,%a2
    20bc:	60f4           	bras 20b2 <CALL_DTORS+0x10>
    20be:	4cdf 1c00      	moveml %sp@+,%a2-%a4
    20c2:	4e75           	rts

Disassembly of section .text:

000020c4 <each_megabyte_test>:
#define REG_RAM_HIGH    0xfc1062

//#define ONLY_HIGH8
#define RUN_SIZE    0x100

void each_megabyte_test() {
    20c4:	48e7 3830      	moveml %d2-%d4/%a2-%a3,%sp@-
    volatile uint8_t *ptr;
    
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    20c8:	7810           	moveq #16,%d4
    20ca:	4844           	swap %d4
    20cc:	45f9 0000 31b6 	lea 31b6 <printf_>,%a2
    20d2:	47f9 0000 3232 	lea 3232 <mcDelaymsec10>,%a3
        printf("\n\x1b[1;37mR/W test at base address 0x%08x\n", addr);
    20d8:	2f04           	movel %d4,%sp@-
    20da:	4879 0000 338e 	pea 338e <__mulsi3+0x22>
    20e0:	4e92           	jsr %a2@
    20e2:	508f           	addql #8,%sp
    20e4:	7400           	moveq #0,%d2
    20e6:	4602           	notb %d2
    20e8:	2604           	movel %d4,%d3
    20ea:	d682           	addl %d2,%d3
    20ec:	2043           	moveal %d3,%a0
    20ee:	91c2           	subal %d2,%a0
#ifdef ONLY_HIGH8
            if ((i & 0x0f) < 8) {
                *ptr++ = 0;
            } else {
#endif
                *ptr = 0xff - ((uint8_t)i);
    20f0:	1082           	moveb %d2,%a0@
                uint8_t check = *ptr;
    20f2:	1010           	moveb %a0@,%d0
                if (check != 0xff - ((uint8_t)i)) {
    20f4:	0280 0000 00ff 	andil #255,%d0
    20fa:	b480           	cmpl %d0,%d2
    20fc:	6720           	beqs 211e <each_megabyte_test+0x5a>
                    printf("\x1b[1;31m0x%02x write is bad: 0x%02x [LATEST VALUE 0x%02x]\x1b[0m\n", i, check, *ptr);
    20fe:	1210           	moveb %a0@,%d1
    2100:	0281 0000 00ff 	andil #255,%d1
    2106:	2f01           	movel %d1,%sp@-
    2108:	2f00           	movel %d0,%sp@-
    210a:	7000           	moveq #0,%d0
    210c:	4600           	notb %d0
    210e:	9082           	subl %d2,%d0
    2110:	2f00           	movel %d0,%sp@-
    2112:	4879 0000 33b7 	pea 33b7 <__mulsi3+0x4b>
    2118:	4e92           	jsr %a2@
    211a:	4fef 0010      	lea %sp@(16),%sp
                }
                ptr++;
                mcDelaymsec10(2);
    211e:	4878 0002      	pea 2 <DUART_CSRA>
    2122:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    2124:	588f           	addql #4,%sp
    2126:	51ca ffc4      	dbf %d2,20ec <each_megabyte_test+0x28>
    212a:	4242           	clrw %d2
    212c:	5382           	subql #1,%d2
    212e:	64bc           	bccs 20ec <each_megabyte_test+0x28>
#ifdef ONLY_HIGH8
            }
#endif
        }

        mcDelaymsec10(200);
    2130:	4878 00c8      	pea c8 <R_STOPCNTCMD+0xaa>
    2134:	4e93           	jsr %a3@
    2136:	588f           	addql #4,%sp

        ptr = (uint8_t*)addr;

        for (int i = 0; i < RUN_SIZE; i++) {
    2138:	7400           	moveq #0,%d2
    213a:	2042           	moveal %d2,%a0
    213c:	d1c4           	addal %d4,%a0
            uint8_t val = *ptr++;
    213e:	1610           	moveb %a0@,%d3

            if (val == 0xff - ((uint8_t)i)) {
    2140:	0283 0000 00ff 	andil #255,%d3
    2146:	7000           	moveq #0,%d0
    2148:	4600           	notb %d0
    214a:	9082           	subl %d2,%d0
    214c:	b083           	cmpl %d3,%d0
    214e:	6776           	beqs 21c6 <each_megabyte_test+0x102>
                printf("\x1b[1;32m");
            } else {
                printf("\x1b[1;31m");
    2150:	4879 0000 33fd 	pea 33fd <__mulsi3+0x91>
    2156:	4e92           	jsr %a2@
    2158:	588f           	addql #4,%sp
            }

            printf("0x%02x", val);
    215a:	2f03           	movel %d3,%sp@-
    215c:	4879 0000 3405 	pea 3405 <__mulsi3+0x99>
    2162:	4e92           	jsr %a2@

            if ((i + 1) % 16 == 0) {
    2164:	5282           	addql #1,%d2
    2166:	700f           	moveq #15,%d0
    2168:	c082           	andl %d2,%d0
    216a:	508f           	addql #8,%sp
    216c:	663a           	bnes 21a8 <each_megabyte_test+0xe4>
                printf("\n");
    216e:	4879 0000 33f3 	pea 33f3 <__mulsi3+0x87>
    2174:	4e92           	jsr %a2@
    2176:	588f           	addql #4,%sp
            } else {
                printf("  ");
            }

            mcDelaymsec10(3);
    2178:	4878 0003      	pea 3 <DUART_CSRA+0x1>
    217c:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    217e:	588f           	addql #4,%sp
    2180:	0c82 0000 0100 	cmpil #256,%d2
    2186:	66b2           	bnes 213a <each_megabyte_test+0x76>
        }

        printf("\x1b[0m\n");
    2188:	4879 0000 33ef 	pea 33ef <__mulsi3+0x83>
    218e:	4e92           	jsr %a2@
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2190:	0684 0010 0000 	addil #1048576,%d4
    2196:	588f           	addql #4,%sp
    2198:	0c84 00e0 0000 	cmpil #14680064,%d4
    219e:	6600 ff38      	bnew 20d8 <each_megabyte_test+0x14>
    }
}
    21a2:	4cdf 0c1c      	moveml %sp@+,%d2-%d4/%a2-%a3
    21a6:	4e75           	rts
                printf("  ");
    21a8:	4879 0000 340c 	pea 340c <__mulsi3+0xa0>
    21ae:	4e92           	jsr %a2@
    21b0:	588f           	addql #4,%sp
            mcDelaymsec10(3);
    21b2:	4878 0003      	pea 3 <DUART_CSRA+0x1>
    21b6:	4e93           	jsr %a3@
        for (int i = 0; i < RUN_SIZE; i++) {
    21b8:	588f           	addql #4,%sp
    21ba:	0c82 0000 0100 	cmpil #256,%d2
    21c0:	6600 ff78      	bnew 213a <each_megabyte_test+0x76>
    21c4:	60c2           	bras 2188 <each_megabyte_test+0xc4>
                printf("\x1b[1;32m");
    21c6:	4879 0000 33f5 	pea 33f5 <__mulsi3+0x89>
    21cc:	4e92           	jsr %a2@
    21ce:	588f           	addql #4,%sp
    21d0:	6088           	bras 215a <each_megabyte_test+0x96>

000021d2 <bank_test>:

void bank_test() {
    21d2:	2f0b           	movel %a3,%sp@-
    21d4:	2f0a           	movel %a2,%sp@-
    // Write bottom byte of each MB in each bank
    // Write to set low bank
    volatile uint8_t *ptr = (uint8_t*)REG_RAM_LOW;
    *ptr = 1;
    21d6:	13fc 0001 00fc 	moveb #1,fc1060 <DUART_BASE_R2+0x40fb8>
    21dc:	1060 

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    21de:	267c 0010 0000 	moveal #1048576,%a3
    21e4:	45f9 0000 31b6 	lea 31b6 <printf_>,%a2
        printf("\x1b[1;37mLow  bank write at address 0x%08x\n", addr);
    21ea:	2f0b           	movel %a3,%sp@-
    21ec:	4879 0000 340f 	pea 340f <__mulsi3+0xa3>
    21f2:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        *ptr = 0xa0;
    21f4:	16bc ffa0      	moveb #-96,%a3@
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    21f8:	d7fc 0010 0000 	addal #1048576,%a3
    21fe:	508f           	addql #8,%sp
    2200:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2206:	66e2           	bnes 21ea <bank_test+0x18>
    }

    // Write to set high bank
    ptr = (uint8_t*)REG_RAM_HIGH;
    *ptr = 1;
    2208:	13fc 0001 00fc 	moveb #1,fc1062 <DUART_BASE_R2+0x40fba>
    220e:	1062 
    
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2210:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mHigh bank write at address 0x%08x\n", addr);
    2216:	2f0b           	movel %a3,%sp@-
    2218:	4879 0000 3439 	pea 3439 <__mulsi3+0xcd>
    221e:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        *ptr = 0xc0;
    2220:	16bc ffc0      	moveb #-64,%a3@
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2224:	d7fc 0010 0000 	addal #1048576,%a3
    222a:	508f           	addql #8,%sp
    222c:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2232:	66e2           	bnes 2216 <bank_test+0x44>
    }

    // Read back and check
    printf("\n");
    2234:	4879 0000 33f3 	pea 33f3 <__mulsi3+0x87>
    223a:	4e92           	jsr %a2@
    // Switch back to low bank
    ptr = (uint8_t*)REG_RAM_LOW;
    *ptr = 1;
    223c:	13fc 0001 00fc 	moveb #1,fc1060 <DUART_BASE_R2+0x40fb8>
    2242:	1060 
    2244:	588f           	addql #4,%sp

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2246:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mLow  bank check at address 0x%08x: ", addr);
    224c:	2f0b           	movel %a3,%sp@-
    224e:	4879 0000 3463 	pea 3463 <__mulsi3+0xf7>
    2254:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        if (*ptr == 0xa0) {
    2256:	1013           	moveb %a3@,%d0
    2258:	508f           	addql #8,%sp
    225a:	0c00 ffa0      	cmpib #-96,%d0
    225e:	6700 0092      	beqw 22f2 <bank_test+0x120>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
        } else {
            printf("\x1b[1;31mFAIL 0x%02x\x1b[0m\n", *ptr);
    2262:	1013           	moveb %a3@,%d0
    2264:	0280 0000 00ff 	andil #255,%d0
    226a:	2f00           	movel %d0,%sp@-
    226c:	4879 0000 34a6 	pea 34a6 <__mulsi3+0x13a>
    2272:	4e92           	jsr %a2@
    2274:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2276:	d7fc 0010 0000 	addal #1048576,%a3
    227c:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2282:	66c8           	bnes 224c <bank_test+0x7a>
        }
    }

    // Switch back to high bank
    ptr = (uint8_t*)REG_RAM_HIGH;
    *ptr = 1;
    2284:	13fc 0001 00fc 	moveb #1,fc1062 <DUART_BASE_R2+0x40fba>
    228a:	1062 

    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    228c:	267c 0010 0000 	moveal #1048576,%a3
        printf("\x1b[1;37mHigh bank check at address 0x%08x: ", addr);
    2292:	2f0b           	movel %a3,%sp@-
    2294:	4879 0000 34be 	pea 34be <__mulsi3+0x152>
    229a:	4e92           	jsr %a2@
        ptr = (uint8_t*)addr;
        if (*ptr == 0xc0) {
    229c:	1013           	moveb %a3@,%d0
    229e:	508f           	addql #8,%sp
    22a0:	0c00 ffc0      	cmpib #-64,%d0
    22a4:	6728           	beqs 22ce <bank_test+0xfc>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
        } else {
            printf("\x1b[1;31mFAIL 0x%02x\x1b[0m\n", *ptr);
    22a6:	1013           	moveb %a3@,%d0
    22a8:	0280 0000 00ff 	andil #255,%d0
    22ae:	2f00           	movel %d0,%sp@-
    22b0:	4879 0000 34a6 	pea 34a6 <__mulsi3+0x13a>
    22b6:	4e92           	jsr %a2@
    22b8:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    22ba:	d7fc 0010 0000 	addal #1048576,%a3
    22c0:	b7fc 00e0 0000 	cmpal #14680064,%a3
    22c6:	66ca           	bnes 2292 <bank_test+0xc0>
        }
    }
}
    22c8:	245f           	moveal %sp@+,%a2
    22ca:	265f           	moveal %sp@+,%a3
    22cc:	4e75           	rts
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
    22ce:	1013           	moveb %a3@,%d0
    22d0:	0280 0000 00ff 	andil #255,%d0
    22d6:	2f00           	movel %d0,%sp@-
    22d8:	4879 0000 348e 	pea 348e <__mulsi3+0x122>
    22de:	4e92           	jsr %a2@
    22e0:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    22e2:	d7fc 0010 0000 	addal #1048576,%a3
    22e8:	b7fc 00e0 0000 	cmpal #14680064,%a3
    22ee:	66a2           	bnes 2292 <bank_test+0xc0>
    22f0:	60d6           	bras 22c8 <bank_test+0xf6>
            printf("\x1b[1;32mOK   0x%02x\x1b[0m\n", *ptr);
    22f2:	1013           	moveb %a3@,%d0
    22f4:	0280 0000 00ff 	andil #255,%d0
    22fa:	2f00           	movel %d0,%sp@-
    22fc:	4879 0000 348e 	pea 348e <__mulsi3+0x122>
    2302:	4e92           	jsr %a2@
    2304:	508f           	addql #8,%sp
    for (int addr = 0x100000; addr < 0xe00000; addr += 0x100000) {
    2306:	d7fc 0010 0000 	addal #1048576,%a3
    230c:	b7fc 00e0 0000 	cmpal #14680064,%a3
    2312:	6600 ff38      	bnew 224c <bank_test+0x7a>
    2316:	6000 ff6c      	braw 2284 <bank_test+0xb2>

0000231a <kmain>:

void kmain() {
    printf("\x1b[1;37mXoseRAM \x1b[0mbringup tests\n");
    231a:	4879 0000 34e9 	pea 34e9 <__mulsi3+0x17d>
    2320:	4eb9 0000 31b6 	jsr 31b6 <printf_>

    each_megabyte_test();
    2326:	4eb9 0000 20c4 	jsr 20c4 <each_megabyte_test>
    bank_test();
    232c:	588f           	addql #4,%sp
    232e:	4ef9 0000 21d2 	jmp 21d2 <bank_test>

00002334 <_out_null>:

// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
    2334:	4e75           	rts

00002336 <_ntoa_long>:
}


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
    2336:	4fef ffcc      	lea %sp@(-52),%sp
    233a:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    233e:	246f 0064      	moveal %sp@(100),%a2
    2342:	2a2f 0068      	movel %sp@(104),%d5
    2346:	2c2f 0070      	movel %sp@(112),%d6
    234a:	242f 0074      	movel %sp@(116),%d2
    234e:	262f 007c      	movel %sp@(124),%d3
    2352:	2e2f 0084      	movel %sp@(132),%d7
    2356:	1f6f 007b 003f 	moveb %sp@(123),%sp@(63)
  if (!value) {
    flags &= ~FLAGS_HASH;
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
    235c:	222f 0088      	movel %sp@(136),%d1
    2360:	0281 0000 0400 	andil #1024,%d1
    2366:	2f41 0032      	movel %d1,%sp@(50)
  if (!value) {
    236a:	4a82           	tstl %d2
    236c:	6700 0174      	beqw 24e2 <_ntoa_long+0x1ac>
  if (flags & FLAGS_HASH) {
    2370:	7210           	moveq #16,%d1
    2372:	c2af 0088      	andl %sp@(136),%d1
    2376:	2f41 0036      	movel %d1,%sp@(54)
    237a:	082f 0005 008b 	btst #5,%sp@(139)
    2380:	6600 017e      	bnew 2500 <_ntoa_long+0x1ca>
    2384:	7061           	moveq #97,%d0
    2386:	41ef 0040      	lea %sp@(64),%a0
    238a:	2f48 002e      	movel %a0,%sp@(46)
    238e:	4def 0060      	lea %sp@(96),%fp
    do {
      const char digit = (char)(value % base);
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    2392:	2808           	movel %a0,%d4
    2394:	49f9 0000 333c 	lea 333c <__umodsi3>,%a4
    239a:	47f9 0000 32e0 	lea 32e0 <__udivsi3>,%a3
    23a0:	1200           	moveb %d0,%d1
    23a2:	0601 fff6      	addib #-10,%d1
    23a6:	2f4a 003a      	movel %a2,%sp@(58)
    23aa:	2a45           	moveal %d5,%a5
    23ac:	1a01           	moveb %d1,%d5
      const char digit = (char)(value % base);
    23ae:	2f03           	movel %d3,%sp@-
    23b0:	2f02           	movel %d2,%sp@-
    23b2:	4e94           	jsr %a4@
    23b4:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    23b6:	7209           	moveq #9,%d1
    23b8:	b280           	cmpl %d0,%d1
    23ba:	652a           	bcss 23e6 <_ntoa_long+0xb0>
    23bc:	0600 0030      	addib #48,%d0
    23c0:	2444           	moveal %d4,%a2
    23c2:	14c0           	moveb %d0,%a2@+
      value /= base;
    23c4:	2f03           	movel %d3,%sp@-
    23c6:	2f02           	movel %d2,%sp@-
    23c8:	4e93           	jsr %a3@
    23ca:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    23cc:	b682           	cmpl %d2,%d3
    23ce:	6228           	bhis 23f8 <_ntoa_long+0xc2>
    23d0:	bdca           	cmpal %a2,%fp
    23d2:	6724           	beqs 23f8 <_ntoa_long+0xc2>
    23d4:	280a           	movel %a2,%d4
      value /= base;
    23d6:	2400           	movel %d0,%d2
      const char digit = (char)(value % base);
    23d8:	2f03           	movel %d3,%sp@-
    23da:	2f02           	movel %d2,%sp@-
    23dc:	4e94           	jsr %a4@
    23de:	508f           	addql #8,%sp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    23e0:	7209           	moveq #9,%d1
    23e2:	b280           	cmpl %d0,%d1
    23e4:	64d6           	bccs 23bc <_ntoa_long+0x86>
    23e6:	d005           	addb %d5,%d0
    23e8:	2444           	moveal %d4,%a2
    23ea:	14c0           	moveb %d0,%a2@+
      value /= base;
    23ec:	2f03           	movel %d3,%sp@-
    23ee:	2f02           	movel %d2,%sp@-
    23f0:	4e93           	jsr %a3@
    23f2:	508f           	addql #8,%sp
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
    23f4:	b682           	cmpl %d2,%d3
    23f6:	63d8           	blss 23d0 <_ntoa_long+0x9a>
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    23f8:	246f 003a      	moveal %sp@(58),%a2
    23fc:	2a0d           	movel %a5,%d5
    23fe:	307c 0001      	moveaw #1,%a0
    2402:	91ef 002e      	subal %sp@(46),%a0
    2406:	d888           	addl %a0,%d4
  if (!(flags & FLAGS_LEFT)) {
    2408:	082f 0001 008b 	btst #1,%sp@(139)
    240e:	6700 013e      	beqw 254e <_ntoa_long+0x218>
    2412:	3c7c 0002      	moveaw #2,%fp
  if (flags & FLAGS_HASH) {
    2416:	4aaf 0036      	tstl %sp@(54)
    241a:	6700 023c      	beqw 2658 <_ntoa_long+0x322>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    241e:	4aaf 0032      	tstl %sp@(50)
    2422:	6600 01aa      	bnew 25ce <_ntoa_long+0x298>
    2426:	4a84           	tstl %d4
    2428:	6600 0324      	bnew 274e <_ntoa_long+0x418>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    242c:	7010           	moveq #16,%d0
    242e:	b083           	cmpl %d3,%d0
    2430:	6700 0412      	beqw 2844 <_ntoa_long+0x50e>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2434:	5583           	subql #2,%d3
    2436:	6700 04b0      	beqw 28e8 <_ntoa_long+0x5b2>
      buf[len++] = '0';
    243a:	1f7c 0030 0040 	moveb #48,%sp@(64)
    2440:	202f 0088      	movel %sp@(136),%d0
    2444:	7401           	moveq #1,%d2
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2446:	7203           	moveq #3,%d1
    2448:	c280           	andl %d0,%d1
      buf[len++] = '-';
    244a:	2802           	movel %d2,%d4
    if (negative) {
    244c:	4a2f 003f      	tstb %sp@(63)
    2450:	6700 02dc      	beqw 272e <_ntoa_long+0x3f8>
      buf[len++] = '-';
    2454:	5284           	addql #1,%d4
    2456:	1fbc 002d 2840 	moveb #45,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    245c:	4a81           	tstl %d1
    245e:	6600 0194      	bnew 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2462:	b887           	cmpl %d7,%d4
    2464:	6400 018e      	bccw 25f4 <_ntoa_long+0x2be>
    2468:	242f 006c      	movel %sp@(108),%d2
    246c:	2604           	movel %d4,%d3
    246e:	9682           	subl %d2,%d3
      out(' ', buffer, idx++, maxlen);
    2470:	2002           	movel %d2,%d0
    2472:	5282           	addql #1,%d2
    2474:	2f06           	movel %d6,%sp@-
    2476:	2f00           	movel %d0,%sp@-
    2478:	2f05           	movel %d5,%sp@-
    247a:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    247e:	4e92           	jsr %a2@
    for (size_t i = len; i < width; i++) {
    2480:	2003           	movel %d3,%d0
    2482:	d082           	addl %d2,%d0
    2484:	4fef 0010      	lea %sp@(16),%sp
    2488:	be80           	cmpl %d0,%d7
    248a:	62e4           	bhis 2470 <_ntoa_long+0x13a>
    248c:	2004           	movel %d4,%d0
    248e:	5280           	addql #1,%d0
    2490:	be80           	cmpl %d0,%d7
    2492:	6500 033e      	bcsw 27d2 <_ntoa_long+0x49c>
    2496:	2047           	moveal %d7,%a0
    2498:	5388           	subql #1,%a0
    249a:	91c4           	subal %d4,%a0
    249c:	226f 006c      	moveal %sp@(108),%a1
    24a0:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    24a4:	2609           	movel %a1,%d3
  while (len) {
    24a6:	4a84           	tstl %d4
    24a8:	6600 014e      	bnew 25f8 <_ntoa_long+0x2c2>
    24ac:	2403           	movel %d3,%d2
  if (flags & FLAGS_LEFT) {
    24ae:	bcfc 0000      	cmpaw #0,%fp
    24b2:	6722           	beqs 24d6 <_ntoa_long+0x1a0>
    while (idx - start_idx < width) {
    24b4:	2602           	movel %d2,%d3
    24b6:	96af 006c      	subl %sp@(108),%d3
    24ba:	be83           	cmpl %d3,%d7
    24bc:	6318           	blss 24d6 <_ntoa_long+0x1a0>
      out(' ', buffer, idx++, maxlen);
    24be:	2f06           	movel %d6,%sp@-
    24c0:	2f02           	movel %d2,%sp@-
    24c2:	5282           	addql #1,%d2
    24c4:	2f05           	movel %d5,%sp@-
    24c6:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    24ca:	4e92           	jsr %a2@
    while (idx - start_idx < width) {
    24cc:	5283           	addql #1,%d3
    24ce:	4fef 0010      	lea %sp@(16),%sp
    24d2:	be83           	cmpl %d3,%d7
    24d4:	62e8           	bhis 24be <_ntoa_long+0x188>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
}
    24d6:	2002           	movel %d2,%d0
    24d8:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    24dc:	4fef 0034      	lea %sp@(52),%sp
    24e0:	4e75           	rts
    flags &= ~FLAGS_HASH;
    24e2:	70ef           	moveq #-17,%d0
    24e4:	c0af 0088      	andl %sp@(136),%d0
  if (!(flags & FLAGS_PRECISION) || value) {
    24e8:	4aaf 0032      	tstl %sp@(50)
    24ec:	6640           	bnes 252e <_ntoa_long+0x1f8>
    24ee:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    24f2:	2f40 0088      	movel %d0,%sp@(136)
    24f6:	082f 0005 008b 	btst #5,%sp@(139)
    24fc:	6700 fe86      	beqw 2384 <_ntoa_long+0x4e>
    2500:	7041           	moveq #65,%d0
    2502:	41ef 0040      	lea %sp@(64),%a0
    2506:	2f48 002e      	movel %a0,%sp@(46)
    250a:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
    250e:	2808           	movel %a0,%d4
    2510:	49f9 0000 333c 	lea 333c <__umodsi3>,%a4
    2516:	47f9 0000 32e0 	lea 32e0 <__udivsi3>,%a3
    251c:	1200           	moveb %d0,%d1
    251e:	0601 fff6      	addib #-10,%d1
    2522:	2f4a 003a      	movel %a2,%sp@(58)
    2526:	2a45           	moveal %d5,%a5
    2528:	1a01           	moveb %d1,%d5
    252a:	6000 fe82      	braw 23ae <_ntoa_long+0x78>
  if (!(flags & FLAGS_LEFT)) {
    252e:	7802           	moveq #2,%d4
    2530:	c8af 0088      	andl %sp@(136),%d4
    2534:	082f 0001 008b 	btst #1,%sp@(139)
    253a:	6600 01e0      	bnew 271c <_ntoa_long+0x3e6>
    253e:	42af 0036      	clrl %sp@(54)
    flags &= ~FLAGS_HASH;
    2542:	2f40 0088      	movel %d0,%sp@(136)
  if (!(flags & FLAGS_PRECISION) || value) {
    2546:	2f7c 0000 0400 	movel #1024,%sp@(50)
    254c:	0032 
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    254e:	4a87           	tstl %d7
    2550:	6700 012e      	beqw 2680 <_ntoa_long+0x34a>
    2554:	7001           	moveq #1,%d0
    2556:	c0af 0088      	andl %sp@(136),%d0
    255a:	2c40           	moveal %d0,%fp
    255c:	082f 0000 008b 	btst #0,%sp@(139)
    2562:	6700 0194      	beqw 26f8 <_ntoa_long+0x3c2>
    2566:	4a2f 003f      	tstb %sp@(63)
    256a:	6600 0250      	bnew 27bc <_ntoa_long+0x486>
    256e:	700c           	moveq #12,%d0
    2570:	c0af 0088      	andl %sp@(136),%d0
    2574:	6600 0246      	bnew 27bc <_ntoa_long+0x486>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2578:	b8af 0080      	cmpl %sp@(128),%d4
    257c:	6400 013a      	bccw 26b8 <_ntoa_long+0x382>
    2580:	7020           	moveq #32,%d0
    2582:	b084           	cmpl %d4,%d0
    2584:	6700 030a      	beqw 2890 <_ntoa_long+0x55a>
    2588:	41f7 4840      	lea %sp@(40,%d4:l),%a0
    258c:	202f 0080      	movel %sp@(128),%d0
      buf[len++] = '0';
    2590:	5284           	addql #1,%d4
    2592:	10fc 0030      	moveb #48,%a0@+
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2596:	b880           	cmpl %d0,%d4
    2598:	6400 0116      	bccw 26b0 <_ntoa_long+0x37a>
    259c:	7220           	moveq #32,%d1
    259e:	b284           	cmpl %d4,%d1
    25a0:	66ee           	bnes 2590 <_ntoa_long+0x25a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25a2:	bcfc 0000      	cmpaw #0,%fp
    25a6:	6700 0140      	beqw 26e8 <_ntoa_long+0x3b2>
    25aa:	7020           	moveq #32,%d0
    25ac:	b087           	cmpl %d7,%d0
    25ae:	6400 0138      	bccw 26e8 <_ntoa_long+0x3b2>
  if (flags & FLAGS_HASH) {
    25b2:	4aaf 0036      	tstl %sp@(54)
    25b6:	6700 020a      	beqw 27c2 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    25ba:	4aaf 0032      	tstl %sp@(50)
    25be:	6600 0390      	bnew 2950 <_ntoa_long+0x61a>
    25c2:	7020           	moveq #32,%d0
    25c4:	9dce           	subal %fp,%fp
    25c6:	b0af 0080      	cmpl %sp@(128),%d0
    25ca:	6700 02e8      	beqw 28b4 <_ntoa_long+0x57e>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    25ce:	7003           	moveq #3,%d0
    25d0:	c0af 0088      	andl %sp@(136),%d0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25d4:	7210           	moveq #16,%d1
    25d6:	b283           	cmpl %d3,%d1
    25d8:	6700 0220      	beqw 27fa <_ntoa_long+0x4c4>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    25dc:	5583           	subql #2,%d3
    25de:	6700 01bc      	beqw 279c <_ntoa_long+0x466>
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    25e2:	7220           	moveq #32,%d1
    25e4:	b284           	cmpl %d4,%d1
    25e6:	6666           	bnes 264e <_ntoa_long+0x318>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    25e8:	4a80           	tstl %d0
    25ea:	6608           	bnes 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    25ec:	7220           	moveq #32,%d1
    25ee:	b287           	cmpl %d7,%d1
    25f0:	6500 fe76      	bcsw 2468 <_ntoa_long+0x132>
  if (flags & FLAGS_HASH) {
    25f4:	262f 006c      	movel %sp@(108),%d3
    25f8:	4bef 0040      	lea %sp@(64),%a5
    25fc:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    2600:	d684           	addl %d4,%d3
    2602:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    2606:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2608:	2f06           	movel %d6,%sp@-
    260a:	200c           	movel %a4,%d0
    260c:	908b           	subl %a3,%d0
    260e:	2f00           	movel %d0,%sp@-
    2610:	2f05           	movel %d5,%sp@-
    2612:	1023           	moveb %a3@-,%d0
    2614:	4880           	extw %d0
    2616:	3040           	moveaw %d0,%a0
    2618:	2f08           	movel %a0,%sp@-
    261a:	4e92           	jsr %a2@
  while (len) {
    261c:	4fef 0010      	lea %sp@(16),%sp
    2620:	b7cd           	cmpal %a5,%a3
    2622:	6700 fe8a      	beqw 24ae <_ntoa_long+0x178>
    2626:	2403           	movel %d3,%d2
    out(buf[--len], buffer, idx++, maxlen);
    2628:	2f06           	movel %d6,%sp@-
    262a:	200c           	movel %a4,%d0
    262c:	908b           	subl %a3,%d0
    262e:	2f00           	movel %d0,%sp@-
    2630:	2f05           	movel %d5,%sp@-
    2632:	1023           	moveb %a3@-,%d0
    2634:	4880           	extw %d0
    2636:	3040           	moveaw %d0,%a0
    2638:	2f08           	movel %a0,%sp@-
    263a:	4e92           	jsr %a2@
  while (len) {
    263c:	4fef 0010      	lea %sp@(16),%sp
    2640:	b7cd           	cmpal %a5,%a3
    2642:	66c2           	bnes 2606 <_ntoa_long+0x2d0>
    2644:	6000 fe68      	braw 24ae <_ntoa_long+0x178>
      buf[len++] = 'X';
    2648:	5384           	subql #1,%d4
    264a:	10bc 0058      	moveb #88,%a0@
      buf[len++] = '0';
    264e:	2004           	movel %d4,%d0
    2650:	5284           	addql #1,%d4
    2652:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
  if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2658:	7020           	moveq #32,%d0
    265a:	b084           	cmpl %d4,%d0
    265c:	6600 0134      	bnew 2792 <_ntoa_long+0x45c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2660:	7003           	moveq #3,%d0
    2662:	c0af 0088      	andl %sp@(136),%d0
    2666:	6700 00a8      	beqw 2710 <_ntoa_long+0x3da>
  if (flags & FLAGS_HASH) {
    266a:	262f 006c      	movel %sp@(108),%d3
    266e:	7820           	moveq #32,%d4
    2670:	4bef 0040      	lea %sp@(64),%a5
    2674:	47f5 4800      	lea %a5@(0,%d4:l),%a3
    2678:	d684           	addl %d4,%d3
    267a:	49f5 3800      	lea %a5@(0,%d3:l),%a4
    267e:	6086           	bras 2606 <_ntoa_long+0x2d0>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2680:	b8af 0080      	cmpl %sp@(128),%d4
    2684:	6400 0280      	bccw 2906 <_ntoa_long+0x5d0>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
    2688:	7201           	moveq #1,%d1
    268a:	c2af 0088      	andl %sp@(136),%d1
    268e:	2c41           	moveal %d1,%fp
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2690:	7020           	moveq #32,%d0
    2692:	b084           	cmpl %d4,%d0
    2694:	6600 fef2      	bnew 2588 <_ntoa_long+0x252>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2698:	4a81           	tstl %d1
    269a:	6700 02ba      	beqw 2956 <_ntoa_long+0x620>
  if (flags & FLAGS_HASH) {
    269e:	4aaf 0036      	tstl %sp@(54)
    26a2:	6600 02ba      	bnew 295e <_ntoa_long+0x628>
    26a6:	9dce           	subal %fp,%fp
    26a8:	262f 006c      	movel %sp@(108),%d3
    26ac:	7820           	moveq #32,%d4
    26ae:	60c0           	bras 2670 <_ntoa_long+0x33a>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26b0:	bcfc 0000      	cmpaw #0,%fp
    26b4:	6700 fd60      	beqw 2416 <_ntoa_long+0xe0>
    26b8:	be84           	cmpl %d4,%d7
    26ba:	6300 024a      	blsw 2906 <_ntoa_long+0x5d0>
    26be:	7220           	moveq #32,%d1
    26c0:	b284           	cmpl %d4,%d1
    26c2:	6700 0270      	beqw 2934 <_ntoa_long+0x5fe>
    26c6:	43ef 0040      	lea %sp@(64),%a1
    26ca:	41f1 4800      	lea %a1@(0,%d4:l),%a0
    26ce:	2009           	movel %a1,%d0
    26d0:	d087           	addl %d7,%d0
    26d2:	4def 0060      	lea %sp@(96),%fp
      buf[len++] = '0';
    26d6:	10bc 0030      	moveb #48,%a0@
    26da:	2208           	movel %a0,%d1
    26dc:	5288           	addql #1,%a0
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26de:	b1c0           	cmpal %d0,%a0
    26e0:	6700 0100      	beqw 27e2 <_ntoa_long+0x4ac>
    26e4:	bdc8           	cmpal %a0,%fp
    26e6:	66ee           	bnes 26d6 <_ntoa_long+0x3a0>
  if (flags & FLAGS_HASH) {
    26e8:	4aaf 0036      	tstl %sp@(54)
    26ec:	6700 00d4      	beqw 27c2 <_ntoa_long+0x48c>
    26f0:	9dce           	subal %fp,%fp
    26f2:	7820           	moveq #32,%d4
    26f4:	6000 fd28      	braw 241e <_ntoa_long+0xe8>
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    26f8:	b8af 0080      	cmpl %sp@(128),%d4
    26fc:	6400 fd18      	bccw 2416 <_ntoa_long+0xe0>
    2700:	7220           	moveq #32,%d1
    2702:	b284           	cmpl %d4,%d1
    2704:	6600 fe82      	bnew 2588 <_ntoa_long+0x252>
  if (flags & FLAGS_HASH) {
    2708:	4aaf 0036      	tstl %sp@(54)
    270c:	6600 0250      	bnew 295e <_ntoa_long+0x628>
    for (size_t i = len; i < width; i++) {
    2710:	7820           	moveq #32,%d4
    2712:	b887           	cmpl %d7,%d4
    2714:	6500 fd52      	bcsw 2468 <_ntoa_long+0x132>
    2718:	6000 feda      	braw 25f4 <_ntoa_long+0x2be>
  if (!(flags & FLAGS_LEFT)) {
    271c:	3c7c 0002      	moveaw #2,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2720:	7203           	moveq #3,%d1
    2722:	c280           	andl %d0,%d1
      buf[len++] = '-';
    2724:	2802           	movel %d2,%d4
    if (negative) {
    2726:	4a2f 003f      	tstb %sp@(63)
    272a:	6600 fd28      	bnew 2454 <_ntoa_long+0x11e>
    else if (flags & FLAGS_PLUS) {
    272e:	0800 0002      	btst #2,%d0
    2732:	6700 00e8      	beqw 281c <_ntoa_long+0x4e6>
      buf[len++] = '+';  // ignore the space if the '+' exists
    2736:	5284           	addql #1,%d4
    2738:	1fbc 002b 2840 	moveb #43,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    273e:	4a81           	tstl %d1
    2740:	6600 feb2      	bnew 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2744:	b887           	cmpl %d7,%d4
    2746:	6500 fd20      	bcsw 2468 <_ntoa_long+0x132>
    274a:	6000 fea8      	braw 25f4 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    274e:	b8af 0080      	cmpl %sp@(128),%d4
    2752:	6706           	beqs 275a <_ntoa_long+0x424>
    2754:	be84           	cmpl %d4,%d7
    2756:	6600 fe76      	bnew 25ce <_ntoa_long+0x298>
      len--;
    275a:	2004           	movel %d4,%d0
    275c:	5380           	subql #1,%d0
      if (len && (base == 16U)) {
    275e:	7201           	moveq #1,%d1
    2760:	b284           	cmpl %d4,%d1
    2762:	6700 fcc8      	beqw 242c <_ntoa_long+0xf6>
    2766:	7210           	moveq #16,%d1
    2768:	b283           	cmpl %d3,%d1
    276a:	6700 01a8      	beqw 2914 <_ntoa_long+0x5de>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    276e:	7202           	moveq #2,%d1
      len--;
    2770:	2800           	movel %d0,%d4
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2772:	b283           	cmpl %d3,%d1
    2774:	6600 feda      	bnew 2650 <_ntoa_long+0x31a>
    2778:	7003           	moveq #3,%d0
    277a:	c0af 0088      	andl %sp@(136),%d0
      buf[len++] = 'b';
    277e:	1fbc 0062 4840 	moveb #98,%sp@(40,%d4:l)
    2784:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    2786:	7220           	moveq #32,%d1
    2788:	b284           	cmpl %d4,%d1
    278a:	6700 fe5c      	beqw 25e8 <_ntoa_long+0x2b2>
    278e:	6000 febe      	braw 264e <_ntoa_long+0x318>
    2792:	202f 0088      	movel %sp@(136),%d0
    2796:	2404           	movel %d4,%d2
    2798:	6000 fcac      	braw 2446 <_ntoa_long+0x110>
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    279c:	7220           	moveq #32,%d1
    279e:	b284           	cmpl %d4,%d1
    27a0:	66dc           	bnes 277e <_ntoa_long+0x448>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27a2:	4a80           	tstl %d0
    27a4:	6600 fe4e      	bnew 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    27a8:	7020           	moveq #32,%d0
    27aa:	b087           	cmpl %d7,%d0
    27ac:	6400 fe46      	bccw 25f4 <_ntoa_long+0x2be>
    27b0:	242f 006c      	movel %sp@(108),%d2
    27b4:	2604           	movel %d4,%d3
    27b6:	9682           	subl %d2,%d3
    27b8:	6000 fcb6      	braw 2470 <_ntoa_long+0x13a>
      width--;
    27bc:	5387           	subql #1,%d7
    27be:	6000 fdb8      	braw 2578 <_ntoa_long+0x242>
  if (flags & FLAGS_HASH) {
    27c2:	9dce           	subal %fp,%fp
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    27c4:	7003           	moveq #3,%d0
    27c6:	c0af 0088      	andl %sp@(136),%d0
    27ca:	6600 fe9e      	bnew 266a <_ntoa_long+0x334>
    27ce:	6000 ff40      	braw 2710 <_ntoa_long+0x3da>
    27d2:	91c8           	subal %a0,%a0
    27d4:	226f 006c      	moveal %sp@(108),%a1
    27d8:	43f1 8801      	lea %a1@(1,%a0:l),%a1
    27dc:	2609           	movel %a1,%d3
    27de:	6000 fcc6      	braw 24a6 <_ntoa_long+0x170>
      buf[len++] = '0';
    27e2:	307c 0001      	moveaw #1,%a0
    27e6:	91c9           	subal %a1,%a0
    27e8:	2808           	movel %a0,%d4
    27ea:	d881           	addl %d1,%d4
    27ec:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    27ee:	4aaf 0036      	tstl %sp@(54)
    27f2:	6600 fc2a      	bnew 241e <_ntoa_long+0xe8>
    27f6:	6000 fe60      	braw 2658 <_ntoa_long+0x322>
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    27fa:	7220           	moveq #32,%d1
    27fc:	082f 0005 008b 	btst #5,%sp@(139)
    2802:	6600 00ca      	bnew 28ce <_ntoa_long+0x598>
    2806:	b284           	cmpl %d4,%d1
    2808:	6600 00b0      	bnew 28ba <_ntoa_long+0x584>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    280c:	4a80           	tstl %d0
    280e:	6600 fde4      	bnew 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2812:	b287           	cmpl %d7,%d1
    2814:	6500 fc52      	bcsw 2468 <_ntoa_long+0x132>
    2818:	6000 fdda      	braw 25f4 <_ntoa_long+0x2be>
    else if (flags & FLAGS_SPACE) {
    281c:	0800 0003      	btst #3,%d0
    2820:	6640           	bnes 2862 <_ntoa_long+0x52c>
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    2822:	4a81           	tstl %d1
    2824:	6600 00d8      	bnew 28fe <_ntoa_long+0x5c8>
    for (size_t i = len; i < width; i++) {
    2828:	b487           	cmpl %d7,%d2
    282a:	6500 fc3c      	bcsw 2468 <_ntoa_long+0x132>
  while (len) {
    282e:	4a82           	tstl %d2
    2830:	6600 fdc2      	bnew 25f4 <_ntoa_long+0x2be>
    2834:	242f 006c      	movel %sp@(108),%d2
}
    2838:	2002           	movel %d2,%d0
    283a:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    283e:	4fef 0034      	lea %sp@(52),%sp
    2842:	4e75           	rts
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2844:	082f 0005 008b 	btst #5,%sp@(139)
    284a:	662e           	bnes 287a <_ntoa_long+0x544>
      buf[len++] = 'x';
    284c:	1f7c 0078 0040 	moveb #120,%sp@(64)
      buf[len++] = '0';
    2852:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2858:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    285c:	7402           	moveq #2,%d2
    285e:	6000 fbe6      	braw 2446 <_ntoa_long+0x110>
      buf[len++] = ' ';
    2862:	5284           	addql #1,%d4
    2864:	1fbc 0020 2840 	moveb #32,%sp@(40,%d2:l)
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
    286a:	4a81           	tstl %d1
    286c:	6600 fd86      	bnew 25f4 <_ntoa_long+0x2be>
    for (size_t i = len; i < width; i++) {
    2870:	b887           	cmpl %d7,%d4
    2872:	6500 fbf4      	bcsw 2468 <_ntoa_long+0x132>
    2876:	6000 fd7c      	braw 25f4 <_ntoa_long+0x2be>
      buf[len++] = 'X';
    287a:	1f7c 0058 0040 	moveb #88,%sp@(64)
      buf[len++] = '0';
    2880:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    2886:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    288a:	7402           	moveq #2,%d2
    288c:	6000 fbb8      	braw 2446 <_ntoa_long+0x110>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2890:	7220           	moveq #32,%d1
    2892:	b287           	cmpl %d7,%d1
    2894:	6400 fe08      	bccw 269e <_ntoa_long+0x368>
  if (flags & FLAGS_HASH) {
    2898:	4aaf 0036      	tstl %sp@(54)
    289c:	6700 ff24      	beqw 27c2 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    28a0:	4aaf 0032      	tstl %sp@(50)
    28a4:	6600 00aa      	bnew 2950 <_ntoa_long+0x61a>
    28a8:	7220           	moveq #32,%d1
    28aa:	9dce           	subal %fp,%fp
    28ac:	b2af 0080      	cmpl %sp@(128),%d1
    28b0:	6600 fd1c      	bnew 25ce <_ntoa_long+0x298>
      len--;
    28b4:	701f           	moveq #31,%d0
    28b6:	6000 feae      	braw 2766 <_ntoa_long+0x430>
      buf[len++] = 'x';
    28ba:	1fbc 0078 4840 	moveb #120,%sp@(40,%d4:l)
    28c0:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    28c2:	7220           	moveq #32,%d1
    28c4:	b284           	cmpl %d4,%d1
    28c6:	6700 fd20      	beqw 25e8 <_ntoa_long+0x2b2>
    28ca:	6000 fd82      	braw 264e <_ntoa_long+0x318>
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    28ce:	b284           	cmpl %d4,%d1
    28d0:	6700 fed0      	beqw 27a2 <_ntoa_long+0x46c>
      buf[len++] = 'X';
    28d4:	1fbc 0058 4840 	moveb #88,%sp@(40,%d4:l)
    28da:	5284           	addql #1,%d4
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
    28dc:	7220           	moveq #32,%d1
    28de:	b284           	cmpl %d4,%d1
    28e0:	6700 fd06      	beqw 25e8 <_ntoa_long+0x2b2>
    28e4:	6000 fd68      	braw 264e <_ntoa_long+0x318>
      buf[len++] = 'b';
    28e8:	1f7c 0062 0040 	moveb #98,%sp@(64)
      buf[len++] = '0';
    28ee:	1f7c 0030 0041 	moveb #48,%sp@(65)
  if (!(flags & FLAGS_LEFT)) {
    28f4:	202f 0088      	movel %sp@(136),%d0
      buf[len++] = '0';
    28f8:	7402           	moveq #2,%d2
    28fa:	6000 fb4a      	braw 2446 <_ntoa_long+0x110>
    28fe:	262f 006c      	movel %sp@(108),%d3
    2902:	6000 fba2      	braw 24a6 <_ntoa_long+0x170>
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2906:	9dce           	subal %fp,%fp
  if (flags & FLAGS_HASH) {
    2908:	4aaf 0036      	tstl %sp@(54)
    290c:	6600 fb10      	bnew 241e <_ntoa_long+0xe8>
    2910:	6000 fd46      	braw 2658 <_ntoa_long+0x322>
      buf[len++] = 'x';
    2914:	41f7 483e      	lea %sp@(3e,%d4:l),%a0
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
    2918:	082f 0005 008b 	btst #5,%sp@(139)
    291e:	6600 fd28      	bnew 2648 <_ntoa_long+0x312>
      buf[len++] = 'x';
    2922:	2004           	movel %d4,%d0
    2924:	5380           	subql #1,%d0
    2926:	10bc 0078      	moveb #120,%a0@
      buf[len++] = '0';
    292a:	1fbc 0030 0840 	moveb #48,%sp@(40,%d0:l)
    2930:	6000 fd26      	braw 2658 <_ntoa_long+0x322>
  if (flags & FLAGS_HASH) {
    2934:	4aaf 0036      	tstl %sp@(54)
    2938:	6700 fe88      	beqw 27c2 <_ntoa_long+0x48c>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    293c:	4aaf 0032      	tstl %sp@(50)
    2940:	660e           	bnes 2950 <_ntoa_long+0x61a>
    2942:	7020           	moveq #32,%d0
    2944:	b0af 0080      	cmpl %sp@(128),%d0
    2948:	6738           	beqs 2982 <_ntoa_long+0x64c>
    294a:	7220           	moveq #32,%d1
    294c:	b287           	cmpl %d7,%d1
    294e:	6732           	beqs 2982 <_ntoa_long+0x64c>
    2950:	9dce           	subal %fp,%fp
    2952:	6000 fc7a      	braw 25ce <_ntoa_long+0x298>
  if (flags & FLAGS_HASH) {
    2956:	4aaf 0036      	tstl %sp@(54)
    295a:	6700 fc98      	beqw 25f4 <_ntoa_long+0x2be>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    295e:	4aaf 0032      	tstl %sp@(50)
    2962:	6708           	beqs 296c <_ntoa_long+0x636>
    2964:	9dce           	subal %fp,%fp
    2966:	7820           	moveq #32,%d4
    2968:	6000 fc64      	braw 25ce <_ntoa_long+0x298>
    296c:	7020           	moveq #32,%d0
    296e:	7820           	moveq #32,%d4
    2970:	b0af 0080      	cmpl %sp@(128),%d0
    2974:	6714           	beqs 298a <_ntoa_long+0x654>
    2976:	9dce           	subal %fp,%fp
    2978:	be84           	cmpl %d4,%d7
    297a:	6600 fc52      	bnew 25ce <_ntoa_long+0x298>
    297e:	6000 fdda      	braw 275a <_ntoa_long+0x424>
    2982:	9dce           	subal %fp,%fp
      len--;
    2984:	701f           	moveq #31,%d0
    2986:	6000 fdde      	braw 2766 <_ntoa_long+0x430>
    298a:	701f           	moveq #31,%d0
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
    298c:	9dce           	subal %fp,%fp
    298e:	6000 fdd6      	braw 2766 <_ntoa_long+0x430>

00002992 <_out_char>:
{
    2992:	202f 0004      	movel %sp@(4),%d0
  if (character) {
    2996:	4a00           	tstb %d0
    2998:	6602           	bnes 299c <_out_char+0xa>
}
    299a:	4e75           	rts
    _putchar(character);
    299c:	4880           	extw %d0
    299e:	3040           	moveaw %d0,%a0
    29a0:	2f48 0004      	movel %a0,%sp@(4)
    29a4:	4ef9 0000 31de 	jmp 31de <_putchar>

000029aa <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
    29aa:	4fef fff4      	lea %sp@(-12),%sp
    29ae:	48e7 3f3e      	moveml %d2-%d7/%a2-%fp,%sp@-
    29b2:	2a6f 003c      	moveal %sp@(60),%a5
    29b6:	2c2f 0040      	movel %sp@(64),%d6
    29ba:	242f 0044      	movel %sp@(68),%d2
    29be:	286f 0048      	moveal %sp@(72),%a4
    29c2:	262f 004c      	movel %sp@(76),%d3
  unsigned int flags, width, precision, n;
  size_t idx = 0U;

  if (!buffer) {
    29c6:	4a86           	tstl %d6
    29c8:	6700 023e      	beqw 2c08 <_vsnprintf+0x25e>
    // use null output function
    out = _out_null;
  }

  while (*format)
    29cc:	1014           	moveb %a4@,%d0
    29ce:	95ca           	subal %a2,%a2
    29d0:	4a00           	tstb %d0
    29d2:	6700 0244      	beqw 2c18 <_vsnprintf+0x26e>
    }

    // evaluate flags
    flags = 0U;
    do {
      switch (*format) {
    29d6:	2c7c 0000 2a46 	moveal #10822,%fp
      format++;
    29dc:	528c           	addql #1,%a4
    if (*format != '%') {
    29de:	0c00 0025      	cmpib #37,%d0
    29e2:	6740           	beqs 2a24 <_vsnprintf+0x7a>
      out(*format, buffer, idx++, maxlen);
    29e4:	280a           	movel %a2,%d4
    29e6:	5284           	addql #1,%d4
    29e8:	2f02           	movel %d2,%sp@-
    29ea:	2f0a           	movel %a2,%sp@-
    29ec:	2f06           	movel %d6,%sp@-
    29ee:	4880           	extw %d0
    29f0:	3040           	moveaw %d0,%a0
    29f2:	2f08           	movel %a0,%sp@-
    29f4:	4e95           	jsr %a5@
      continue;
    29f6:	4fef 0010      	lea %sp@(16),%sp
      out(*format, buffer, idx++, maxlen);
    29fa:	2444           	moveal %d4,%a2
  while (*format)
    29fc:	1014           	moveb %a4@,%d0
    29fe:	66dc           	bnes 29dc <_vsnprintf+0x32>

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);

  // return written chars without terminating \0
  return (int)idx;
    2a00:	260a           	movel %a2,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2a02:	b5c2           	cmpal %d2,%a2
    2a04:	6504           	bcss 2a0a <_vsnprintf+0x60>
    2a06:	2442           	moveal %d2,%a2
    2a08:	538a           	subql #1,%a2
    2a0a:	2f02           	movel %d2,%sp@-
    2a0c:	2f0a           	movel %a2,%sp@-
    2a0e:	2f06           	movel %d6,%sp@-
    2a10:	42a7           	clrl %sp@-
    2a12:	4e95           	jsr %a5@
  return (int)idx;
    2a14:	4fef 0010      	lea %sp@(16),%sp
}
    2a18:	2003           	movel %d3,%d0
    2a1a:	4cdf 7cfc      	moveml %sp@+,%d2-%d7/%a2-%fp
    2a1e:	4fef 000c      	lea %sp@(12),%sp
    2a22:	4e75           	rts
    flags = 0U;
    2a24:	7200           	moveq #0,%d1
      switch (*format) {
    2a26:	204c           	moveal %a4,%a0
    2a28:	1018           	moveb %a0@+,%d0
    2a2a:	1800           	moveb %d0,%d4
    2a2c:	0604 ffe0      	addib #-32,%d4
    2a30:	0c04 0010      	cmpib #16,%d4
    2a34:	6232           	bhis 2a68 <_vsnprintf+0xbe>
    2a36:	0284 0000 00ff 	andil #255,%d4
    2a3c:	d884           	addl %d4,%d4
    2a3e:	3276 4800      	moveaw %fp@(0,%d4:l),%a1
    2a42:	4efb 9002      	jmp %pc@(2a46 <_vsnprintf+0x9c>,%a1:w)
    2a46:	00e2           	.short 0x00e2
    2a48:	0022 0022      	orib #34,%a2@-
    2a4c:	00d8           	.short 0x00d8
    2a4e:	0022 0022      	orib #34,%a2@-
    2a52:	0022 0022      	orib #34,%a2@-
    2a56:	0022 0022      	orib #34,%a2@-
    2a5a:	0022 00ce      	orib #-50,%a2@-
    2a5e:	0022 00c4      	orib #-60,%a2@-
    2a62:	0022 0022      	orib #34,%a2@-
    2a66:	00ba           	.short 0x00ba
  return (ch >= '0') && (ch <= '9');
    2a68:	1800           	moveb %d0,%d4
    2a6a:	0604 ffd0      	addib #-48,%d4
    if (_is_digit(*format)) {
    2a6e:	0c04 0009      	cmpib #9,%d4
    2a72:	6300 00be      	blsw 2b32 <_vsnprintf+0x188>
    else if (*format == '*') {
    2a76:	0c00 002a      	cmpib #42,%d0
    2a7a:	6700 0172      	beqw 2bee <_vsnprintf+0x244>
    width = 0U;
    2a7e:	97cb           	subal %a3,%a3
    if (*format == '.') {
    2a80:	0c00 002e      	cmpib #46,%d0
    2a84:	6700 00fc      	beqw 2b82 <_vsnprintf+0x1d8>
    precision = 0U;
    2a88:	7e00           	moveq #0,%d7
        format++;
    2a8a:	2808           	movel %a0,%d4
    switch (*format) {
    2a8c:	0c00 006c      	cmpib #108,%d0
    2a90:	6700 011e      	beqw 2bb0 <_vsnprintf+0x206>
    2a94:	0c00 006c      	cmpib #108,%d0
    2a98:	6e00 0136      	bgtw 2bd0 <_vsnprintf+0x226>
    2a9c:	0c00 0068      	cmpib #104,%d0
    2aa0:	6700 02c8      	beqw 2d6a <_vsnprintf+0x3c0>
    2aa4:	0c00 006a      	cmpib #106,%d0
    2aa8:	6600 017a      	bnew 2c24 <_vsnprintf+0x27a>
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2aac:	0041 0200      	oriw #512,%d1
        if (*format == 'l') {
    2ab0:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2ab4:	2844           	moveal %d4,%a4
    2ab6:	528c           	addql #1,%a4
    switch (*format) {
    2ab8:	0c00 0078      	cmpib #120,%d0
    2abc:	6e00 0198      	bgtw 2c56 <_vsnprintf+0x2ac>
    2ac0:	0c00 0063      	cmpib #99,%d0
    2ac4:	6e00 0168      	bgtw 2c2e <_vsnprintf+0x284>
    2ac8:	0c00 0062      	cmpib #98,%d0
    2acc:	6700 05de      	beqw 30ac <_vsnprintf+0x702>
    2ad0:	0c00 0063      	cmpib #99,%d0
    2ad4:	6700 0362      	beqw 2e38 <_vsnprintf+0x48e>
    2ad8:	0c00 0025      	cmpib #37,%d0
    2adc:	6600 050a      	bnew 2fe8 <_vsnprintf+0x63e>
        out('%', buffer, idx++, maxlen);
    2ae0:	280a           	movel %a2,%d4
    2ae2:	5284           	addql #1,%d4
    2ae4:	2f02           	movel %d2,%sp@-
    2ae6:	2f0a           	movel %a2,%sp@-
    2ae8:	2f06           	movel %d6,%sp@-
    2aea:	4878 0025      	pea 25 <R_STOPCNTCMD+0x7>
    2aee:	4e95           	jsr %a5@
        break;
    2af0:	4fef 0010      	lea %sp@(16),%sp
        out('%', buffer, idx++, maxlen);
    2af4:	2444           	moveal %d4,%a2
  while (*format)
    2af6:	1014           	moveb %a4@,%d0
    2af8:	6600 fee2      	bnew 29dc <_vsnprintf+0x32>
    2afc:	6000 ff02      	braw 2a00 <_vsnprintf+0x56>
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
    2b00:	7001           	moveq #1,%d0
    2b02:	8280           	orl %d0,%d1
  while (*format)
    2b04:	2848           	moveal %a0,%a4
    2b06:	6000 ff1e      	braw 2a26 <_vsnprintf+0x7c>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
    2b0a:	7a02           	moveq #2,%d5
    2b0c:	8285           	orl %d5,%d1
  while (*format)
    2b0e:	2848           	moveal %a0,%a4
    2b10:	6000 ff14      	braw 2a26 <_vsnprintf+0x7c>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
    2b14:	7004           	moveq #4,%d0
    2b16:	8280           	orl %d0,%d1
  while (*format)
    2b18:	2848           	moveal %a0,%a4
    2b1a:	6000 ff0a      	braw 2a26 <_vsnprintf+0x7c>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
    2b1e:	7010           	moveq #16,%d0
    2b20:	8280           	orl %d0,%d1
  while (*format)
    2b22:	2848           	moveal %a0,%a4
    2b24:	6000 ff00      	braw 2a26 <_vsnprintf+0x7c>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
    2b28:	7a08           	moveq #8,%d5
    2b2a:	8285           	orl %d5,%d1
  while (*format)
    2b2c:	2848           	moveal %a0,%a4
    2b2e:	6000 fef6      	braw 2a26 <_vsnprintf+0x7c>
  unsigned int i = 0U;
    2b32:	97cb           	subal %a3,%a3
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2b34:	2848           	moveal %a0,%a4
    2b36:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2b3a:	d3c9           	addal %a1,%a1
    2b3c:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2b40:	d7cb           	addal %a3,%a3
    2b42:	4880           	extw %d0
    2b44:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2b48:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2b4a:	1800           	moveb %d0,%d4
    2b4c:	0604 ffd0      	addib #-48,%d4
    2b50:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2b52:	0c04 0009      	cmpib #9,%d4
    2b56:	6200 ff28      	bhiw 2a80 <_vsnprintf+0xd6>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2b5a:	2848           	moveal %a0,%a4
    2b5c:	43f3 b800      	lea %a3@(0,%a3:l),%a1
    2b60:	d3c9           	addal %a1,%a1
    2b62:	47f1 b800      	lea %a1@(0,%a3:l),%a3
    2b66:	d7cb           	addal %a3,%a3
    2b68:	4880           	extw %d0
    2b6a:	47f3 00d0      	lea %a3@(ffffffffffffffd0,%d0:w),%a3
  while (_is_digit(**str)) {
    2b6e:	1010           	moveb %a0@,%d0
  return (ch >= '0') && (ch <= '9');
    2b70:	1800           	moveb %d0,%d4
    2b72:	0604 ffd0      	addib #-48,%d4
    2b76:	5288           	addql #1,%a0
  while (_is_digit(**str)) {
    2b78:	0c04 0009      	cmpib #9,%d4
    2b7c:	63b6           	blss 2b34 <_vsnprintf+0x18a>
    2b7e:	6000 ff00      	braw 2a80 <_vsnprintf+0xd6>
      flags |= FLAGS_PRECISION;
    2b82:	0041 0400      	oriw #1024,%d1
      if (_is_digit(*format)) {
    2b86:	102c 0001      	moveb %a4@(1),%d0
  return (ch >= '0') && (ch <= '9');
    2b8a:	1a00           	moveb %d0,%d5
    2b8c:	0605 ffd0      	addib #-48,%d5
      if (_is_digit(*format)) {
    2b90:	0c05 0009      	cmpib #9,%d5
    2b94:	6300 02f6      	blsw 2e8c <_vsnprintf+0x4e2>
      else if (*format == '*') {
    2b98:	0c00 002a      	cmpib #42,%d0
    2b9c:	6700 0334      	beqw 2ed2 <_vsnprintf+0x528>
      format++;
    2ba0:	2848           	moveal %a0,%a4
    precision = 0U;
    2ba2:	7e00           	moveq #0,%d7
    2ba4:	5288           	addql #1,%a0
        format++;
    2ba6:	2808           	movel %a0,%d4
    switch (*format) {
    2ba8:	0c00 006c      	cmpib #108,%d0
    2bac:	6600 fee6      	bnew 2a94 <_vsnprintf+0xea>
        if (*format == 'l') {
    2bb0:	102c 0001      	moveb %a4@(1),%d0
    2bb4:	0c00 006c      	cmpib #108,%d0
    2bb8:	6700 040a      	beqw 2fc4 <_vsnprintf+0x61a>
        flags |= FLAGS_LONG;
    2bbc:	0041 0100      	oriw #256,%d1
        format++;
    2bc0:	2844           	moveal %d4,%a4
    2bc2:	528c           	addql #1,%a4
    switch (*format) {
    2bc4:	0c00 0078      	cmpib #120,%d0
    2bc8:	6f00 fef6      	blew 2ac0 <_vsnprintf+0x116>
    2bcc:	6000 0088      	braw 2c56 <_vsnprintf+0x2ac>
    switch (*format) {
    2bd0:	0c00 007a      	cmpib #122,%d0
    2bd4:	6600 00a2      	bnew 2c78 <_vsnprintf+0x2ce>
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
    2bd8:	0041 0100      	oriw #256,%d1
        if (*format == 'l') {
    2bdc:	102c 0001      	moveb %a4@(1),%d0
        format++;
    2be0:	2844           	moveal %d4,%a4
    2be2:	528c           	addql #1,%a4
    switch (*format) {
    2be4:	0c00 0078      	cmpib #120,%d0
    2be8:	6f00 fed6      	blew 2ac0 <_vsnprintf+0x116>
    2bec:	6068           	bras 2c56 <_vsnprintf+0x2ac>
      const int w = va_arg(va, int);
    2bee:	2243           	moveal %d3,%a1
    2bf0:	2659           	moveal %a1@+,%a3
    2bf2:	2609           	movel %a1,%d3
      if (w < 0) {
    2bf4:	b6fc 0000      	cmpaw #0,%a3
    2bf8:	6d00 0124      	bltw 2d1e <_vsnprintf+0x374>
    if (*format == '.') {
    2bfc:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2c00:	2848           	moveal %a0,%a4
    2c02:	5288           	addql #1,%a0
    2c04:	6000 fe7a      	braw 2a80 <_vsnprintf+0xd6>
    out = _out_null;
    2c08:	4bf9 0000 2334 	lea 2334 <_out_null>,%a5
  while (*format)
    2c0e:	1014           	moveb %a4@,%d0
    2c10:	95ca           	subal %a2,%a2
    2c12:	4a00           	tstb %d0
    2c14:	6600 fdc0      	bnew 29d6 <_vsnprintf+0x2c>
    2c18:	7600           	moveq #0,%d3
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
    2c1a:	b5c2           	cmpal %d2,%a2
    2c1c:	6500 fdec      	bcsw 2a0a <_vsnprintf+0x60>
    2c20:	6000 fde4      	braw 2a06 <_vsnprintf+0x5c>
        format++;
    2c24:	2848           	moveal %a0,%a4
    switch (*format) {
    2c26:	0c00 0063      	cmpib #99,%d0
    2c2a:	6f00 fe9c      	blew 2ac8 <_vsnprintf+0x11e>
    2c2e:	1a00           	moveb %d0,%d5
    2c30:	0605 ff9c      	addib #-100,%d5
    2c34:	0285 0000 00ff 	andil #255,%d5
    2c3a:	7801           	moveq #1,%d4
    2c3c:	ebac           	lsll %d5,%d4
    2c3e:	0284 0012 0821 	andil #1181729,%d4
    2c44:	6652           	bnes 2c98 <_vsnprintf+0x2ee>
    2c46:	0c00 0073      	cmpib #115,%d0
    2c4a:	6700 0140      	beqw 2d8c <_vsnprintf+0x3e2>
    2c4e:	0c00 0070      	cmpib #112,%d0
    2c52:	6700 00e0      	beqw 2d34 <_vsnprintf+0x38a>
        out(*format, buffer, idx++, maxlen);
    2c56:	280a           	movel %a2,%d4
    2c58:	5284           	addql #1,%d4
    2c5a:	2f02           	movel %d2,%sp@-
    2c5c:	2f0a           	movel %a2,%sp@-
    2c5e:	2f06           	movel %d6,%sp@-
    2c60:	4880           	extw %d0
    2c62:	3240           	moveaw %d0,%a1
    2c64:	2f09           	movel %a1,%sp@-
    2c66:	4e95           	jsr %a5@
        break;
    2c68:	4fef 0010      	lea %sp@(16),%sp
        out(*format, buffer, idx++, maxlen);
    2c6c:	2444           	moveal %d4,%a2
  while (*format)
    2c6e:	1014           	moveb %a4@,%d0
    2c70:	6600 fd6a      	bnew 29dc <_vsnprintf+0x32>
    2c74:	6000 fd8a      	braw 2a00 <_vsnprintf+0x56>
        format++;
    2c78:	2848           	moveal %a0,%a4
    switch (*format) {
    2c7a:	0c00 0078      	cmpib #120,%d0
    2c7e:	6ed6           	bgts 2c56 <_vsnprintf+0x2ac>
    2c80:	1a00           	moveb %d0,%d5
    2c82:	0605 ff9c      	addib #-100,%d5
    2c86:	0285 0000 00ff 	andil #255,%d5
    2c8c:	7801           	moveq #1,%d4
    2c8e:	ebac           	lsll %d5,%d4
    2c90:	0284 0012 0821 	andil #1181729,%d4
    2c96:	67ae           	beqs 2c46 <_vsnprintf+0x29c>
        if (*format == 'x' || *format == 'X') {
    2c98:	0c00 006f      	cmpib #111,%d0
    2c9c:	6700 025c      	beqw 2efa <_vsnprintf+0x550>
    2ca0:	6e00 03f2      	bgtw 3094 <_vsnprintf+0x6ea>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    2ca4:	78ef           	moveq #-17,%d4
    2ca6:	c881           	andl %d1,%d4
        if ((*format != 'i') && (*format != 'd')) {
    2ca8:	0c00 0069      	cmpib #105,%d0
    2cac:	6600 045e      	bnew 310c <_vsnprintf+0x762>
        if (flags & FLAGS_PRECISION) {
    2cb0:	0801 000a      	btst #10,%d1
    2cb4:	6704           	beqs 2cba <_vsnprintf+0x310>
          flags &= ~FLAGS_ZEROPAD;
    2cb6:	78ee           	moveq #-18,%d4
    2cb8:	c881           	andl %d1,%d4
          if (flags & FLAGS_LONG_LONG) {
    2cba:	0804 0009      	btst #9,%d4
    2cbe:	6600 fd3c      	bnew 29fc <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2cc2:	2a03           	movel %d3,%d5
    2cc4:	5885           	addql #4,%d5
          else if (flags & FLAGS_LONG) {
    2cc6:	0804 0008      	btst #8,%d4
    2cca:	6600 0470      	bnew 313c <_vsnprintf+0x792>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    2cce:	0804 0006      	btst #6,%d4
    2cd2:	6600 03e0      	bnew 30b4 <_vsnprintf+0x70a>
    2cd6:	4a04           	tstb %d4
    2cd8:	6a00 04ac      	bplw 3186 <_vsnprintf+0x7dc>
    2cdc:	2043           	moveal %d3,%a0
    2cde:	2010           	movel %a0@,%d0
    2ce0:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    2ce2:	2f04           	movel %d4,%sp@-
    2ce4:	2f0b           	movel %a3,%sp@-
    2ce6:	2f07           	movel %d7,%sp@-
    2ce8:	4878 000a      	pea a <DUART_IMR>
    2cec:	2200           	movel %d0,%d1
    2cee:	d281           	addl %d1,%d1
    2cf0:	9381           	subxl %d1,%d1
    2cf2:	4481           	negl %d1
    2cf4:	2f01           	movel %d1,%sp@-
    2cf6:	4a80           	tstl %d0
    2cf8:	6d00 03dc      	bltw 30d6 <_vsnprintf+0x72c>
    2cfc:	2f00           	movel %d0,%sp@-
    2cfe:	2f02           	movel %d2,%sp@-
    2d00:	2f0a           	movel %a2,%sp@-
    2d02:	2f06           	movel %d6,%sp@-
    2d04:	2f0d           	movel %a5,%sp@-
    2d06:	4eb9 0000 2336 	jsr 2336 <_ntoa_long>
    2d0c:	2440           	moveal %d0,%a2
    2d0e:	4fef 0028      	lea %sp@(40),%sp
    2d12:	2605           	movel %d5,%d3
  while (*format)
    2d14:	1014           	moveb %a4@,%d0
    2d16:	6600 fcc4      	bnew 29dc <_vsnprintf+0x32>
    2d1a:	6000 fce4      	braw 2a00 <_vsnprintf+0x56>
        flags |= FLAGS_LEFT;    // reverse padding
    2d1e:	7002           	moveq #2,%d0
    2d20:	8280           	orl %d0,%d1
        width = (unsigned int)-w;
    2d22:	2a0b           	movel %a3,%d5
    2d24:	4485           	negl %d5
    2d26:	2645           	moveal %d5,%a3
    if (*format == '.') {
    2d28:	102c 0001      	moveb %a4@(1),%d0
      format++;
    2d2c:	2848           	moveal %a0,%a4
    2d2e:	5288           	addql #1,%a0
    2d30:	6000 fd4e      	braw 2a80 <_vsnprintf+0xd6>
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
    2d34:	7021           	moveq #33,%d0
    2d36:	8081           	orl %d1,%d0
    2d38:	2f00           	movel %d0,%sp@-
    2d3a:	4878 0008      	pea 8 <DUART_ACR>
    2d3e:	2f07           	movel %d7,%sp@-
    2d40:	4878 0010      	pea 10 <DUART_MR1B>
    2d44:	42a7           	clrl %sp@-
    2d46:	2043           	moveal %d3,%a0
    2d48:	2f18           	movel %a0@+,%sp@-
    2d4a:	2608           	movel %a0,%d3
    2d4c:	2f02           	movel %d2,%sp@-
    2d4e:	2f0a           	movel %a2,%sp@-
    2d50:	2f06           	movel %d6,%sp@-
    2d52:	2f0d           	movel %a5,%sp@-
    2d54:	4eb9 0000 2336 	jsr 2336 <_ntoa_long>
    2d5a:	2440           	moveal %d0,%a2
        break;
    2d5c:	4fef 0028      	lea %sp@(40),%sp
  while (*format)
    2d60:	1014           	moveb %a4@,%d0
    2d62:	6600 fc78      	bnew 29dc <_vsnprintf+0x32>
    2d66:	6000 fc98      	braw 2a00 <_vsnprintf+0x56>
        if (*format == 'h') {
    2d6a:	102c 0001      	moveb %a4@(1),%d0
    2d6e:	0c00 0068      	cmpib #104,%d0
    2d72:	6700 0232      	beqw 2fa6 <_vsnprintf+0x5fc>
        flags |= FLAGS_SHORT;
    2d76:	7a7f           	moveq #127,%d5
    2d78:	4605           	notb %d5
    2d7a:	8285           	orl %d5,%d1
        format++;
    2d7c:	2844           	moveal %d4,%a4
    2d7e:	528c           	addql #1,%a4
    switch (*format) {
    2d80:	0c00 0078      	cmpib #120,%d0
    2d84:	6f00 fd3a      	blew 2ac0 <_vsnprintf+0x116>
    2d88:	6000 fecc      	braw 2c56 <_vsnprintf+0x2ac>
        const char* p = va_arg(va, char*);
    2d8c:	2f43 0030      	movel %d3,%sp@(48)
    2d90:	2243           	moveal %d3,%a1
    2d92:	58af 0030      	addql #4,%sp@(48)
    2d96:	2619           	movel %a1@+,%d3
  for (s = str; *s && maxsize--; ++s);
    2d98:	2043           	moveal %d3,%a0
    2d9a:	1f50 002f      	moveb %a0@,%sp@(47)
    2d9e:	102f 002f      	moveb %sp@(47),%d0
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
    2da2:	4a87           	tstl %d7
    2da4:	6700 0118      	beqw 2ebe <_vsnprintf+0x514>
  for (s = str; *s && maxsize--; ++s);
    2da8:	4a00           	tstb %d0
    2daa:	671a           	beqs 2dc6 <_vsnprintf+0x41c>
    2dac:	2807           	movel %d7,%d4
    2dae:	5384           	subql #1,%d4
    2db0:	2043           	moveal %d3,%a0
    2db2:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2db6:	5288           	addql #1,%a0
    2db8:	4a10           	tstb %a0@
    2dba:	6700 01e2      	beqw 2f9e <_vsnprintf+0x5f4>
    2dbe:	b1c9           	cmpal %a1,%a0
    2dc0:	66f4           	bnes 2db6 <_vsnprintf+0x40c>
  return (unsigned int)(s - str);
    2dc2:	2809           	movel %a1,%d4
    2dc4:	9883           	subl %d3,%d4
        if (flags & FLAGS_PRECISION) {
    2dc6:	2a01           	movel %d1,%d5
    2dc8:	0285 0000 0400 	andil #1024,%d5
    2dce:	2245           	moveal %d5,%a1
    2dd0:	0801 000a      	btst #10,%d1
    2dd4:	6706           	beqs 2ddc <_vsnprintf+0x432>
          l = (l < precision ? l : precision);
    2dd6:	be84           	cmpl %d4,%d7
    2dd8:	6402           	bccs 2ddc <_vsnprintf+0x432>
    2dda:	2807           	movel %d7,%d4
        if (!(flags & FLAGS_LEFT)) {
    2ddc:	7a02           	moveq #2,%d5
    2dde:	ca81           	andl %d1,%d5
    2de0:	2f45 0034      	movel %d5,%sp@(52)
    2de4:	0801 0001      	btst #1,%d1
    2de8:	6700 0258      	beqw 3042 <_vsnprintf+0x698>
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2dec:	4a2f 002f      	tstb %sp@(47)
    2df0:	6700 017a      	beqw 2f6c <_vsnprintf+0x5c2>
    2df4:	220a           	movel %a2,%d1
    2df6:	2a09           	movel %a1,%d5
    2df8:	204b           	moveal %a3,%a0
    2dfa:	2643           	moveal %d3,%a3
    2dfc:	224c           	moveal %a4,%a1
    2dfe:	284a           	moveal %a2,%a4
    2e00:	2447           	moveal %d7,%a2
    2e02:	2e09           	movel %a1,%d7
    2e04:	2608           	movel %a0,%d3
    2e06:	4a85           	tstl %d5
    2e08:	670e           	beqs 2e18 <_vsnprintf+0x46e>
    2e0a:	41ea ffff      	lea %a2@(-1),%a0
    2e0e:	b4fc 0000      	cmpaw #0,%a2
    2e12:	6700 014c      	beqw 2f60 <_vsnprintf+0x5b6>
    2e16:	2448           	moveal %a0,%a2
          out(*(p++), buffer, idx++, maxlen);
    2e18:	528c           	addql #1,%a4
    2e1a:	528b           	addql #1,%a3
    2e1c:	2f02           	movel %d2,%sp@-
    2e1e:	2f01           	movel %d1,%sp@-
    2e20:	2f06           	movel %d6,%sp@-
    2e22:	4880           	extw %d0
    2e24:	3240           	moveaw %d0,%a1
    2e26:	2f09           	movel %a1,%sp@-
    2e28:	4e95           	jsr %a5@
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    2e2a:	1013           	moveb %a3@,%d0
    2e2c:	4fef 0010      	lea %sp@(16),%sp
    2e30:	6700 012e      	beqw 2f60 <_vsnprintf+0x5b6>
    2e34:	220c           	movel %a4,%d1
    2e36:	60ce           	bras 2e06 <_vsnprintf+0x45c>
      out(*format, buffer, idx++, maxlen);
    2e38:	280a           	movel %a2,%d4
    2e3a:	5284           	addql #1,%d4
            const long value = va_arg(va, long);
    2e3c:	2a03           	movel %d3,%d5
    2e3e:	5885           	addql #4,%d5
        if (!(flags & FLAGS_LEFT)) {
    2e40:	0801 0001      	btst #1,%d1
    2e44:	6700 01b6      	beqw 2ffc <_vsnprintf+0x652>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2e48:	2f02           	movel %d2,%sp@-
    2e4a:	2f0a           	movel %a2,%sp@-
    2e4c:	2f06           	movel %d6,%sp@-
    2e4e:	2043           	moveal %d3,%a0
    2e50:	2010           	movel %a0@,%d0
    2e52:	4880           	extw %d0
    2e54:	3240           	moveaw %d0,%a1
    2e56:	2f09           	movel %a1,%sp@-
    2e58:	4e95           	jsr %a5@
          while (l++ < width) {
    2e5a:	4fef 0010      	lea %sp@(16),%sp
    2e5e:	d5cb           	addal %a3,%a2
    2e60:	7001           	moveq #1,%d0
    2e62:	b08b           	cmpl %a3,%d0
    2e64:	6400 02ce      	bccw 3134 <_vsnprintf+0x78a>
            out(' ', buffer, idx++, maxlen);
    2e68:	2004           	movel %d4,%d0
    2e6a:	5284           	addql #1,%d4
    2e6c:	2f02           	movel %d2,%sp@-
    2e6e:	2f00           	movel %d0,%sp@-
    2e70:	2f06           	movel %d6,%sp@-
    2e72:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2e76:	4e95           	jsr %a5@
          while (l++ < width) {
    2e78:	4fef 0010      	lea %sp@(16),%sp
    2e7c:	b5c4           	cmpal %d4,%a2
    2e7e:	66e8           	bnes 2e68 <_vsnprintf+0x4be>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    2e80:	2605           	movel %d5,%d3
  while (*format)
    2e82:	1014           	moveb %a4@,%d0
    2e84:	6600 fb56      	bnew 29dc <_vsnprintf+0x32>
    2e88:	6000 fb76      	braw 2a00 <_vsnprintf+0x56>
  unsigned int i = 0U;
    2e8c:	7e00           	moveq #0,%d7
    2e8e:	2848           	moveal %a0,%a4
    2e90:	2047           	moveal %d7,%a0
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
    2e92:	528c           	addql #1,%a4
    2e94:	43f0 8800      	lea %a0@(0,%a0:l),%a1
    2e98:	d3c9           	addal %a1,%a1
    2e9a:	41f1 8800      	lea %a1@(0,%a0:l),%a0
    2e9e:	d1c8           	addal %a0,%a0
    2ea0:	4880           	extw %d0
    2ea2:	41f0 00d0      	lea %a0@(ffffffffffffffd0,%d0:w),%a0
  while (_is_digit(**str)) {
    2ea6:	1014           	moveb %a4@,%d0
  return (ch >= '0') && (ch <= '9');
    2ea8:	1800           	moveb %d0,%d4
    2eaa:	0604 ffd0      	addib #-48,%d4
  while (_is_digit(**str)) {
    2eae:	0c04 0009      	cmpib #9,%d4
    2eb2:	63de           	blss 2e92 <_vsnprintf+0x4e8>
    2eb4:	2e08           	movel %a0,%d7
    2eb6:	41ec 0001      	lea %a4@(1),%a0
    2eba:	6000 fbce      	braw 2a8a <_vsnprintf+0xe0>
  for (s = str; *s && maxsize--; ++s);
    2ebe:	4a2f 002f      	tstb %sp@(47)
    2ec2:	6700 ff02      	beqw 2dc6 <_vsnprintf+0x41c>
    2ec6:	78fe           	moveq #-2,%d4
    2ec8:	2043           	moveal %d3,%a0
    2eca:	43f0 4801      	lea %a0@(1,%d4:l),%a1
    2ece:	6000 fee6      	braw 2db6 <_vsnprintf+0x40c>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2ed2:	2043           	moveal %d3,%a0
    2ed4:	2e18           	movel %a0@+,%d7
    2ed6:	2608           	movel %a0,%d3
    2ed8:	4a87           	tstl %d7
    2eda:	6d0e           	blts 2eea <_vsnprintf+0x540>
    switch (*format) {
    2edc:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2ee0:	548c           	addql #2,%a4
    2ee2:	41ec 0001      	lea %a4@(1),%a0
    2ee6:	6000 fba2      	braw 2a8a <_vsnprintf+0xe0>
        precision = prec > 0 ? (unsigned int)prec : 0U;
    2eea:	7e00           	moveq #0,%d7
    switch (*format) {
    2eec:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2ef0:	548c           	addql #2,%a4
    2ef2:	41ec 0001      	lea %a4@(1),%a0
    2ef6:	6000 fb92      	braw 2a8a <_vsnprintf+0xe0>
    switch (*format) {
    2efa:	307c 0008      	moveaw #8,%a0
        if (flags & FLAGS_PRECISION) {
    2efe:	0801 000a      	btst #10,%d1
    2f02:	6600 00dc      	bnew 2fe0 <_vsnprintf+0x636>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
    2f06:	70f3           	moveq #-13,%d0
    2f08:	c280           	andl %d0,%d1
          if (flags & FLAGS_LONG_LONG) {
    2f0a:	0801 0009      	btst #9,%d1
    2f0e:	6600 faec      	bnew 29fc <_vsnprintf+0x52>
            const long value = va_arg(va, long);
    2f12:	2803           	movel %d3,%d4
    2f14:	5884           	addql #4,%d4
          else if (flags & FLAGS_LONG) {
    2f16:	0801 0008      	btst #8,%d1
    2f1a:	6600 0242      	bnew 315e <_vsnprintf+0x7b4>
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
    2f1e:	0801 0006      	btst #6,%d1
    2f22:	6600 01d0      	bnew 30f4 <_vsnprintf+0x74a>
    2f26:	2243           	moveal %d3,%a1
    2f28:	2011           	movel %a1@,%d0
    2f2a:	4a01           	tstb %d1
    2f2c:	6a06           	bpls 2f34 <_vsnprintf+0x58a>
    2f2e:	0280 0000 ffff 	andil #65535,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    2f34:	2f01           	movel %d1,%sp@-
    2f36:	2f0b           	movel %a3,%sp@-
    2f38:	2f07           	movel %d7,%sp@-
    2f3a:	2f08           	movel %a0,%sp@-
    2f3c:	42a7           	clrl %sp@-
    2f3e:	2f00           	movel %d0,%sp@-
    2f40:	2f02           	movel %d2,%sp@-
    2f42:	2f0a           	movel %a2,%sp@-
    2f44:	2f06           	movel %d6,%sp@-
    2f46:	2f0d           	movel %a5,%sp@-
    2f48:	4eb9 0000 2336 	jsr 2336 <_ntoa_long>
    2f4e:	2440           	moveal %d0,%a2
    2f50:	4fef 0028      	lea %sp@(40),%sp
    2f54:	2604           	movel %d4,%d3
  while (*format)
    2f56:	1014           	moveb %a4@,%d0
    2f58:	6600 fa82      	bnew 29dc <_vsnprintf+0x32>
    2f5c:	6000 faa2      	braw 2a00 <_vsnprintf+0x56>
    2f60:	2643           	moveal %d3,%a3
    2f62:	244c           	moveal %a4,%a2
    2f64:	2847           	moveal %d7,%a4
        if (flags & FLAGS_LEFT) {
    2f66:	4aaf 0034      	tstl %sp@(52)
    2f6a:	6724           	beqs 2f90 <_vsnprintf+0x5e6>
    2f6c:	2a0a           	movel %a2,%d5
          while (l++ < width) {
    2f6e:	b88b           	cmpl %a3,%d4
    2f70:	641e           	bccs 2f90 <_vsnprintf+0x5e6>
    2f72:	45f3 a800      	lea %a3@(0,%a2:l),%a2
    2f76:	95c4           	subal %d4,%a2
            out(' ', buffer, idx++, maxlen);
    2f78:	2005           	movel %d5,%d0
    2f7a:	5285           	addql #1,%d5
    2f7c:	2f02           	movel %d2,%sp@-
    2f7e:	2f00           	movel %d0,%sp@-
    2f80:	2f06           	movel %d6,%sp@-
    2f82:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    2f86:	4e95           	jsr %a5@
          while (l++ < width) {
    2f88:	4fef 0010      	lea %sp@(16),%sp
    2f8c:	ba8a           	cmpl %a2,%d5
    2f8e:	66e8           	bnes 2f78 <_vsnprintf+0x5ce>
        const char* p = va_arg(va, char*);
    2f90:	262f 0030      	movel %sp@(48),%d3
  while (*format)
    2f94:	1014           	moveb %a4@,%d0
    2f96:	6600 fa44      	bnew 29dc <_vsnprintf+0x32>
    2f9a:	6000 fa64      	braw 2a00 <_vsnprintf+0x56>
  return (unsigned int)(s - str);
    2f9e:	2808           	movel %a0,%d4
    2fa0:	9883           	subl %d3,%d4
    2fa2:	6000 fe22      	braw 2dc6 <_vsnprintf+0x41c>
          flags |= FLAGS_CHAR;
    2fa6:	703f           	moveq #63,%d0
    2fa8:	4600           	notb %d0
    2faa:	8280           	orl %d0,%d1
          format++;
    2fac:	280c           	movel %a4,%d4
    2fae:	5484           	addql #2,%d4
    switch (*format) {
    2fb0:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2fb4:	2844           	moveal %d4,%a4
    2fb6:	528c           	addql #1,%a4
    switch (*format) {
    2fb8:	0c00 0078      	cmpib #120,%d0
    2fbc:	6f00 fb02      	blew 2ac0 <_vsnprintf+0x116>
    2fc0:	6000 fc94      	braw 2c56 <_vsnprintf+0x2ac>
          flags |= FLAGS_LONG_LONG;
    2fc4:	0041 0300      	oriw #768,%d1
          format++;
    2fc8:	280c           	movel %a4,%d4
    2fca:	5484           	addql #2,%d4
    switch (*format) {
    2fcc:	102c 0002      	moveb %a4@(2),%d0
        format++;
    2fd0:	2844           	moveal %d4,%a4
    2fd2:	528c           	addql #1,%a4
    switch (*format) {
    2fd4:	0c00 0078      	cmpib #120,%d0
    2fd8:	6f00 fae6      	blew 2ac0 <_vsnprintf+0x116>
    2fdc:	6000 fc78      	braw 2c56 <_vsnprintf+0x2ac>
          flags &= ~FLAGS_ZEROPAD;
    2fe0:	70f2           	moveq #-14,%d0
    2fe2:	c280           	andl %d0,%d1
        if ((*format == 'i') || (*format == 'd')) {
    2fe4:	6000 ff24      	braw 2f0a <_vsnprintf+0x560>
    switch (*format) {
    2fe8:	0c00 0058      	cmpib #88,%d0
    2fec:	6600 fc68      	bnew 2c56 <_vsnprintf+0x2ac>
          flags |= FLAGS_UPPERCASE;
    2ff0:	7a20           	moveq #32,%d5
    2ff2:	8285           	orl %d5,%d1
    2ff4:	307c 0010      	moveaw #16,%a0
    2ff8:	6000 ff04      	braw 2efe <_vsnprintf+0x554>
          while (l++ < width) {
    2ffc:	7001           	moveq #1,%d0
    2ffe:	b08b           	cmpl %a3,%d0
    3000:	6400 011c      	bccw 311e <_vsnprintf+0x774>
    3004:	41f3 a8ff      	lea %a3@(ffffffffffffffff,%a2:l),%a0
    3008:	2e08           	movel %a0,%d7
    300a:	280a           	movel %a2,%d4
            out(' ', buffer, idx++, maxlen);
    300c:	2004           	movel %d4,%d0
    300e:	5284           	addql #1,%d4
    3010:	2f02           	movel %d2,%sp@-
    3012:	2f00           	movel %d0,%sp@-
    3014:	2f06           	movel %d6,%sp@-
    3016:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    301a:	4e95           	jsr %a5@
          while (l++ < width) {
    301c:	4fef 0010      	lea %sp@(16),%sp
    3020:	b887           	cmpl %d7,%d4
    3022:	66e8           	bnes 300c <_vsnprintf+0x662>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    3024:	d5cb           	addal %a3,%a2
    3026:	2f02           	movel %d2,%sp@-
    3028:	2f07           	movel %d7,%sp@-
    302a:	2f06           	movel %d6,%sp@-
    302c:	2243           	moveal %d3,%a1
    302e:	2011           	movel %a1@,%d0
    3030:	4880           	extw %d0
    3032:	3040           	moveaw %d0,%a0
    3034:	2f08           	movel %a0,%sp@-
    3036:	4e95           	jsr %a5@
    3038:	4fef 0010      	lea %sp@(16),%sp
    303c:	2605           	movel %d5,%d3
    303e:	6000 fe42      	braw 2e82 <_vsnprintf+0x4d8>
          while (l++ < width) {
    3042:	b88b           	cmpl %a3,%d4
    3044:	6400 0162      	bccw 31a8 <_vsnprintf+0x7fe>
    3048:	200b           	movel %a3,%d0
    304a:	d08a           	addl %a2,%d0
    304c:	9084           	subl %d4,%d0
    304e:	2800           	movel %d0,%d4
    3050:	2a09           	movel %a1,%d5
            out(' ', buffer, idx++, maxlen);
    3052:	200a           	movel %a2,%d0
    3054:	528a           	addql #1,%a2
    3056:	2f02           	movel %d2,%sp@-
    3058:	2f00           	movel %d0,%sp@-
    305a:	2f06           	movel %d6,%sp@-
    305c:	4878 0020      	pea 20 <R_STOPCNTCMD+0x2>
    3060:	4e95           	jsr %a5@
          while (l++ < width) {
    3062:	4fef 0010      	lea %sp@(16),%sp
    3066:	b5c4           	cmpal %d4,%a2
    3068:	66e8           	bnes 3052 <_vsnprintf+0x6a8>
    306a:	2245           	moveal %d5,%a1
    306c:	280b           	movel %a3,%d4
    306e:	5284           	addql #1,%d4
    3070:	2043           	moveal %d3,%a0
    3072:	1f50 002f      	moveb %a0@,%sp@(47)
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    3076:	102f 002f      	moveb %sp@(47),%d0
    307a:	6700 ff14      	beqw 2f90 <_vsnprintf+0x5e6>
    307e:	220a           	movel %a2,%d1
    3080:	2a09           	movel %a1,%d5
    3082:	204b           	moveal %a3,%a0
    3084:	2643           	moveal %d3,%a3
    3086:	224c           	moveal %a4,%a1
    3088:	284a           	moveal %a2,%a4
    308a:	2447           	moveal %d7,%a2
    308c:	2e09           	movel %a1,%d7
    308e:	2608           	movel %a0,%d3
    3090:	6000 fd74      	braw 2e06 <_vsnprintf+0x45c>
    switch (*format) {
    3094:	307c 0010      	moveaw #16,%a0
    3098:	0c00 0078      	cmpib #120,%d0
    309c:	6700 fe60      	beqw 2efe <_vsnprintf+0x554>
          flags &= ~FLAGS_HASH;   // no hash for dec format
    30a0:	70ef           	moveq #-17,%d0
    30a2:	c280           	andl %d0,%d1
    30a4:	307c 000a      	moveaw #10,%a0
    30a8:	6000 fe54      	braw 2efe <_vsnprintf+0x554>
    switch (*format) {
    30ac:	307c 0002      	moveaw #2,%a0
    30b0:	6000 fe4c      	braw 2efe <_vsnprintf+0x554>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    30b4:	2243           	moveal %d3,%a1
    30b6:	2011           	movel %a1@,%d0
    30b8:	4880           	extw %d0
    30ba:	48c0           	extl %d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    30bc:	2f04           	movel %d4,%sp@-
    30be:	2f0b           	movel %a3,%sp@-
    30c0:	2f07           	movel %d7,%sp@-
    30c2:	4878 000a      	pea a <DUART_IMR>
    30c6:	2200           	movel %d0,%d1
    30c8:	d281           	addl %d1,%d1
    30ca:	9381           	subxl %d1,%d1
    30cc:	4481           	negl %d1
    30ce:	2f01           	movel %d1,%sp@-
    30d0:	4a80           	tstl %d0
    30d2:	6c00 fc28      	bgew 2cfc <_vsnprintf+0x352>
    30d6:	4480           	negl %d0
    30d8:	2f00           	movel %d0,%sp@-
    30da:	2f02           	movel %d2,%sp@-
    30dc:	2f0a           	movel %a2,%sp@-
    30de:	2f06           	movel %d6,%sp@-
    30e0:	2f0d           	movel %a5,%sp@-
    30e2:	4eb9 0000 2336 	jsr 2336 <_ntoa_long>
    30e8:	2440           	moveal %d0,%a2
    30ea:	4fef 0028      	lea %sp@(40),%sp
    30ee:	2605           	movel %d5,%d3
    30f0:	6000 fc22      	braw 2d14 <_vsnprintf+0x36a>
    30f4:	7000           	moveq #0,%d0
    30f6:	4600           	notb %d0
    30f8:	2243           	moveal %d3,%a1
    30fa:	c091           	andl %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    30fc:	2f01           	movel %d1,%sp@-
    30fe:	2f0b           	movel %a3,%sp@-
    3100:	2f07           	movel %d7,%sp@-
    3102:	2f08           	movel %a0,%sp@-
    3104:	42a7           	clrl %sp@-
    3106:	2f00           	movel %d0,%sp@-
    3108:	6000 fe36      	braw 2f40 <_vsnprintf+0x596>
        if ((*format != 'i') && (*format != 'd')) {
    310c:	0c00 0064      	cmpib #100,%d0
    3110:	6700 fb9e      	beqw 2cb0 <_vsnprintf+0x306>
    3114:	2204           	movel %d4,%d1
    3116:	307c 000a      	moveaw #10,%a0
    311a:	6000 fde2      	braw 2efe <_vsnprintf+0x554>
        out((char)va_arg(va, int), buffer, idx++, maxlen);
    311e:	2f02           	movel %d2,%sp@-
    3120:	2f0a           	movel %a2,%sp@-
    3122:	2f06           	movel %d6,%sp@-
    3124:	2043           	moveal %d3,%a0
    3126:	2010           	movel %a0@,%d0
    3128:	4880           	extw %d0
    312a:	3240           	moveaw %d0,%a1
    312c:	2f09           	movel %a1,%sp@-
    312e:	4e95           	jsr %a5@
    3130:	4fef 0010      	lea %sp@(16),%sp
    3134:	2444           	moveal %d4,%a2
    3136:	2605           	movel %d5,%d3
    3138:	6000 fd48      	braw 2e82 <_vsnprintf+0x4d8>
            const long value = va_arg(va, long);
    313c:	2043           	moveal %d3,%a0
    313e:	2010           	movel %a0@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    3140:	2f04           	movel %d4,%sp@-
    3142:	2f0b           	movel %a3,%sp@-
    3144:	2f07           	movel %d7,%sp@-
    3146:	4878 000a      	pea a <DUART_IMR>
    314a:	2200           	movel %d0,%d1
    314c:	d281           	addl %d1,%d1
    314e:	9381           	subxl %d1,%d1
    3150:	4481           	negl %d1
    3152:	2f01           	movel %d1,%sp@-
    3154:	4a80           	tstl %d0
    3156:	6c00 fba4      	bgew 2cfc <_vsnprintf+0x352>
    315a:	6000 ff7a      	braw 30d6 <_vsnprintf+0x72c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
    315e:	2f01           	movel %d1,%sp@-
    3160:	2f0b           	movel %a3,%sp@-
    3162:	2f07           	movel %d7,%sp@-
    3164:	2f08           	movel %a0,%sp@-
    3166:	42a7           	clrl %sp@-
    3168:	2043           	moveal %d3,%a0
    316a:	2f10           	movel %a0@,%sp@-
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
    316c:	2f02           	movel %d2,%sp@-
    316e:	2f0a           	movel %a2,%sp@-
    3170:	2f06           	movel %d6,%sp@-
    3172:	2f0d           	movel %a5,%sp@-
    3174:	4eb9 0000 2336 	jsr 2336 <_ntoa_long>
    317a:	2440           	moveal %d0,%a2
    317c:	4fef 0028      	lea %sp@(40),%sp
    3180:	2604           	movel %d4,%d3
        break;
    3182:	6000 fdd2      	braw 2f56 <_vsnprintf+0x5ac>
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
    3186:	2243           	moveal %d3,%a1
    3188:	2011           	movel %a1@,%d0
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
    318a:	2f04           	movel %d4,%sp@-
    318c:	2f0b           	movel %a3,%sp@-
    318e:	2f07           	movel %d7,%sp@-
    3190:	4878 000a      	pea a <DUART_IMR>
    3194:	2200           	movel %d0,%d1
    3196:	d281           	addl %d1,%d1
    3198:	9381           	subxl %d1,%d1
    319a:	4481           	negl %d1
    319c:	2f01           	movel %d1,%sp@-
    319e:	4a80           	tstl %d0
    31a0:	6c00 fb5a      	bgew 2cfc <_vsnprintf+0x352>
    31a4:	6000 ff30      	braw 30d6 <_vsnprintf+0x72c>
          while (l++ < width) {
    31a8:	5284           	addql #1,%d4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
    31aa:	102f 002f      	moveb %sp@(47),%d0
    31ae:	6600 fece      	bnew 307e <_vsnprintf+0x6d4>
    31b2:	6000 fddc      	braw 2f90 <_vsnprintf+0x5e6>

000031b6 <printf_>:


///////////////////////////////////////////////////////////////////////////////

int printf_(const char* format, ...)
{
    31b6:	4e56 fffc      	linkw %fp,#-4
  va_list va;
  va_start(va, format);
  char buffer[1];
  const int ret = _vsnprintf(_out_char, buffer, (size_t)-1, format, va);
    31ba:	486e 000c      	pea %fp@(12)
    31be:	2f2e 0008      	movel %fp@(8),%sp@-
    31c2:	4878 ffff      	pea ffffffff <DUART_BASE_R2+0xff07ff57>
    31c6:	486e ffff      	pea %fp@(-1)
    31ca:	4879 0000 2992 	pea 2992 <_out_char>
    31d0:	4eb9 0000 29aa 	jsr 29aa <_vsnprintf>
  va_end(va);
  return ret;
    31d6:	4fef 0014      	lea %sp@(20),%sp
}
    31da:	4e5e           	unlk %fp
    31dc:	4e75           	rts

000031de <_putchar>:
static char crbuf[2] = { '\r', 0 };

/*
 * This is used by printf.
 */
void _putchar(char chr) {
    31de:	2f02           	movel %d2,%sp@-
    31e0:	242f 0008      	movel %sp@(8),%d2
  if (chr == '\n') {
    31e4:	0c02 000a      	cmpib #10,%d2
    31e8:	6714           	beqs 31fe <_putchar+0x20>
    // is LF, print CR too
    mcPrint(crbuf);
  }

  buf[0] = chr;
    31ea:	41f9 0000 3514 	lea 3514 <buf>,%a0
    31f0:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    31f2:	2f48 0008      	movel %a0,%sp@(8)
}
    31f6:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    31f8:	4ef9 0000 3220 	jmp 3220 <mcPrint>
    mcPrint(crbuf);
    31fe:	4879 0000 3510 	pea 3510 <crbuf>
    3204:	4eb9 0000 3220 	jsr 3220 <mcPrint>
    320a:	588f           	addql #4,%sp
  buf[0] = chr;
    320c:	41f9 0000 3514 	lea 3514 <buf>,%a0
    3212:	1082           	moveb %d2,%a0@
  mcPrint(buf);
    3214:	2f48 0008      	movel %a0,%sp@(8)
}
    3218:	241f           	movel %sp@+,%d2
  mcPrint(buf);
    321a:	4ef9 0000 3220 	jmp 3220 <mcPrint>

00003220 <mcPrint>:
    3220:	48e7 c080      	moveml %d0-%d1/%a0,%sp@-
    3224:	206f 0010      	moveal %sp@(16),%a0
    3228:	7200           	moveq #0,%d1
    322a:	4e4e           	trap #14
    322c:	4cdf 0103      	moveml %sp@+,%d0-%d1/%a0
    3230:	4e75           	rts

00003232 <mcDelaymsec10>:
    3232:	202f 0004      	movel %sp@(4),%d0
    3236:	d0b8 040c      	addl 40c <_TIMER_100HZ>,%d0
    323a:	b0b8 040c      	cmpl 40c <_TIMER_100HZ>,%d0
    323e:	64fa           	bccs 323a <mcDelaymsec10+0x8>
    3240:	4e75           	rts

00003242 <__kinit>:

void *__dso_handle;

__attribute__((weak)) void __kinit() {
  // zero .bss
  for (uint32_t *dst = &_bss_start; dst < &_bss_end; *dst++ = 0);
    3242:	41f9 0000 3514 	lea 3514 <buf>,%a0
    3248:	b1fc 0000 6d28 	cmpal #27944,%a0
    324e:	641c           	bccs 326c <__kinit+0x2a>
    3250:	203c 0000 6d28 	movel #27944,%d0
    3256:	0480 0000 3515 	subil #13589,%d0
    325c:	72fc           	moveq #-4,%d1
    325e:	c081           	andl %d1,%d0
    3260:	0680 0000 3518 	addil #13592,%d0
    3266:	4298           	clrl %a0@+
    3268:	b088           	cmpl %a0,%d0
    326a:	66fa           	bnes 3266 <__kinit+0x24>
}
    326c:	4e75           	rts

0000326e <__cxa_finalize>:
/*
 * We probably don't need the full dso_handle capability as we're always
 * statically linked, but I'd rather do a proper impl now than have it 
 * break later because of a half-baked one :D
 */
void __cxa_finalize(void *dso_handle) {
    326e:	48e7 3020      	moveml %d2-%d3/%a2,%sp@-
    3272:	262f 0010      	movel %sp@(16),%d3
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    3276:	7200           	moveq #0,%d1
    3278:	3239 0000 3524 	movew 3524 <cxa_atexit_count>,%d1
    327e:	2401           	movel %d1,%d2
    3280:	5382           	subql #1,%d2
    3282:	4a81           	tstl %d1
    3284:	6738           	beqs 32be <__cxa_finalize+0x50>
    3286:	2001           	movel %d1,%d0
    3288:	e788           	lsll #3,%d0
    328a:	2440           	moveal %d0,%a2
    328c:	95c1           	subal %d1,%a2
    328e:	d5ca           	addal %a2,%a2
    3290:	d5fc 0000 3518 	addal #13592,%a2
        cxa_atexit_entry *entry = &cxa_atexits[i];

        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    3296:	4a83           	tstl %d3
    3298:	662a           	bnes 32c4 <__cxa_finalize+0x56>
    329a:	4a2a 000c      	tstb %a2@(12)
    329e:	6610           	bnes 32b0 <__cxa_finalize+0x42>
            entry->func(entry->ptr);
    32a0:	2f2a 0004      	movel %a2@(4),%sp@-
    32a4:	2052           	moveal %a2@,%a0
    32a6:	4e90           	jsr %a0@
            entry->done = true;
    32a8:	157c 0001 000c 	moveb #1,%a2@(12)
    32ae:	588f           	addql #4,%sp
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    32b0:	45ea fff2      	lea %a2@(-14),%a2
    32b4:	51ca ffe0      	dbf %d2,3296 <__cxa_finalize+0x28>
    32b8:	4242           	clrw %d2
    32ba:	5382           	subql #1,%d2
    32bc:	64d8           	bccs 3296 <__cxa_finalize+0x28>
        }
    }
}
    32be:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    32c2:	4e75           	rts
        if ((dso_handle == NULL || dso_handle == entry->dso_handle) && !entry->done) {
    32c4:	b6aa 0008      	cmpl %a2@(8),%d3
    32c8:	67d0           	beqs 329a <__cxa_finalize+0x2c>
    for (int i = cxa_atexit_count - 1; i >= 0; i--) {
    32ca:	45ea fff2      	lea %a2@(-14),%a2
    32ce:	51ca fff4      	dbf %d2,32c4 <__cxa_finalize+0x56>
    32d2:	4242           	clrw %d2
    32d4:	5382           	subql #1,%d2
    32d6:	64ec           	bccs 32c4 <__cxa_finalize+0x56>
}
    32d8:	4cdf 040c      	moveml %sp@+,%d2-%d3/%a2
    32dc:	4e75           	rts
	...

000032e0 <__udivsi3>:
    32e0:	2f02           	movel %d2,%sp@-
    32e2:	222f 000c      	movel %sp@(12),%d1
    32e6:	202f 0008      	movel %sp@(8),%d0
    32ea:	0c81 0001 0000 	cmpil #65536,%d1
    32f0:	6416           	bccs 3308 <L3>
    32f2:	2400           	movel %d0,%d2
    32f4:	4242           	clrw %d2
    32f6:	4842           	swap %d2
    32f8:	84c1           	divuw %d1,%d2
    32fa:	3002           	movew %d2,%d0
    32fc:	4840           	swap %d0
    32fe:	342f 000a      	movew %sp@(10),%d2
    3302:	84c1           	divuw %d1,%d2
    3304:	3002           	movew %d2,%d0
    3306:	6030           	bras 3338 <L6>

00003308 <L3>:
    3308:	2401           	movel %d1,%d2

0000330a <L4>:
    330a:	e289           	lsrl #1,%d1
    330c:	e288           	lsrl #1,%d0
    330e:	0c81 0001 0000 	cmpil #65536,%d1
    3314:	64f4           	bccs 330a <L4>
    3316:	80c1           	divuw %d1,%d0
    3318:	0280 0000 ffff 	andil #65535,%d0
    331e:	2202           	movel %d2,%d1
    3320:	c2c0           	muluw %d0,%d1
    3322:	4842           	swap %d2
    3324:	c4c0           	muluw %d0,%d2
    3326:	4842           	swap %d2
    3328:	4a42           	tstw %d2
    332a:	660a           	bnes 3336 <L5>
    332c:	d282           	addl %d2,%d1
    332e:	6506           	bcss 3336 <L5>
    3330:	b2af 0008      	cmpl %sp@(8),%d1
    3334:	6302           	blss 3338 <L6>

00003336 <L5>:
    3336:	5380           	subql #1,%d0

00003338 <L6>:
    3338:	241f           	movel %sp@+,%d2
    333a:	4e75           	rts

0000333c <__umodsi3>:
    333c:	222f 0008      	movel %sp@(8),%d1
    3340:	202f 0004      	movel %sp@(4),%d0
    3344:	2f01           	movel %d1,%sp@-
    3346:	2f00           	movel %d0,%sp@-
    3348:	4eb9 0000 32e0 	jsr 32e0 <__udivsi3>
    334e:	508f           	addql #8,%sp
    3350:	222f 0008      	movel %sp@(8),%d1
    3354:	2f01           	movel %d1,%sp@-
    3356:	2f00           	movel %d0,%sp@-
    3358:	4eb9 0000 336c 	jsr 336c <__mulsi3>
    335e:	508f           	addql #8,%sp
    3360:	222f 0004      	movel %sp@(4),%d1
    3364:	9280           	subl %d0,%d1
    3366:	2001           	movel %d1,%d0
    3368:	4e75           	rts
	...

0000336c <__mulsi3>:
    336c:	302f 0004      	movew %sp@(4),%d0
    3370:	c0ef 000a      	muluw %sp@(10),%d0
    3374:	322f 0006      	movew %sp@(6),%d1
    3378:	c2ef 0008      	muluw %sp@(8),%d1
    337c:	d041           	addw %d1,%d0
    337e:	4840           	swap %d0
    3380:	4240           	clrw %d0
    3382:	322f 0006      	movew %sp@(6),%d1
    3386:	c2ef 000a      	muluw %sp@(10),%d1
    338a:	d081           	addl %d1,%d0
    338c:	4e75           	rts
    338e:	0a1b 5b31      	eorib #49,%a3@+
    3392:	3b33 376d 522f 	movew %a3@(522f)@(0),%a5@-
    3398:	5720           	subqb #3,%a0@-
    339a:	7465           	moveq #101,%d2
    339c:	7374           	.short 0x7374
    339e:	2061           	moveal %a1@-,%a0
    33a0:	7420           	moveq #32,%d2
    33a2:	6261           	bhis 3405 <__mulsi3+0x99>
    33a4:	7365           	.short 0x7365
    33a6:	2061           	moveal %a1@-,%a0
    33a8:	6464           	bccs 340e <__mulsi3+0xa2>
    33aa:	7265           	moveq #101,%d1
    33ac:	7373           	.short 0x7373
    33ae:	2030 7825      	movel %a0@(25,%d7:l),%d0
    33b2:	3038 780a      	movew 780a <_bss_end+0xae2>,%d0
    33b6:	001b 5b31      	orib #49,%a3@+
    33ba:	3b33 316d 3078 	movew %a3@(3078)@(0),%a5@-
    33c0:	2530 3278      	movel %a0@(78,%d3:w:2),%a2@-
    33c4:	2077 7269      	moveal %sp@(69,%d7:w:2),%a0
    33c8:	7465           	moveq #101,%d2
    33ca:	2069 7320      	moveal %a1@(29472),%a0
    33ce:	6261           	bhis 3431 <__mulsi3+0xc5>
    33d0:	643a           	bccs 340c <__mulsi3+0xa0>
    33d2:	2030 7825      	movel %a0@(25,%d7:l),%d0
    33d6:	3032 7820      	movew %a2@(20,%d7:l),%d0
    33da:	5b4c           	subqw #5,%a4
    33dc:	4154           	.short 0x4154
    33de:	4553           	.short 0x4553
    33e0:	5420           	addqb #2,%a0@-
    33e2:	5641           	addqw #3,%d1
    33e4:	4c55           	.short 0x4c55
    33e6:	4520           	.short 0x4520
    33e8:	3078 2530      	moveaw 2530 <_ntoa_long+0x1fa>,%a0
    33ec:	3278 5d1b      	moveaw 5d1b <cxa_atexits+0x27f5>,%a1
    33f0:	5b30 6d0a 001b 	subqb #5,%a0@(0,%d6:l:4)@(1b)
    33f6:	5b31 3b33 326d 	subqb #5,%a1@(326d001b,%d3:l:2)@(5b313b33)
    33fc:	001b 5b31 3b33 
    3402:	316d 0030 7825 	movew %a5@(48),%a0@(30757)
    3408:	3032 7800      	movew %a2@(0,%d7:l),%d0
    340c:	2020           	movel %a0@-,%d0
    340e:	001b 5b31      	orib #49,%a3@+
    3412:	3b33 376d 4c6f 	movew %a3@(4c6f)@(0),%a5@-
    3418:	7720           	.short 0x7720
    341a:	2062           	moveal %a2@-,%a0
    341c:	616e           	bsrs 348c <__mulsi3+0x120>
    341e:	6b20           	bmis 3440 <__mulsi3+0xd4>
    3420:	7772           	.short 0x7772
    3422:	6974           	bvss 3498 <__mulsi3+0x12c>
    3424:	6520           	bcss 3446 <__mulsi3+0xda>
    3426:	6174           	bsrs 349c <__mulsi3+0x130>
    3428:	2061           	moveal %a1@-,%a0
    342a:	6464           	bccs 3490 <__mulsi3+0x124>
    342c:	7265           	moveq #101,%d1
    342e:	7373           	.short 0x7373
    3430:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3434:	3038 780a      	movew 780a <_bss_end+0xae2>,%d0
    3438:	001b 5b31      	orib #49,%a3@+
    343c:	3b33 376d 4869 	movew %a3@(4869)@(0),%a5@-
    3442:	6768           	beqs 34ac <__mulsi3+0x140>
    3444:	2062           	moveal %a2@-,%a0
    3446:	616e           	bsrs 34b6 <__mulsi3+0x14a>
    3448:	6b20           	bmis 346a <__mulsi3+0xfe>
    344a:	7772           	.short 0x7772
    344c:	6974           	bvss 34c2 <__mulsi3+0x156>
    344e:	6520           	bcss 3470 <__mulsi3+0x104>
    3450:	6174           	bsrs 34c6 <__mulsi3+0x15a>
    3452:	2061           	moveal %a1@-,%a0
    3454:	6464           	bccs 34ba <__mulsi3+0x14e>
    3456:	7265           	moveq #101,%d1
    3458:	7373           	.short 0x7373
    345a:	2030 7825      	movel %a0@(25,%d7:l),%d0
    345e:	3038 780a      	movew 780a <_bss_end+0xae2>,%d0
    3462:	001b 5b31      	orib #49,%a3@+
    3466:	3b33 376d 4c6f 	movew %a3@(4c6f)@(0),%a5@-
    346c:	7720           	.short 0x7720
    346e:	2062           	moveal %a2@-,%a0
    3470:	616e           	bsrs 34e0 <__mulsi3+0x174>
    3472:	6b20           	bmis 3494 <__mulsi3+0x128>
    3474:	6368           	blss 34de <__mulsi3+0x172>
    3476:	6563           	bcss 34db <__mulsi3+0x16f>
    3478:	6b20           	bmis 349a <__mulsi3+0x12e>
    347a:	6174           	bsrs 34f0 <__mulsi3+0x184>
    347c:	2061           	moveal %a1@-,%a0
    347e:	6464           	bccs 34e4 <__mulsi3+0x178>
    3480:	7265           	moveq #101,%d1
    3482:	7373           	.short 0x7373
    3484:	2030 7825      	movel %a0@(25,%d7:l),%d0
    3488:	3038 783a      	movew 783a <_bss_end+0xb12>,%d0
    348c:	2000           	movel %d0,%d0
    348e:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    3492:	3332 6d4f 4b20 	movew %a2@(0)@(4b202020),%a1@-
    3498:	2020 
    349a:	3078 2530      	moveaw 2530 <_ntoa_long+0x1fa>,%a0
    349e:	3278 1b5b      	moveaw 1b5b <EFP_CHECKINPUT+0x16c3>,%a1
    34a2:	306d 0a00      	moveaw %a5@(2560),%a0
    34a6:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    34aa:	3331 6d46 4149 	movew %a1@(0)@(4149),%a1@-
    34b0:	4c20           	.short 0x4c20
    34b2:	3078 2530      	moveaw 2530 <_ntoa_long+0x1fa>,%a0
    34b6:	3278 1b5b      	moveaw 1b5b <EFP_CHECKINPUT+0x16c3>,%a1
    34ba:	306d 0a00      	moveaw %a5@(2560),%a0
    34be:	1b5b 313b      	moveb %a3@+,%a5@(12603)
    34c2:	3337 6d48      	movew %sp@(0),%a1@-
    34c6:	6967           	bvss 352f <cxa_atexits+0x9>
    34c8:	6820           	bvcs 34ea <__mulsi3+0x17e>
    34ca:	6261           	bhis 352d <cxa_atexits+0x7>
    34cc:	6e6b           	bgts 3539 <cxa_atexits+0x13>
    34ce:	2063           	moveal %a3@-,%a0
    34d0:	6865           	bvcs 3537 <cxa_atexits+0x11>
    34d2:	636b           	blss 353f <cxa_atexits+0x19>
    34d4:	2061           	moveal %a1@-,%a0
    34d6:	7420           	moveq #32,%d2
    34d8:	6164           	bsrs 353e <cxa_atexits+0x18>
    34da:	6472           	bccs 354e <cxa_atexits+0x28>
    34dc:	6573           	bcss 3551 <cxa_atexits+0x2b>
    34de:	7320           	.short 0x7320
    34e0:	3078 2530      	moveaw 2530 <_ntoa_long+0x1fa>,%a0
    34e4:	3878 3a20      	moveaw 3a20 <cxa_atexits+0x4fa>,%a4
    34e8:	001b 5b31      	orib #49,%a3@+
    34ec:	3b33 376d 586f 	movew %a3@(586f)@(0),%a5@-
    34f2:	7365           	.short 0x7365
    34f4:	5241           	addqw #1,%d1
    34f6:	4d20           	.short 0x4d20
    34f8:	1b5b 306d      	moveb %a3@+,%a5@(12397)
    34fc:	6272           	bhis 3570 <cxa_atexits+0x4a>
    34fe:	696e           	bvss 356e <cxa_atexits+0x48>
    3500:	6775           	beqs 3577 <cxa_atexits+0x51>
    3502:	7020           	moveq #32,%d0
    3504:	7465           	moveq #101,%d2
    3506:	7374           	.short 0x7374
    3508:	730a           	.short 0x730a
	...
