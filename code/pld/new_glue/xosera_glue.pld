Name     xosera_glue ;
PartNo   00 ;
Date     04/05/2024 [DD/MM/YYYY];
Revision 01 ;
Designer Thomas Jager & Ross Bamford ;
Company  rosco_m68k OSP ;
Assembly None ;
Location  ;
Device   f1508isptqfp100 ;

/*
property   atmel {xor_synthesis=on};
property   atmel {cascade_logic=on};
*/
property   atmel {preassign=keep};
property   atmel {logic_doubling=on};
property   atmel {pin_keep=off};
property   atmel {security=off};
property   atmel {output_fast=on};
property   atmel {tdi_pullup=on};
property   atmel {tms_pullup=on};

/* *************** INPUT PINS *********************/
PIN  33 = XO_IRQ;
PIN  35 = XO_DTACK;
PIN  36 = XO_CRESET;
PIN  37 = XO_CDONE;
PIN  40 = SYS_A1;
PIN  41 = SYS_A2;
PIN  42 = SYS_A3;
PIN  44 = SYS_VPA;
PIN  45 = SYS_A4;
PIN  46 = SYS_A5;
PIN  47 = SYS_A6;
PIN  48 = SYS_IRQ3;
PIN  49 = SYS_A7;
PIN  50 = SYS_IOSEL;
PIN  52 = SYS_A8;
PIN  53 = SYS_EXPSEL;
PIN  54 = SYS_A9;
PIN  55 = SYS_FC0;
PIN  56 = SYS_A10;
PIN  57 = SYS_FC1;
PIN  58 = SYS_A11;
PIN  60 = SYS_FC2;
PIN  61 = SYS_A12;
PIN  63 = SYS_IRQ5;
PIN  64 = SYS_A13;
PIN  65 = SYS_IRQ2;
PIN  67 = SYS_A14;
PIN  68 = SYS_IRQ6;
PIN  69 = SYS_A15;
PIN  70 = SYS_LDS;
PIN  71 = SYS_A16;
PIN  72 = SYS_UDS;
PIN  75 = SYS_A17;
PIN  76 = SYS_A18;
PIN  77 = SYS_A19;
PIN  78 = SYS_A20;
PIN  79 = SYS_A21;
PIN  80 = SYS_A22;
PIN  81 = SYS_A23;
PIN  83 = SYS_AS;
PIN  84 = SYS_BERR;
PIN  85 = SYS_DTACK;
PIN  87 = SYS_CLK;
PIN  88 = SYS_RnW;
PIN  89 = SYS_RESET;
PIN  90 = SD_CLK;

/* *************** OUTPUT PINS *********************/
PIN  92 = SD_A4;
PIN  93 = SD_A5;
PIN  94 = SD_A6;
PIN  96 = SD_A7;
PIN  97 = SD_A8;
PIN  98 = SD_A9;
PIN  99 = SD_A11;
PIN 100 = SD_A12;
PIN   1 = SD_CKE;
PIN   2 = SD_DQMH;
PIN   5 = SD_DQML;
PIN   6 = SD_WE;        /* These four are active low,       */
PIN   7 = SD_CAS;       /* but it's easier to match them    */
PIN   8 = SD_RAS;       /* with the datasheet if they're    */
PIN   9 = SD_CS;        /* treated as not so here...        */
PIN  10 = SD_A3;
PIN  12 = SD_A2;
PIN  13 = SD_A1;
PIN  14 = SD_A0;
PIN  16 = SD_A10;
PIN  17 = SD_BA1;
PIN  19 = SD_BA0;
/*
PIN  20 = NC;
PIN  21 = NC;
PIN  22 = NC;
*/
PIN  23 = SD_CLK_OUT1;
PIN  24 = SD_CLK_OUT2;

PIN  25 = XO_RnW;
PIN  27 = XO_CS;
PIN  28 = XO_BYTESEL;
PIN  29 = XO_REG3;
PIN  30 = XO_REG2;
PIN  31 = XO_REG1;
PIN  32 = XO_REG0;

NODE  IN_INIT;
NODE  REFRESH_Q;                        /* Active high! */
NODE  RQ4, RQ3, RQ2, RQ1, RQ0;
NODE  SD_DTACK;                         /* Active high! */
NODE  XO_IRQRQ;                         /* Active high! */
NODE  XO_IRQRQ_AR;
NODE  BANK_FF;

NODE COMMAND_SEL;
NODE CMD_DTACK;                         /* Active high! */
NODE CMDa, CMDb;

FIELD SYS_BANK  = [BANK_FF, SYS_A23];
FIELD SYS_ROW   = [SYS_A22..SYS_A10];
FIELD SYS_COL   = ['b'0, 'b'0, 'b'0, 'b'0, SYS_A9..SYS_A1];
FIELD SYS_MR    = 'b'0001000100000;
FIELD SYS_PCHRG = 'b'0010000000000;

FIELD SD_BANK   = [SD_BA1, SD_BA0];
FIELD SD_ADDR   = [SD_A12..SD_A0];
FIELD SD_STATE  = [SD_CS, SD_RAS, SD_CAS, SD_WE, SD_DTACK, IN_INIT, SD_CKE];
FIELD SYS_ADDR  = [SYS_A23..SYS_A1];
FIELD RCOUNT    = [RQ4..RQ0];

FIELD COMMAND   = [CMDb, CMDa, CMD_DTACK];

SD_STATE.ck     = SD_CLK;
SD_STATE.ar     = !SYS_RESET;

SD_CLK_OUT1     = !SYS_CLK;
SD_CLK_OUT2     = !SYS_CLK;
SD_CLK_OUT2.oe  = 'b'0;

SYS_DTACK       = 'b'0;
SYS_DTACK.oe    = SYS_RESET & !XO_CS        /* switch XO_CS to XO_DTACK when ready */
                # SYS_RESET & SD_DTACK
                # SYS_RESET & CMD_DTACK;

/** *********************** STATE  DEFINES ******************/
/* N.B. IN_INIT is quite poorly named, it's just become a   */
/* differentiator for states that would otherside have the  */
/* same decoding...                                         */
/*                                                          */
/*                         CRCWDIC                          */
/*                         SAAETNK                          */
/*                          SS A_E                          */
/*                             CI                           */
/*                             KN                           */
/*                              I                           */
/*                              T                           */
$define ST_START        'b'0000000  /* Start state               00 */
$define ST_INHIBIT      'b'1110001  /* Inhibit (no CS)           41 */
$define ST_INIT_CKE     'b'0000001  /* Initial CKE               01 */
$define ST_INIT_PC      'b'0010011  /* Initial precharge         13 */
$define ST_REFRESH      'b'0001001  /* Refresh general or init1  09 */
$define ST_RDONE        'b'0111001  /* Refresh done (NOP)        39 */
$define ST_INITR2       'b'0001011  /* 2nd init refr             0B */
$define ST_LOADMODE     'b'0000011  /* Load mode                 03 */
$define ST_ACTIVE       'b'0011001  /* ACTIVATE (row)            19 */
$define ST_READ_CMD     'b'0101001  /* READ (column)             29 */
$define ST_WRITE_CMD    'b'0100001  /* WRITE (column)            21 */
$define ST_ACK          'b'0111101  /* NOP, DTACK                3D */
$define ST_BURST_TERM   'b'0110001  /* We don't use...           31 */
$define ST_PRECHARGE    'b'0010001  /* End cycle                 11 */

!SD_DQML        = !SYS_LDS & (SD_STATE:ST_READ_CMD # SD_STATE:ST_WRITE_CMD);
!SD_DQMH        = !SYS_UDS & (SD_STATE:ST_READ_CMD # SD_STATE:ST_WRITE_CMD);

/** *********************** SDRAM ADDR BUS ******************/
APPEND SD_BANK  =   SD_STATE:ST_LOADMODE  & ['b'0, 'b'0];
APPEND SD_BANK  = !(SD_STATE:ST_LOADMODE) & SYS_BANK;
APPEND SD_ADDR  =   SD_STATE:ST_ACTIVE    & SYS_ROW;
APPEND SD_ADDR  =   SD_STATE:ST_READ_CMD  & SYS_COL;
APPEND SD_ADDR  =   SD_STATE:ST_WRITE_CMD & SYS_COL;
APPEND SD_ADDR  =   SD_STATE:ST_LOADMODE  & SYS_MR;
APPEND SD_ADDR  =   SD_STATE:ST_PRECHARGE & SYS_PCHRG;
APPEND SD_ADDR  =   SD_STATE:ST_INIT_PC   & SYS_PCHRG;


/** ***********************  SDRAM STATES  ******************/

SEQUENCE SD_STATE {
    PRESENT ST_START
        IF !SYS_RESET
            NEXT ST_START;
        DEFAULT NEXT ST_INIT_CKE;
    PRESENT ST_INIT_CKE
        NEXT ST_INIT_PC;
    PRESENT ST_INIT_PC
        NEXT ST_REFRESH;
    PRESENT ST_REFRESH
        IF REFRESH_Q
            NEXT ST_RDONE OUT REFRESH_Q.SR;
        DEFAULT NEXT ST_INITR2;
    PRESENT ST_INITR2
        NEXT ST_LOADMODE;
    PRESENT ST_LOADMODE
        NEXT ST_INHIBIT;
    PRESENT ST_RDONE
        NEXT ST_INHIBIT;
    PRESENT ST_INHIBIT
        IF  REFRESH_Q
            NEXT ST_REFRESH;
        IF !REFRESH_Q & !SYS_AS & !SYS_EXPSEL
            NEXT ST_ACTIVE;
        DEFAULT NEXT ST_INHIBIT;
    PRESENT ST_ACTIVE
        IF  SYS_AS
            NEXT ST_PRECHARGE;
        IF !SYS_AS & (!SYS_LDS # !SYS_UDS) &  SYS_RnW
            NEXT ST_READ_CMD;
        IF !SYS_AS & (!SYS_LDS # !SYS_UDS) & !SYS_RnW
            NEXT ST_WRITE_CMD;
        DEFAULT NEXT ST_ACTIVE;
    PRESENT ST_READ_CMD
        NEXT ST_ACK;
    PRESENT ST_WRITE_CMD
        NEXT ST_ACK;
    PRESENT ST_ACK
        IF SYS_AS
            NEXT ST_PRECHARGE;
        DEFAULT NEXT ST_ACTIVE;
    PRESENT ST_PRECHARGE
        IF REFRESH_Q
            NEXT ST_REFRESH;
        IF !REFRESH_Q & !SYS_AS & !SYS_EXPSEL
            NEXT ST_ACTIVE;
        DEFAULT NEXT ST_INHIBIT;
}


/** ***********************  REFRESH COUNT ******************/
REFRESH_Q.CK    = SD_CLK;
RCOUNT.CK       = SD_CLK;

SEQUENCE RCOUNT {
$repeat i = [0..30]
    PRESENT 'D'{i}
        IF REFRESH_Q OUT REFRESH_Q.D;
        NEXT 'D'{i+1};
$repend
    PRESENT 'D'31
        NEXT 'D'0 OUT REFRESH_Q.D;
}

 
/** ***********************   XOSERA GLUE  ******************/

!XO_CS      = SYS_RESET & !SYS_AS & !SYS_IOSEL & (
                SYS_ADDR:'b'XXXX000000000000011XXXXX #
                SYS_ADDR:'b'XXXX000000000000100XXXXX
            ) & !SYS_LDS;

XO_RnW      = SYS_RnW;

XO_REG3     = !SYS_A5;
XO_REG2     =  SYS_A4;
XO_REG1     =  SYS_A3;
XO_REG0     =  SYS_A2;
XO_BYTESEL  =  SYS_A1;

SYS_VPA     = 'b'0;
SYS_VPA.oe  = SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 &  SYS_A2 & !SYS_A1 & XO_CDONE; /* Xosera */
/*          # SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 &  SYS_A2 &  SYS_A1;            /* IDE    */
/*          # SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 &  SYS_A3 &  SYS_A2 & !SYS_A1;            /* UART   */

XO_CRESET.oe = !SYS_RESET;
XO_CRESET = 'b'0;

XO_IRQRQ.l  = 'b'1;
XO_IRQRQ.ck = XO_IRQ;
XO_IRQRQ_AR = !SYS_RESET
            # !XO_CDONE
            # !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 & SYS_A2 & !SYS_A1;
XO_IRQRQ.ar = XO_IRQRQ_AR;

SYS_IRQ2    = 'b'0;
SYS_IRQ2.oe = XO_CDONE & XO_IRQ;

/** *********************** COMMAND  STATES ******************/
/*
                             S
                             Y
                             S
                             _
                             D
                             T
                             A
                             C
                           baK                                      */
$define CMD_START       'b'000      /* Start state               00 */
$define CMD_IDLE        'b'010      /* Idle state                02 */
$define CMD_LATCH       'b'100      /* Latch state               04 */
$define CMD_ACK         'b'001      /* ACK command               01 */

/** *********************** OUTPUT  SIGNALS ******************/
BANK_FF.ar  = !SYS_RESET;
BANK_FF.l   = SYS_A1;
BANK_FF.ck  = COMMAND:CMD_LATCH;

COMMAND.ar  = !SYS_RESET;
COMMAND.ck  = SYS_CLK;

!COMMAND_SEL= SYS_RESET & !SYS_IOSEL & (!SYS_UDS # !SYS_LDS) & !SYS_AS & SYS_ADDR:'b'XXXXXX0000010000011000XX;

/** *********************** COMMAND MACHINE ******************/
SEQUENCE COMMAND {
    PRESENT CMD_START
        NEXT CMD_IDLE;
    PRESENT CMD_IDLE
        IF !COMMAND_SEL
            NEXT CMD_LATCH;
        DEFAULT NEXT CMD_IDLE;
    PRESENT CMD_LATCH
        NEXT CMD_ACK;
    PRESENT CMD_ACK
        IF !SYS_IOSEL
            NEXT CMD_ACK;

        DEFAULT NEXT CMD_IDLE;
}


