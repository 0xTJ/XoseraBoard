Name     xosera_glue ;
PartNo   00 ;
Date     04/05/2024 [DD/MM/YYYY];
Revision 01 ;
Designer Thomas Jager & Ross Bamford ;
Company  rosco_m68k OSP ;
Assembly None ;
Location  ;
Device   f1508isptqfp100 ;

/*
property   atmel {xor_synthesis=on};
property   atmel {cascade_logic=on};
*/
property   atmel {preassign=keep};
property   atmel {logic_doubling=on};
property   atmel {pin_keep=off};
property   atmel {security=off};
property   atmel {output_fast=on};
property   atmel {tdi_pullup=on};
property   atmel {tms_pullup=on};

/* *************** INPUT PINS *********************/
PIN  33 = XO_IRQ;
PIN  35 = XO_DTACK;
PIN  36 = XO_CRESET;
PIN  37 = XO_CDONE;
PIN  40 = SYS_A1;
PIN  41 = SYS_A2;
PIN  42 = SYS_A3;
PIN  44 = SYS_VPA;
PIN  45 = SYS_A4;
PIN  46 = SYS_A5;
PIN  47 = SYS_A6;
PIN  48 = SYS_IRQ3;
PIN  49 = SYS_A7;
PIN  50 = SYS_IOSEL;
PIN  52 = SYS_A8;
PIN  53 = SYS_EXPSEL;
PIN  54 = SYS_A9;
PIN  55 = SYS_FC0;
PIN  56 = SYS_A10;
PIN  57 = SYS_FC1;
PIN  58 = SYS_A11;
PIN  60 = SYS_FC2;
PIN  61 = SYS_A12;
PIN  63 = SYS_IRQ5;
PIN  64 = SYS_A13;
PIN  65 = SYS_IRQ2;
PIN  67 = SYS_A14;
PIN  68 = SYS_IRQ6;
PIN  69 = SYS_A15;
PIN  70 = SYS_LDS;
PIN  71 = SYS_A16;
PIN  72 = SYS_UDS;
PIN  75 = SYS_A17;
PIN  76 = SYS_A18;
PIN  77 = SYS_A19;
PIN  78 = SYS_A20;
PIN  79 = SYS_A21;
PIN  80 = SYS_A22;
PIN  81 = SYS_A23;
PIN  83 = SYS_AS;
PIN  84 = SYS_BERR;
PIN  85 = SYS_DTACK;
PIN  87 = SYS_CLK;
PIN  88 = SYS_RnW;
PIN  89 = SYS_RESET;
PIN  90 = SD_CLK;

/* *************** OUTPUT PINS *********************/
PIN  92 = SD_A4;
PIN  93 = SD_A5;
PIN  94 = SD_A6;
PIN  96 = SD_A7;
PIN  97 = SD_A8;
PIN  98 = SD_A9;
PIN  99 = SD_A11;
PIN 100 = SD_A12;
PIN   1 = SD_CKE;
PIN   2 = SD_DQMH;
PIN   5 = SD_DQML;
PIN   6 = SD_WE;        /* These four are active low,       */
PIN   7 = SD_CAS;       /* but it's easier to match them    */
PIN   8 = SD_RAS;       /* with the datasheet if they're    */
PIN   9 = SD_CS;        /* treated as not so here...        */
PIN  10 = SD_A3;
PIN  12 = SD_A2;
PIN  13 = SD_A1;
PIN  14 = SD_A0;
PIN  16 = SD_A10;
PIN  17 = SD_BA1;
PIN  19 = SD_BA0;
/*
PIN  20 = NC;
PIN  21 = NC;
PIN  22 = NC;
*/
PIN  23 = SD_CLK_OUT1;
PIN  24 = SD_CLK_OUT2;

PIN  25 = XO_RnW;
PIN  27 = XO_CS;
PIN  28 = XO_BYTESEL;
PIN  29 = XO_REG3;
PIN  30 = XO_REG2;
PIN  31 = XO_REG1;
PIN  32 = XO_REG0;

NODE  IN_INIT;
NODE  REFRESH_Q;                        /* Active high! */
NODE  RQ4, RQ3, RQ2, RQ1, RQ0;
NODE  SD_DTACK;                         /* Active high! */
NODE  SD_IN_CYCLE;
NODE  XO_IRQRQ;                         /* Active high! */
NODE  XO_IRQRQ_AR;
NODE  BANK_FF;

NODE DO_COMMAND_INHIBIT;
NODE DO_NO_OPERATION;
NODE DO_ACTIVE;
NODE DO_READ;
NODE DO_WRITE;
NODE DO_BURST_TERMINATE;
NODE DO_PRECHARGE;
NODE DO_AUTO_REFRESH;
NODE DO_SELF_REFRESH;
NODE DO_LOAD_MODE_REGISTER;

NODE  SD_ACK2;

NODE CTRL_REG_SEL;
NODE CTRL_REG_DTACK;                    /* Active high! */
NODE CTRL_REG_ST1, CTRL_REG_ST0;

NODE SD_STATE6, SD_STATE5, SD_STATE4, SD_STATE3, SD_STATE2, SD_STATE1, SD_STATE0;

FIELD SYS_BANK  = [BANK_FF, SYS_A23];
FIELD SYS_ROW   = [SYS_A22..SYS_A10];
FIELD SYS_COL   = ['b'0, 'b'0, 'b'0, 'b'0, SYS_A9..SYS_A1];
FIELD SYS_MR    = 'b'0001000100000;
FIELD SYS_PCHRG = 'b'0010000000000;

FIELD SD_BANK   = [SD_BA1, SD_BA0];
FIELD SD_ADDR   = [SD_A12..SD_A0];
FIELD SD_STATE  = [SD_STATE6..SD_STATE0];
FIELD SD_COMMAND  = [SD_CS, SD_RAS, SD_CAS, SD_WE];
FIELD SYS_ADDR  = [SYS_A23..SYS_A1];
FIELD RCOUNT    = [RQ4..RQ0];

FIELD CTRL_REG_ST   = [CTRL_REG_ST1, CTRL_REG_ST0];

SD_STATE.ck     = SD_CLK;
SD_STATE.ar     = !SYS_RESET;

SD_CLK_OUT1     = !SYS_CLK;
SD_CLK_OUT2     = !SYS_CLK;
SD_CLK_OUT2.oe  = 'b'0;

SYS_DTACK       = 'b'0;
SYS_DTACK.oe    = SYS_RESET & !XO_CS        /* switch XO_CS to XO_DTACK when ready */
                # SYS_RESET & SD_ACK2
                # SYS_RESET & CTRL_REG_DTACK;


/** ******* SDRAM COMMAND DEFINES *******/
/*                                 CRCW */
/*                                 SAAE */
/*                                  SS  */
$define SD_COMMAND_INHIBIT      'b'1110
$define SD_NO_OPERATION         'b'0111
$define SD_ACTIVE               'b'0011
$define SD_READ                 'b'0101
$define SD_WRITE                'b'0100
$define SD_BURST_TERMINATE      'b'0110
$define SD_PRECHARGE            'b'0010
$define SD_AUTO_REFRESH         'b'0001
$define SD_SELF_REFRESH         'b'0001
$define SD_LOAD_MODE_REGISTER   'b'0000

/*
SD_ACK2.d = SD_DTACK;
SD_ACK2.ck = SYS_CLK;*/
SD_ACK2 = SD_DTACK;

SD_DTACK.ck = SD_CLK;

SD_CKE.ck = SD_CLK;

APPEND SD_IN_CYCLE.d = SD_IN_CYCLE;
SD_IN_CYCLE.ar = SYS_AS # SYS_EXPSEL # !SYS_RESET;
SD_IN_CYCLE.ck = SD_CLK;

APPEND SD_DTACK.d = SD_DTACK;
SD_DTACK.ar = (SYS_LDS & SYS_UDS) # !SD_IN_CYCLE;

/** *********************** STATE  DEFINES ******************************/
$define ST_START            'b'0000000  /* Start state               00 */
$define ST_INIT_CKE         'b'0000001  /* Initial CKE               01 */
$define ST_INIT_PC          'b'0000010  /* Initial precharge         13 */
$define ST_INIT_REFRESH1    'b'0000011  /* 2nd init refr             0B */
$define ST_INIT_RFC1        'b'0000100  /* 2nd init refr             0B */
$define ST_INIT_REFRESH2    'b'0000101  /* 2nd init refr             0B */
$define ST_INIT_RFC2        'b'0000110  /* 2nd init refr             0B */
$define ST_IDLE             'b'0000111  /* Inhibit (no CS)           41 */
$define ST_REFRESHING       'b'0001000  /* Refresh general or init1  09 */
$define ST_RFC              'b'0001001  /* Refresh done (NOP)        39 */
$define ST_LOADMODE         'b'0001010  /* Load mode                 03 */
$define ST_ROW_ACTIVE       'b'0001011  /* NOP (while active)        3B */
$define ST_READING          'b'0001100  /* READ (column)             29 */
$define ST_WRITING          'b'0001101  /* WRITE (column)            21 */
$define ST_ACK              'b'0001110  /* NOP, DTACK                3D */
$define ST_DELAY_ACK        'b'0001111  /* NOP,                      3B */
$define ST_BURST_TERM       'b'0010000  /* We don't use...           31 */
$define ST_PRECHARGING      'b'0010001  /* End cycle                 11 */

!SD_DQML        = !SYS_LDS & !SYS_RnW & SD_STATE:ST_WRITING
                # !SYS_LDS &  SYS_RnW & SD_STATE:ST_READING;
!SD_DQMH        = !SYS_UDS & !SYS_RnW & SD_STATE:ST_WRITING
                # !SYS_UDS &  SYS_RnW & SD_STATE:ST_READING;

/** *********************** SDRAM ADDR BUS ******************/
APPEND SD_BANK  =   SD_COMMAND:SD_LOAD_MODE_REGISTER    & ['b'0, 'b'0];
APPEND SD_BANK  = !(SD_COMMAND:SD_LOAD_MODE_REGISTER)   & SYS_BANK;
APPEND SD_ADDR  =   SD_COMMAND:SD_ACTIVE                & SYS_ROW;
APPEND SD_ADDR  =   SD_COMMAND:SD_READ                  & SYS_COL;
APPEND SD_ADDR  =   SD_COMMAND:SD_WRITE                 & SYS_COL;
APPEND SD_ADDR  =   SD_COMMAND:SD_LOAD_MODE_REGISTER    & SYS_MR;
APPEND SD_ADDR  =   SD_COMMAND:SD_PRECHARGE             & SYS_PCHRG;

DO_COMMAND_INHIBIT.ck           = SD_CLK;
DO_NO_OPERATION.ck              = SD_CLK;
DO_ACTIVE.ck                    = SD_CLK;
DO_READ.ck                      = SD_CLK;
DO_WRITE.ck                     = SD_CLK;
DO_BURST_TERMINATE.ck           = SD_CLK;
DO_PRECHARGE.ck                 = SD_CLK;
DO_AUTO_REFRESH.ck              = SD_CLK;
DO_SELF_REFRESH.ck              = SD_CLK;
DO_LOAD_MODE_REGISTER.ck        = SD_CLK;

APPEND DO_COMMAND_INHIBIT.d     ='d'0;
APPEND DO_NO_OPERATION.d        ='d'0;
APPEND DO_ACTIVE.d              ='d'0;
APPEND DO_READ.d                ='d'0;
APPEND DO_WRITE.d               ='d'0;
APPEND DO_BURST_TERMINATE.d     ='d'0;
APPEND DO_PRECHARGE.d           ='d'0;
APPEND DO_AUTO_REFRESH.d        ='d'0;
APPEND DO_SELF_REFRESH.d        ='d'0;
APPEND DO_LOAD_MODE_REGISTER.d  ='d'0;

/** ***********************  SDRAM STATES  ******************/

SEQUENCE SD_STATE {
    PRESENT ST_START
        IF !SYS_RESET
            NEXT ST_START           OUT DO_COMMAND_INHIBIT      OUT !SD_CKE;
        DEFAULT NEXT ST_INIT_CKE    OUT DO_NO_OPERATION         OUT  SD_CKE;
    PRESENT ST_INIT_CKE
        NEXT ST_INIT_PC             OUT DO_PRECHARGE            OUT  SD_CKE;
    PRESENT ST_INIT_PC
        NEXT ST_INIT_REFRESH1       OUT DO_AUTO_REFRESH         OUT  SD_CKE;
    PRESENT ST_INIT_REFRESH1
        NEXT ST_INIT_RFC1           OUT DO_NO_OPERATION         OUT  SD_CKE;
    PRESENT ST_INIT_RFC1
        NEXT ST_INIT_REFRESH2       OUT DO_AUTO_REFRESH         OUT  SD_CKE;
    PRESENT ST_INIT_REFRESH2
        NEXT ST_INIT_RFC2           OUT DO_NO_OPERATION         OUT  SD_CKE;
    PRESENT ST_INIT_RFC2
        NEXT ST_LOADMODE            OUT DO_LOAD_MODE_REGISTER   OUT  SD_CKE;
    PRESENT ST_LOADMODE
        NEXT ST_IDLE                OUT DO_COMMAND_INHIBIT      OUT  SD_CKE;

    PRESENT ST_REFRESHING
        NEXT ST_RFC                 OUT DO_NO_OPERATION         OUT  SD_CKE OUT REFRESH_Q.SR;
    PRESENT ST_RFC
        NEXT ST_IDLE                OUT DO_COMMAND_INHIBIT      OUT  SD_CKE;

    PRESENT ST_IDLE
        IF  REFRESH_Q
            NEXT ST_REFRESHING      OUT DO_AUTO_REFRESH         OUT  SD_CKE;
        IF !REFRESH_Q & !SYS_AS & !SYS_EXPSEL
            NEXT ST_ROW_ACTIVE      OUT DO_ACTIVE               OUT  SD_CKE OUT SD_IN_CYCLE;
        DEFAULT NEXT ST_IDLE        OUT DO_COMMAND_INHIBIT      OUT  SD_CKE;
    PRESENT ST_ROW_ACTIVE
        /* Don't do PRECHARGE next if the current command is ACTIVE */
        IF !SD_IN_CYCLE & !(SD_COMMAND:SD_ACTIVE)
            NEXT ST_PRECHARGING     OUT DO_PRECHARGE            OUT  SD_CKE;
        IF  SD_IN_CYCLE & (!SYS_LDS # !SYS_UDS) &  SYS_RnW
            NEXT ST_READING         OUT DO_READ                 OUT  SD_CKE;
        IF  SD_IN_CYCLE & (!SYS_LDS # !SYS_UDS) & !SYS_RnW
            NEXT ST_WRITING         OUT DO_WRITE                OUT  SD_CKE;
        DEFAULT NEXT ST_ROW_ACTIVE  OUT DO_NO_OPERATION         OUT  SD_CKE;
    PRESENT ST_READING
        NEXT ST_ACK                 OUT DO_NO_OPERATION         OUT  SD_CKE OUT SD_DTACK;
    PRESENT ST_WRITING
        NEXT ST_ACK                 OUT DO_NO_OPERATION         OUT  SD_CKE OUT SD_DTACK;
    PRESENT ST_DELAY_ACK
        NEXT ST_ACK                 OUT DO_NO_OPERATION         OUT  SD_CKE OUT SD_DTACK;
    PRESENT ST_ACK
        IF  SD_IN_CYCLE
            NEXT ST_ROW_ACTIVE      OUT DO_NO_OPERATION         OUT  SD_CKE;
        DEFAULT NEXT ST_PRECHARGING OUT DO_PRECHARGE            OUT  SD_CKE;
    PRESENT ST_PRECHARGING
        IF REFRESH_Q
            NEXT ST_REFRESHING      OUT DO_AUTO_REFRESH         OUT  SD_CKE;
        DEFAULT NEXT ST_IDLE        OUT DO_COMMAND_INHIBIT      OUT  SD_CKE;
}

SD_COMMAND  = DO_COMMAND_INHIBIT    & SD_COMMAND_INHIBIT
            # DO_NO_OPERATION       & SD_NO_OPERATION
            # DO_ACTIVE             & SD_ACTIVE
            # DO_READ               & SD_READ
            # DO_WRITE              & SD_WRITE
            # DO_BURST_TERMINATE    & SD_BURST_TERMINATE
            # DO_PRECHARGE          & SD_PRECHARGE
            # DO_AUTO_REFRESH       & SD_AUTO_REFRESH
            # DO_SELF_REFRESH       & SD_SELF_REFRESH
            # DO_LOAD_MODE_REGISTER & SD_LOAD_MODE_REGISTER;


/** ***********************  REFRESH COUNT ******************/
REFRESH_Q.CK    = SD_CLK;
RCOUNT.CK       = SD_CLK;

SEQUENCE RCOUNT {
$repeat i = [0..30]
    PRESENT 'D'{i}
        IF REFRESH_Q    OUT REFRESH_Q.D;
        NEXT 'D'{i+1};
$repend
    PRESENT 'D'31
        NEXT 'D'0       OUT REFRESH_Q.D;
}

 
/** ***********************   XOSERA GLUE  ******************/

!XO_CS      = SYS_RESET & !SYS_AS & !SYS_IOSEL & (
                SYS_ADDR:'b'XXXXXX0000000000011XXXXX #
                SYS_ADDR:'b'XXXXXX0000000000100XXXXX
            ) & !SYS_LDS;

XO_RnW      = SYS_RnW;

XO_REG3     = !SYS_A5;
XO_REG2     =  SYS_A4;
XO_REG1     =  SYS_A3;
XO_REG0     =  SYS_A2;
XO_BYTESEL  =  SYS_A1;

SYS_VPA     = 'b'0;
SYS_VPA.oe  = SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 &  SYS_A2 & !SYS_A1 & XO_CDONE; /* Xosera */
/*          # SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 &  SYS_A2 &  SYS_A1;            /* IDE    */
/*          # SYS_RESET & !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 &  SYS_A3 &  SYS_A2 & !SYS_A1;            /* UART   */

XO_CRESET.oe = !SYS_RESET;
XO_CRESET = 'b'0;

XO_IRQRQ.l  = 'b'1;
XO_IRQRQ.ck = XO_IRQ;
XO_IRQRQ_AR = !SYS_RESET
            # !XO_CDONE
            # !SYS_AS & SYS_RnW & SYS_FC2 & SYS_FC1 & SYS_FC0 & SYS_A19 & SYS_A18 & SYS_A17 & SYS_A16 & !SYS_A3 & SYS_A2 & !SYS_A1;
XO_IRQRQ.ar = XO_IRQRQ_AR;

SYS_IRQ2    = 'b'0;
SYS_IRQ2.oe = XO_CDONE & XO_IRQ;

/** ********************* CTRL_REG_ST STATES *******************/
$define CTRL_REG_START  'b'00   /* Start state               00 */
$define CTRL_REG_IDLE   'b'01   /* Idle state                01 */
$define CTRL_REG_LATCH  'b'10   /* Latch state               02 */
$define CTRL_REG_ACK    'b'11   /* ACK command               03 */

/** ********************* OUTPUT SIGNALS ************************/
BANK_FF.ar  = !SYS_RESET;
BANK_FF.l   = SYS_A1;
BANK_FF.ck  = CTRL_REG_ST:CTRL_REG_LATCH;

CTRL_REG_ST.ar  = !SYS_RESET;
CTRL_REG_ST.ck  = SYS_CLK;

CTRL_REG_SEL    = SYS_RESET & !SYS_IOSEL & SYS_FC2 & !SYS_FC1 & SYS_FC0 & (!SYS_UDS # !SYS_LDS) & !SYS_AS & SYS_ADDR:'b'XXXXXX0000010000011000XX;

CTRL_REG_DTACK.ck   = SYS_CLK;
CTRL_REG_DTACK.ar   = !SYS_RESET # SYS_AS # (SYS_UDS & SYS_LDS);

/** ***************** CONTROL REGISTER MACHINE ******************/
SEQUENCE CTRL_REG_ST {
    PRESENT CTRL_REG_START
        NEXT CTRL_REG_IDLE;
    PRESENT CTRL_REG_IDLE
        IF CTRL_REG_SEL
            NEXT CTRL_REG_LATCH;
        DEFAULT NEXT CTRL_REG_IDLE;
    PRESENT CTRL_REG_LATCH
        NEXT CTRL_REG_ACK        OUT CTRL_REG_DTACK;
    PRESENT CTRL_REG_ACK
        IF CTRL_REG_SEL
            NEXT CTRL_REG_ACK    OUT CTRL_REG_DTACK;
        DEFAULT NEXT CTRL_REG_IDLE;
}
